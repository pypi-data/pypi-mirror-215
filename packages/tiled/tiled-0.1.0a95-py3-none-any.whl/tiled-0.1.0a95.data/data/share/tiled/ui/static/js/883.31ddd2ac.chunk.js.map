{"version":3,"file":"static/js/883.31ddd2ac.chunk.js","mappings":"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","sources":["components/line.tsx","components/range-slider.tsx","components/array-1d.tsx"],"sourcesContent":["import {\n  CartesianGrid,\n  Legend,\n  Line,\n  LineChart,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\n\nimport Box from \"@mui/material/Box\";\n\ninterface ArrayLineChartProps {\n  data: number[];\n  startingIndex: number;\n  name: string;\n}\n\nconst ArrayLineChart: React.FunctionComponent<ArrayLineChartProps> = (\n  props\n) => {\n  return (\n    <Box height={300}>\n      <ResponsiveContainer>\n        <LineChart\n          width={500}\n          height={300}\n          data={props.data.map((value, index) => {\n            return { index: index + props.startingIndex, [props.name]: value };\n          })}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"index\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Line type=\"monotone\" stroke=\"#000000\" dataKey={props.name} />\n        </LineChart>\n      </ResponsiveContainer>\n    </Box>\n  );\n};\n\nexport { ArrayLineChart };\n","import Box from \"@mui/material/Box\";\nimport Grid from \"@mui/material/Grid\";\nimport Input from \"@mui/material/Input\";\nimport Slider from \"@mui/material/Slider\";\nimport Typography from \"@mui/material/Typography\";\n\ninterface RangeSliderProps {\n  min: number;\n  max: number;\n  setValue: any;\n  value: number[];\n  limit: number; // largest range allowed\n}\n\nconst RangeSlider: React.FunctionComponent<RangeSliderProps> = (props) => {\n  const handleSliderChange = (\n    event: Event,\n    newValue: number | number[],\n    activeThumb: number\n  ) => {\n    const range = newValue as number[];\n    let safeValue = [0, 0];\n    if (activeThumb === 0) {\n      safeValue = [range[0], Math.min(range[1], range[0] + props.limit)];\n    } else {\n      safeValue = [Math.max(range[0], range[1] - props.limit), range[1]];\n    }\n    props.setValue(safeValue as number[]);\n  };\n\n  const handleMinInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    // If this change puts (max - min) > limit, change max to keep the result in bounds.\n    props.setValue(\n      event.target.value === \"\"\n        ? props.value\n        : [\n            Number(event.target.value),\n            Math.min(props.value[1], Number(event.target.value) + props.limit),\n          ]\n    );\n  };\n\n  const handleMaxInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    // If this change puts (max - min) > limit, change min to keep the result in bounds.\n    props.setValue(\n      event.target.value === \"\"\n        ? props.value\n        : [\n            Math.max(props.value[0], Number(event.target.value) - props.limit),\n            Number(event.target.value),\n          ]\n    );\n  };\n\n  const handleBlur = () => {\n    if (props.value[0] < props.min) {\n      props.setValue([props.min, props.value[1]]);\n    } else if (props.value[1] > props.max) {\n      props.setValue([props.value[0], props.max]);\n    }\n  };\n\n  const marks = [\n    { value: props.min, label: props.min },\n    { value: props.max, label: props.max },\n  ];\n\n  return (\n    <Box>\n      <Typography id=\"input-slider\" gutterBottom>\n        {props.max - props.min <= props.limit\n          ? \"Optionally slice a range of elements from the array\"\n          : `Slice a range of up to ${props.limit} elements of the array`}\n      </Typography>\n      <Grid container spacing={2} alignItems=\"center\">\n        <Grid item xs>\n          <Slider\n            getAriaLabel={() => \"Array slice range\"}\n            value={props.value}\n            min={props.min}\n            max={props.max}\n            marks={marks}\n            onChange={handleSliderChange}\n            valueLabelDisplay=\"auto\"\n          />\n        </Grid>\n        <Grid item>\n          <Input\n            value={props.value[0]}\n            size=\"small\"\n            onChange={handleMinInputChange}\n            onBlur={handleBlur}\n            inputProps={{\n              step: 1,\n              min: props.min,\n              max: props.max,\n              type: \"number\",\n              \"aria-labelledby\": \"min-input-slider\",\n            }}\n          />\n        </Grid>\n        <Grid item>&ndash;</Grid>\n        <Grid item>\n          <Input\n            value={props.value[1]}\n            size=\"small\"\n            onChange={handleMaxInputChange}\n            onBlur={handleBlur}\n            inputProps={{\n              step: 1,\n              min: props.min,\n              max: props.max,\n              type: \"number\",\n              \"aria-labelledby\": \"max-input-slider\",\n            }}\n          />\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default RangeSlider;\n","import * as React from \"react\";\n\nimport { useEffect, useState } from \"react\";\n\nimport { ArrayLineChart } from \"./line\";\nimport FormControl from \"@mui/material/FormControl\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport FormLabel from \"@mui/material/FormLabel\";\nimport Radio from \"@mui/material/Radio\";\nimport RadioGroup from \"@mui/material/RadioGroup\";\nimport RangeSlider from \"./range-slider\";\nimport Skeleton from \"@mui/material/Skeleton\";\nimport { axiosInstance } from \"../client\";\nimport { components } from \"../openapi_schemas\";\nimport { debounce } from \"ts-debounce\";\n\ninterface DisplayRadioButtonsProps {\n  value: string;\n  handleChange: any;\n}\n\nconst DisplayRadioButtons: React.FunctionComponent<DisplayRadioButtonsProps> = (\n  props\n) => {\n  return (\n    <FormControl>\n      <FormLabel id=\"display-radio-buttons-group-label\">View as</FormLabel>\n      <RadioGroup\n        row\n        aria-labelledby=\"display-radio-buttons-group-label\"\n        name=\"display-radio-buttons-group\"\n        value={props.value}\n        onChange={props.handleChange}\n      >\n        <FormControlLabel value=\"chart\" control={<Radio />} label=\"Chart\" />\n        <FormControlLabel value=\"list\" control={<Radio />} label=\"List\" />\n      </RadioGroup>\n    </FormControl>\n  );\n};\n\ninterface DataDisplayProps {\n  name: string;\n  link: string;\n  range: number[];\n}\n\nconst DataDisplay: React.FunctionComponent<DataDisplayProps> = (props) => {\n  const [displayType, setDisplayType] = useState<string>(\"chart\");\n  const [data, setData] = useState<any[]>([]);\n  const [dataIsLoaded, setDataIsLoaded] = useState<boolean>(false);\n\n  const handleDisplayTypeChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    setDisplayType((event.target as HTMLInputElement).value);\n  };\n\n  useEffect(() => {\n    const controller = new AbortController();\n    async function loadData() {\n      var response = await axiosInstance.get(\n        `${props.link}?format=application/json&slice=${props.range[0]}:${props.range[1]}`,\n        { signal: controller.signal }\n      );\n      const data = response.data;\n      setData(data);\n      setDataIsLoaded(true);\n    }\n    loadData();\n    return () => {\n      controller.abort();\n    };\n  }, [props.link, props.range]);\n\n  const display = () => {\n    switch (displayType) {\n      case \"chart\":\n        return dataIsLoaded ? (\n          <ArrayLineChart\n            data={data}\n            startingIndex={props.range[0]}\n            name={props.name}\n          />\n        ) : (\n          <Skeleton variant=\"rectangular\" />\n        );\n      case \"list\":\n        return dataIsLoaded ? (\n          <ItemList data={data} />\n        ) : (\n          <Skeleton variant=\"rectangular\" />\n        );\n    }\n  };\n\n  return (\n    <div>\n      <DisplayRadioButtons\n        value={displayType}\n        handleChange={handleDisplayTypeChange}\n      />\n      {display()}\n    </div>\n  );\n};\n\ninterface ItemListProps {\n  data: any[];\n}\n\nconst ItemList: React.FunctionComponent<ItemListProps> = (props) => {\n  return (\n    <table>\n      <tbody>\n        {props.data.map((item, index) => {\n          return (\n            <tr key={`item-tr-${index}`}>\n              <td key={`item-td-${index}`}>{item}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\ninterface IProps {\n  segments: string[];\n  item: any;\n  link: string;\n  structure: components[\"schemas\"][\"Structure\"];\n}\n\nconst LIMIT = 1000; // largest number of 1D elements we will request and display at once\n\nconst Array1D: React.FunctionComponent<IProps> = (props) => {\n  const MAX_DEFAULT_RANGE = 1000;\n  const shape = props.structure!.macro!.shape! as number[];\n  const max = shape[0];\n  const [value, setValue] = React.useState<number[]>([\n    0,\n    Math.min(max, MAX_DEFAULT_RANGE),\n  ]);\n  return (\n    <div>\n      <RangeSlider\n        value={value}\n        setValue={debounce(setValue, 100, { maxWait: 200 })}\n        min={0}\n        max={max}\n        limit={LIMIT}\n      />\n      <DataDisplay link={props.link} range={value} name={props.item.data.id} />\n    </div>\n  );\n};\n\nexport default Array1D;\n"],"names":["ArrayLineChart","props","Box","height","ResponsiveContainer","LineChart","width","data","map","value","index","startingIndex","name","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Line","type","stroke","handleBlur","min","setValue","max","marks","label","Typography","id","gutterBottom","limit","Grid","container","spacing","alignItems","item","xs","Slider","getAriaLabel","onChange","event","newValue","activeThumb","range","safeValue","Math","valueLabelDisplay","Input","size","target","Number","onBlur","inputProps","step","DisplayRadioButtons","FormControl","FormLabel","RadioGroup","row","handleChange","FormControlLabel","control","Radio","DataDisplay","useState","displayType","setDisplayType","setData","dataIsLoaded","setDataIsLoaded","useEffect","controller","AbortController","axiosInstance","link","signal","response","loadData","abort","Skeleton","variant","ItemList","display","structure","macro","shape","React","debounce","maxWait"],"sourceRoot":""}