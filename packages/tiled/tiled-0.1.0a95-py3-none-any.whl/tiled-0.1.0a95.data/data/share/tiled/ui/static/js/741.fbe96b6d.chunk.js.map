{"version":3,"file":"static/js/741.fbe96b6d.chunk.js","mappings":"2JAQMA,GAAUC,EAAAA,EAAAA,OAAK,kBAAM,qFACrBC,GAAUD,EAAAA,EAAAA,OAAK,kBAAM,iEAqD3B,UA5CuD,SAACE,GACtD,GAAIA,EAAMC,UAAWC,MAAOC,OAC1B,OACE,UAAC,IAAD,CAAOC,SAAS,UAAhB,4CACkC,KAChC,cACEC,KAAK,oDACLC,OAAO,SACPC,IAAI,aAHN,kCAFF,oFAeJ,OADcP,EAAMC,UAAWO,MAAOC,MACxBC,OAAS,GACrB,KAAK,EACH,OACE,SAAC,EAAAC,SAAD,CAAUC,UAAU,SAAC,IAAD,CAAUC,QAAQ,gBAAtC,UACE,SAAChB,EAAD,CACEiB,SAAUd,EAAMc,SAChBC,KAAMf,EAAMe,KACZC,KAAMhB,EAAMgB,KACZf,UAAWD,EAAMC,cAIzB,KAAK,EACH,OACE,SAAC,EAAAU,SAAD,CAAUC,UAAU,SAAC,IAAD,CAAUC,QAAQ,gBAAtC,UACE,SAACd,EAAD,CACEe,SAAUd,EAAMc,SAChBC,KAAMf,EAAMe,KACZC,KAAMhB,EAAMgB,KACZf,UAAWD,EAAMC","sources":["components/overview-array.tsx"],"sourcesContent":["import * as React from \"react\";\n\nimport { Suspense, lazy } from \"react\";\n\nimport Alert from \"@mui/material/Alert\";\nimport Skeleton from \"@mui/material/Skeleton\";\nimport { components } from \"../openapi_schemas\";\n\nconst Array1D = lazy(() => import(\"../components/array-1d\"));\nconst ArrayND = lazy(() => import(\"../components/array-nd\"));\n\ninterface IProps {\n  segments: string[];\n  item: any;\n  link: string;\n  structure: components[\"schemas\"][\"Structure\"];\n}\n\nconst ArrayOverview: React.FunctionComponent<IProps> = (props) => {\n  if (props.structure!.micro!.fields) {\n    return (\n      <Alert severity=\"warning\">\n        This is a \"record array\" with a{\" \"}\n        <a\n          href=\"https://numpy.org/doc/stable/user/basics.rec.html\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          structured data type\n        </a>\n        . The web interface cannot view it. Use the \"Download\" tab to access the\n        data.\n      </Alert>\n    );\n  }\n  const shape = props.structure!.macro!.shape as number[];\n  switch (shape.length < 2) {\n    case true:\n      return (\n        <Suspense fallback={<Skeleton variant=\"rectangular\" />}>\n          <Array1D\n            segments={props.segments}\n            item={props.item}\n            link={props.link}\n            structure={props.structure}\n          />\n        </Suspense>\n      );\n    case false:\n      return (\n        <Suspense fallback={<Skeleton variant=\"rectangular\" />}>\n          <ArrayND\n            segments={props.segments}\n            item={props.item}\n            link={props.link}\n            structure={props.structure}\n          />\n        </Suspense>\n      );\n  }\n};\n\nexport default ArrayOverview;\n"],"names":["Array1D","lazy","ArrayND","props","structure","micro","fields","severity","href","target","rel","macro","shape","length","Suspense","fallback","variant","segments","item","link"],"sourceRoot":""}