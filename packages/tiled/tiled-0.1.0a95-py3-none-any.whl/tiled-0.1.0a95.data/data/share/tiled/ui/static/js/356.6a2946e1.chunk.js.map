{"version":3,"file":"static/js/356.6a2946e1.chunk.js","mappings":"8LAiDA,IAjCuE,SACrEA,GAEA,IAAMC,EAAaC,MAAMC,KAAKD,MAAMF,EAAMI,aAAaC,QAKvD,OACE,SAAC,IAAD,WACE,UAAC,IAAD,CAAaC,GAAI,CAAEC,GAAI,GAAvB,WACE,SAAC,IAAD,CAAYC,GAAG,gCAAf,wBACA,SAAC,IAAD,CACEC,QAAQ,yBACRD,GAAG,mBACHE,MAAOV,EAAMU,MACbC,MAAM,YACNC,SAba,SAACC,GACpBb,EAAMc,SAASD,EAAME,OAAOL,QAOxB,SAOGT,EAAWe,KAAI,SAACC,GACf,OACE,SAAC,IAAD,CAAyCP,MAAOO,EAAhD,SACGA,GADH,oBAA4BA,UAMlC,SAAC,IAAD,2C,0PC4DFC,EAA2D,SAAClB,GAChE,IAAImB,GAAWC,EAAAA,EAAAA,MAaf,OACE,SAAC,IAAD,WACE,UAAC,IAAD,YACE,SAAC,IAAD,CAAYZ,GAAG,6BAAf,2BACA,SAAC,IAAD,CACEC,QAAQ,sBACRD,GAAG,gBACHE,MAAM,GACNC,MAAM,SACNC,SApBa,SAACC,GACpB,IAAMQ,EAASR,EAAME,OAAOL,MAC5BS,EAAS,UAAD,OACInB,EAAMsB,SACbN,KAAI,SAAUO,GACb,MAAO,IAAMA,KAEdC,KAAK,IALF,YAKSH,KAQb,SAOGrB,EAAMyB,QAAQT,KAAI,SAACK,GAClB,OACE,SAAC,IAAD,CAAmCX,MAAOW,EAA1C,SACGA,GADH,iBAAyBA,UAM/B,SAAC,IAAD,wDAcFK,EAA0D,SAAC1B,GAC/D,MAAgC2B,EAAAA,SAHR,IAGxB,eAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAAe9B,EAAMyB,QAAQT,KAAI,SAACK,GAAD,MAAa,CAClDU,MAAOV,EACPW,WAAYX,EACZY,MAAO,QAEHC,EAAYlC,EAAMmC,KAAKnB,KAAI,SAACoB,EAAKC,GAErC,OADAD,EAAI5B,GAAK6B,EACFD,KAET,OACE,SAAC,OAAD,kBACOpC,EAAMsC,QAAU,CAAEA,SAAS,GAAS,IAD3C,IAEEH,KAAMD,EACNT,QAASK,EACTS,YAAU,EACVX,SAAUA,EACVY,mBAAoB,CAAC,GAAI,GAAI,KAC7BC,iBAAkB,SAACC,GAAD,OAAiBb,EAAYa,IAC/CC,YAAU,MAKhB,UAxJ2D,SAAC3C,GAC1D,IAAMI,EAAcJ,EAAM4C,KAAKC,KAAKC,WAAWC,UAAUC,MAAM5C,YAC/D,GAAkC6C,EAAAA,EAAAA,UAA0B,GAA5D,eAAOhC,EAAP,KAAkBiC,EAAlB,KACA,GAAwBD,EAAAA,EAAAA,UAAgB,IAAxC,eAAOd,EAAP,KAAagB,EAAb,KACA,GAA0CF,EAAAA,EAAAA,WAAkB,GAA5D,eAAOG,EAAP,KAAsBC,EAAtB,KACM5B,EAAUzB,EAAM4C,KAAKC,KAAKC,WAAWC,UAAUC,MAAMvB,SAC3D6B,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBACjBC,EAAiBzD,EAAM4C,KAAKC,KAAKa,MAAMzC,UAAU0C,QACrD,UACA1C,GAJY,wCAMd,sGACuB2C,EAAAA,GAAAA,IAAA,UAChBH,EADgB,gCAEnB,CAAEI,OAAQN,EAAWM,SAHzB,OACMC,EADN,OAKQ3B,EAAO2B,EAASjB,KACnBkB,MAAM,MACN/C,KAAI,SAACgD,GAAD,OAAkBC,KAAKC,MAAMF,MACpCb,EAAQhB,GACRkB,GAAiB,GATnB,2CANc,wBAkBd,OAlBc,mCAiBdc,GACO,WACLZ,EAAWa,WAEZ,CACDpE,EAAMsB,SACNtB,EAAM4C,KAAKC,KAAKa,MAAMW,KACtBrE,EAAM4C,KAAKC,KAAKa,MAAMzC,UACtBA,IAUF,OACE,SAAC,IAAD,CAAKX,GAAI,CAAEC,GAAI,GAAf,UACE,UAAC,IAAD,CAAW+D,SAAS,KAApB,WACE,SAACpD,EAAD,CAAcI,SAAUtB,EAAMsB,SAAUG,QAASA,KACjD,UAAC,IAAD,CAAKQ,MAAM,OAAOsC,GAAI,EAAtB,WACE,SAAC,IAAD,CAAY/D,GAAG,cAAcgE,QAAQ,KAAKC,UAAU,KAApD,mBAGCrE,EAAc,GACb,UAAC,IAAD,YACE,UAAC,IAAD,CAAOsE,SAAS,OAAhB,gDACoC,uCADpC,qFAIE,kBAJF,0FAQA,SAAC,IAAD,CACEtE,YAAaA,EACbM,MAAOO,EACPH,SA5BmB,SAACG,GAEhCkC,EAAQ,IACRE,GAAiB,GAEjBH,EAAajC,SA2BL,IAEF,SAACS,EAAD,CAAaS,KAAMA,EAAMV,QAASA,EAASa,SAAUc","sources":["components/choose-partition.tsx","components/overview-dataframe.tsx"],"sourcesContent":["import * as React from \"react\";\n\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\n\nimport Box from \"@mui/material/Box\";\nimport FormControl from \"@mui/material/FormControl\";\nimport FormHelperText from \"@mui/material/FormHelperText\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\n\ninterface ChoosePartitionProps {\n  npartitions: number;\n  value: number | string;\n  setValue: any;\n}\n\nconst ChoosePartition: React.FunctionComponent<ChoosePartitionProps> = (\n  props\n) => {\n  const partitions = Array.from(Array(props.npartitions).keys());\n  const handleChange = (event: SelectChangeEvent<typeof props.value>) => {\n    props.setValue(event.target.value);\n  };\n\n  return (\n    <Box>\n      <FormControl sx={{ my: 2 }}>\n        <InputLabel id=\"partition-select-helper-label\">Partition</InputLabel>\n        <Select\n          labelId=\"partition-select-label\"\n          id=\"partition-select\"\n          value={props.value}\n          label=\"Partition\"\n          onChange={handleChange}\n        >\n          {partitions.map((partition) => {\n            return (\n              <MenuItem key={`partition-${partition}`} value={partition}>\n                {partition}\n              </MenuItem>\n            );\n          })}\n        </Select>\n        <FormHelperText>A portion of the rows</FormHelperText>\n      </FormControl>\n    </Box>\n  );\n};\n\nexport default ChoosePartition;\n","import * as React from \"react\";\n\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\nimport { useEffect, useState } from \"react\";\n\nimport Alert from \"@mui/material/Alert\";\nimport Box from \"@mui/material/Box\";\nimport ChoosePartition from \"./choose-partition\";\nimport Container from \"@mui/material/Container\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport FormControl from \"@mui/material/FormControl\";\nimport FormHelperText from \"@mui/material/FormHelperText\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport Typography from \"@mui/material/Typography\";\nimport { axiosInstance } from \"../client\";\nimport { useNavigate } from \"react-router-dom\";\n\ninterface IProps {\n  segments: string[];\n  item: any;\n}\n\nconst DataFrameOverview: React.FunctionComponent<IProps> = (props) => {\n  const npartitions = props.item.data.attributes.structure.macro.npartitions;\n  const [partition, setPartition] = useState<number | string>(0);\n  const [rows, setRows] = useState<any[]>([]);\n  const [rowsAreLoaded, setRowsAreLoaded] = useState<boolean>(false);\n  const columns = props.item.data.attributes.structure.macro.columns;\n  useEffect(() => {\n    const controller = new AbortController();\n    const templated_link = props.item.data.links.partition.replace(\n      \"{index}\",\n      partition\n    );\n    async function loadRows() {\n      var response = await axiosInstance.get(\n        `${templated_link}&format=application/json-seq`,\n        { signal: controller.signal }\n      );\n      const rows = response.data\n        .split(\"\\n\")\n        .map((line: string) => JSON.parse(line)) as any[];\n      setRows(rows);\n      setRowsAreLoaded(true);\n    }\n    loadRows();\n    return () => {\n      controller.abort();\n    };\n  }, [\n    props.segments,\n    props.item.data.links.full,\n    props.item.data.links.partition,\n    partition,\n  ]);\n\n  const setPartitionAndClearRows = (partition: number | string) => {\n    // First clear the current contents and reactive the loading spinner.\n    setRows([]);\n    setRowsAreLoaded(false);\n    // And then update the select box and begin downloading the new partition.\n    setPartition(partition);\n  };\n  return (\n    <Box sx={{ my: 4 }}>\n      <Container maxWidth=\"lg\">\n        <VisitColumns segments={props.segments} columns={columns} />\n        <Box width=\"100%\" mt={5}>\n          <Typography id=\"table-title\" variant=\"h6\" component=\"h2\">\n            Table\n          </Typography>\n          {npartitions > 1 ? (\n            <Box>\n              <Alert severity=\"info\">\n                This large dataframe available in <em>partitions</em> (chunks of\n                rows) because the full dataframe may be slow to download and\n                display.\n                <br />\n                In the \"Download\" tab, you can request the full table as a\n                single file if you wish.\n              </Alert>\n              <ChoosePartition\n                npartitions={npartitions}\n                value={partition}\n                setValue={setPartitionAndClearRows}\n              />\n            </Box>\n          ) : (\n            \"\"\n          )}\n          <DataDisplay rows={rows} columns={columns} loading={!rowsAreLoaded} />\n        </Box>\n      </Container>\n    </Box>\n  );\n};\n\ninterface VisitColumnsProps {\n  columns: string[];\n  segments: string[];\n}\n\nconst VisitColumns: React.FunctionComponent<VisitColumnsProps> = (props) => {\n  let navigate = useNavigate();\n\n  const handleChange = (event: SelectChangeEvent) => {\n    const column = event.target.value;\n    navigate(\n      `/browse${props.segments\n        .map(function (segment) {\n          return \"/\" + segment;\n        })\n        .join(\"\")}/${column}`\n    );\n  };\n\n  return (\n    <Box>\n      <FormControl>\n        <InputLabel id=\"column-select-helper-label\">Go to Column</InputLabel>\n        <Select\n          labelId=\"column-select-label\"\n          id=\"column-select\"\n          value=\"\"\n          label=\"Column\"\n          onChange={handleChange}\n        >\n          {props.columns.map((column) => {\n            return (\n              <MenuItem key={`column-${column}`} value={column}>\n                {column}\n              </MenuItem>\n            );\n          })}\n        </Select>\n        <FormHelperText>Access a single column as an Array.</FormHelperText>\n      </FormControl>\n    </Box>\n  );\n};\n\ninterface IDataDisplayProps {\n  columns: string[];\n  rows: any[];\n  loading: boolean;\n}\n\nconst DEFAULT_PAGE_SIZE = 10;\n\nconst DataDisplay: React.FunctionComponent<IDataDisplayProps> = (props) => {\n  const [pageSize, setPageSize] = React.useState<number>(DEFAULT_PAGE_SIZE);\n  const data_columns = props.columns.map((column) => ({\n    field: column,\n    headerName: column,\n    width: 200,\n  }));\n  const data_rows = props.rows.map((row, index) => {\n    row.id = index;\n    return row;\n  });\n  return (\n    <DataGrid\n      {...(props.loading ? { loading: true } : {})}\n      rows={data_rows}\n      columns={data_columns}\n      pagination\n      pageSize={pageSize}\n      rowsPerPageOptions={[10, 30, 100]}\n      onPageSizeChange={(newPageSize) => setPageSize(newPageSize)}\n      autoHeight\n    />\n  );\n};\n\nexport default DataFrameOverview;\n"],"names":["props","partitions","Array","from","npartitions","keys","sx","my","id","labelId","value","label","onChange","event","setValue","target","map","partition","VisitColumns","navigate","useNavigate","column","segments","segment","join","columns","DataDisplay","React","pageSize","setPageSize","data_columns","field","headerName","width","data_rows","rows","row","index","loading","pagination","rowsPerPageOptions","onPageSizeChange","newPageSize","autoHeight","item","data","attributes","structure","macro","useState","setPartition","setRows","rowsAreLoaded","setRowsAreLoaded","useEffect","controller","AbortController","templated_link","links","replace","axiosInstance","signal","response","split","line","JSON","parse","loadRows","abort","full","maxWidth","mt","variant","component","severity"],"sourceRoot":""}