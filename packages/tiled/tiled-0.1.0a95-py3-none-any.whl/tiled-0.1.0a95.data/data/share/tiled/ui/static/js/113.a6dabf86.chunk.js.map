{"version":3,"file":"static/js/113.a6dabf86.chunk.js","mappings":"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","sources":["components/choose-partition.tsx","components/download-core.tsx","components/column-list.tsx","components/download-dataframe.tsx","config.ts"],"sourcesContent":["import * as React from \"react\";\n\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\n\nimport Box from \"@mui/material/Box\";\nimport FormControl from \"@mui/material/FormControl\";\nimport FormHelperText from \"@mui/material/FormHelperText\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\n\ninterface ChoosePartitionProps {\n  npartitions: number;\n  value: number | string;\n  setValue: any;\n}\n\nconst ChoosePartition: React.FunctionComponent<ChoosePartitionProps> = (\n  props\n) => {\n  const partitions = Array.from(Array(props.npartitions).keys());\n  const handleChange = (event: SelectChangeEvent<typeof props.value>) => {\n    props.setValue(event.target.value);\n  };\n\n  return (\n    <Box>\n      <FormControl sx={{ my: 2 }}>\n        <InputLabel id=\"partition-select-helper-label\">Partition</InputLabel>\n        <Select\n          labelId=\"partition-select-label\"\n          id=\"partition-select\"\n          value={props.value}\n          label=\"Partition\"\n          onChange={handleChange}\n        >\n          {partitions.map((partition) => {\n            return (\n              <MenuItem key={`partition-${partition}`} value={partition}>\n                {partition}\n              </MenuItem>\n            );\n          })}\n        </Select>\n        <FormHelperText>A portion of the rows</FormHelperText>\n      </FormControl>\n    </Box>\n  );\n};\n\nexport default ChoosePartition;\n","import * as React from \"react\";\n\nimport Select, { SelectChangeEvent } from \"@mui/material/Select\";\nimport { useEffect, useMemo, useState } from \"react\";\n\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport ContentCopyIcon from \"@mui/icons-material/ContentCopy\";\nimport FormControl from \"@mui/material/FormControl\";\nimport IconButton from \"@mui/material/IconButton\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport Popover from \"@mui/material/Popover\";\nimport Skeleton from \"@mui/material/Skeleton\";\nimport Stack from \"@mui/material/Stack\";\nimport TextField from \"@mui/material/TextField\";\nimport Tooltip from \"@mui/material/Tooltip\";\nimport { about } from \"../client\";\nimport { components } from \"../openapi_schemas\";\nimport copy from \"clipboard-copy\";\nimport { loadConfig } from \"../config\";\n\ninterface Format {\n  mimetype: string;\n  display_name: string;\n  extension: string;\n}\n\ninterface DownloadProps {\n  name: string;\n  structureFamily: string;\n  format: Format | undefined;\n  setFormat: any;\n  link: string;\n}\n\nconst Download: React.FunctionComponent<DownloadProps> = (props) => {\n  const [formats, setFormats] = useState<any>();\n  const [info, setInfo] = useState<components[\"schemas\"][\"About\"]>();\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(\n    null\n  );\n\n  useMemo(() => {\n    async function loadInfo() {\n      var result = await about();\n      setInfo(result);\n    }\n    loadInfo();\n  }, []);\n\n  // Access config to get info about supported formats.\n  useEffect(() => {\n    const controller = new AbortController();\n    async function loadFormats() {\n      const config = await loadConfig(controller.signal);\n      const formats = config.structure_families[props.structureFamily].formats;\n      setFormats(formats);\n    }\n    loadFormats();\n    return () => {\n      controller.abort();\n    };\n  }, [props.structureFamily]);\n  const handleLinkClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const open = Boolean(anchorEl);\n  const id = open ? \"link-popover\" : undefined;\n\n  const handleChange = (event: SelectChangeEvent) => {\n    const mimetype = event.target.value as string;\n    const format = formats.find(\n      (format: Format) => format.mimetype === mimetype\n    );\n    props.setFormat(format);\n  };\n\n  if (formats === undefined || info === undefined) {\n    // Waiting for 'about' and 'config' to load.\n    return <Skeleton variant=\"rectangular\" />;\n  }\n  const value = props.format !== undefined ? props.format.mimetype : \"\";\n\n  return (\n    <Stack spacing={2} direction=\"column\">\n      <Box sx={{ minWidth: 120 }}>\n        <FormControl fullWidth>\n          <InputLabel id=\"formats-select-label\">Format *</InputLabel>\n          <Select\n            labelId=\"formats-select-label\"\n            id=\"formats-select\"\n            value={value}\n            label=\"Format\"\n            onChange={handleChange}\n            required\n          >\n            {formats.map((format: Format) => {\n              return (\n                // Look up the display name in the UI configuration.\n                // If none is given, skip this format.\n                info!.formats[props.structureFamily].includes(\n                  format.mimetype\n                ) ? (\n                  <MenuItem\n                    key={`format-${format.mimetype}`}\n                    value={format.mimetype}\n                  >\n                    {format.display_name as string}\n                  </MenuItem>\n                ) : (\n                  \"\"\n                )\n              );\n            })}\n          </Select>\n        </FormControl>\n      </Box>\n      <Stack spacing={1} direction=\"row\">\n        <Tooltip title=\"Download to a file\">\n          <span>\n            {\n              // The filename query parameter cues the server to set the\n              // Content-Disposition header which prompts the browser to open\n              // a \"Save As\" dialog initialized with the specified filename.\n            }\n            <Button\n              component=\"a\"\n              href={\n                props.link\n                  ? `${props.link}&filename=${props.name}${\n                      props.format!.extension\n                    }`\n                  : \"#\"\n              }\n              variant=\"outlined\"\n              {...(props.link ? {} : { disabled: true })}\n            >\n              Download\n            </Button>\n          </span>\n        </Tooltip>\n        <Tooltip title=\"Get a URL to this specific data\">\n          <span>\n            <Button\n              aria-describedby={id}\n              variant=\"outlined\"\n              {...(props.link ? {} : { disabled: true })}\n              onClick={handleLinkClick}\n            >\n              Link\n            </Button>\n          </span>\n        </Tooltip>\n        <Popover\n          id={id}\n          open={open}\n          anchorEl={anchorEl}\n          onClose={handleClose}\n          anchorOrigin={{\n            vertical: \"bottom\",\n            horizontal: \"right\",\n          }}\n          transformOrigin={{\n            vertical: \"top\",\n            horizontal: \"right\",\n          }}\n          PaperProps={{\n            style: { width: 500 },\n          }}\n        >\n          <Box sx={{ px: 2, py: 2 }}>\n            <Stack direction=\"row\" spacing={1} />\n            <TextField\n              id=\"link-text\"\n              label=\"Link\"\n              sx={{ width: \"90%\" }}\n              defaultValue={props.link}\n              InputProps={{\n                readOnly: true,\n              }}\n              variant=\"outlined\"\n            />\n            <Tooltip title=\"Copy to clipboard\">\n              <IconButton\n                onClick={() => {\n                  copy(props.link);\n                }}\n              >\n                <ContentCopyIcon />\n              </IconButton>\n            </Tooltip>\n          </Box>\n        </Popover>\n        <Tooltip title=\"Open in a new tab (if format is supported by web browser)\">\n          <span>\n            <Button\n              component=\"a\"\n              href={props.link ? props.link : \"#\"}\n              target=\"_blank\"\n              variant=\"outlined\"\n              {...(props.link ? {} : { disabled: true })}\n            >\n              Open\n            </Button>\n          </span>\n        </Tooltip>\n      </Stack>\n    </Stack>\n  );\n};\n\nexport { Download };\nexport type { Format };\n","import * as React from \"react\";\n\nimport Button from \"@mui/material/Button\";\nimport ButtonGroup from \"@mui/material/ButtonGroup\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport List from \"@mui/material/List\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemButton from \"@mui/material/ListItemButton\";\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport ListSubheader from \"@mui/material/ListSubheader\";\nimport Stack from \"@mui/material/Stack\";\n\ninterface ColumnListProps {\n  heading: string;\n  allColumns: string[];\n  columns: any;\n  setColumns: any;\n}\n\nconst ColumnList: React.FunctionComponent<ColumnListProps> = (props) => {\n  const handleToggle = (value: string) => () => {\n    const currentIndex = props.columns.indexOf(value);\n    const newChecked = [...props.columns];\n\n    if (currentIndex === -1) {\n      newChecked.push(value);\n    } else {\n      newChecked.splice(currentIndex, 1);\n    }\n\n    props.setColumns(newChecked);\n  };\n\n  return (\n    <Stack spacing={1} direction=\"column\">\n      <List\n        sx={{\n          width: \"100%\",\n          maxWidth: 500,\n          overflow: \"auto\",\n          maxHeight: 300,\n          bgcolor: \"background.paper\",\n        }}\n        subheader={\n          <ListSubheader component=\"div\" id=\"column-list-heading\">\n            {props.heading}\n          </ListSubheader>\n        }\n      >\n        {props.allColumns.map((value) => {\n          const labelId = `checkbox-list-label-${value}`;\n\n          return (\n            <ListItem key={value} disablePadding>\n              <ListItemButton\n                role={undefined}\n                onClick={handleToggle(value)}\n                dense\n              >\n                <ListItemIcon>\n                  <Checkbox\n                    edge=\"start\"\n                    checked={props.columns.indexOf(value) !== -1}\n                    tabIndex={-1}\n                    disableRipple\n                    inputProps={{ \"aria-labelledby\": labelId }}\n                  />\n                </ListItemIcon>\n                <ListItemText id={labelId} primary={value} />\n              </ListItemButton>\n            </ListItem>\n          );\n        })}\n      </List>\n      <ButtonGroup variant=\"text\" aria-label=\"check-all-or-none\">\n        <Button\n          onClick={() => {\n            props.setColumns(props.allColumns);\n          }}\n        >\n          Select All\n        </Button>\n        <Button\n          onClick={() => {\n            props.setColumns([]);\n          }}\n        >\n          Select None\n        </Button>\n      </ButtonGroup>\n    </Stack>\n  );\n};\n\nexport default ColumnList;\n","import * as React from \"react\";\n\nimport { Download, Format } from \"./download-core\";\n\nimport Box from \"@mui/material/Box\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport ChoosePartition from \"./choose-partition\";\nimport ColumnList from \"./column-list\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport FormGroup from \"@mui/material/FormGroup\";\nimport Stack from \"@mui/material/Stack\";\nimport { useState } from \"react\";\n\ninterface DownloadDataFrameProps {\n  name: string;\n  structureFamily: string;\n  macrostructure: any;\n  specs: string[];\n  partition_link: string;\n  full_link: string;\n}\n\nconst DownloadDataFrame: React.FunctionComponent<DownloadDataFrameProps> = (\n  props\n) => {\n  const npartitions = props.macrostructure.npartitions;\n  const [format, setFormat] = useState<Format>();\n  const [partition, setPartition] = useState<number>(0);\n  const [full, setFull] = useState<boolean>(npartitions === 1);\n  const [columns, setColumns] = useState<string[]>(\n    props.macrostructure.columns\n  );\n  var link: string;\n  if (format !== undefined && columns.length !== 0) {\n    if (full) {\n      link = `${props.full_link}?format=${format.mimetype}`;\n    } else {\n      link = `${props.partition_link.replace(\n        \"{index}\",\n        partition.toString()\n      )}&format=${format.mimetype}`;\n    }\n    // If a subset of the columns is selected, specify them.\n    // We use .join(\",\") here so we can use string equality.\n    // You wouldn't believe me if I told you how difficult it is\n    // to check Array equality in Javascript.\n    if (columns.join(\",\") !== props.macrostructure.columns.join(\",\")) {\n      const field_params = columns\n        .map((column) => {\n          return `&field=${column}`;\n        })\n        .join(\"\");\n      link = link.concat(field_params);\n    }\n  } else {\n    link = \"\";\n  }\n\n  const handleFullCheckbox = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFull(event.target.checked);\n  };\n\n  return (\n    <Box>\n      <Stack spacing={2} direction=\"column\">\n        <Stack spacing={1} direction=\"row\">\n          <ColumnList\n            heading=\"Columns\"\n            allColumns={props.macrostructure.columns}\n            columns={columns}\n            setColumns={setColumns}\n          />\n          {npartitions > 1 ? (\n            <Box>\n              <FormGroup>\n                <FormControlLabel\n                  control={\n                    <Checkbox checked={full} onChange={handleFullCheckbox} />\n                  }\n                  label=\"All rows\"\n                />\n              </FormGroup>\n              {full ? (\n                \"\"\n              ) : (\n                <ChoosePartition\n                  npartitions={npartitions}\n                  value={partition}\n                  setValue={setPartition}\n                />\n              )}\n            </Box>\n          ) : (\n            \"\"\n          )}\n        </Stack>\n        <Download\n          name={props.name}\n          format={format}\n          setFormat={setFormat}\n          structureFamily={props.structureFamily}\n          link={link}\n        />\n      </Stack>\n    </Box>\n  );\n};\n\nexport default DownloadDataFrame;\n","// Load UI configuration. This includes UI-specific information that we cannot\n// get from the API.  The configuration is specified as YAML.  \"Why not JSON?\"\n// I hear you ask.  JSON is not a good configuration format because it does\n// not support *comments*.  Therefore, we parse the YAML into JSON here and\n// stash it in sessionStorage.\nimport yaml from \"js-yaml\";\n\nconst basename = process.env.PUBLIC_URL;\n\ninterface Column {\n  header: string;\n  field: string;\n  select_metadata: string;\n}\n\ninterface Spec {\n  spec: string;\n  columns: Column[];\n  default_columns: string[];\n}\n\ninterface Manifest {\n  manifest: string[];\n}\n\ninterface Config {\n  specs: Spec[];\n  structure_families: any;\n}\n\nconst fetchManifest = async (signal: AbortSignal): Promise<string[]> => {\n  // Fetch a specially-named file from the public static directory.\n  const response = await fetch(`${basename}/configuration_manifest.yml`, {\n    signal,\n  });\n  const text = await response.text();\n  const data = yaml.load(text) as Manifest;\n  return data.manifest;\n};\n\nconst fetchConfig = async (\n  path: string,\n  signal: AbortSignal\n): Promise<Config> => {\n  // FastAPI StaticFiles ensures that we cannot \"escape\" the directory here\n  // and serve arbitrary files from the filesystem.\n  const response = await fetch(`${basename}/${path}`, { signal });\n  const text = await response.text();\n  const data = yaml.load(text) as Config;\n  return data;\n};\n\nexport const loadConfig = async (signal: AbortSignal) => {\n  // Try loading config from sessionStorage.\n  // If not present, obtain it and cache it.\n  // This is a job for Redux once we adopt Redux.\n  let cachedConfig: string | null = sessionStorage.getItem(\"config\");\n  var config: string;\n  if (cachedConfig === null) {\n    // Config is not cached.\n    const manifest = await fetchManifest(signal);\n    const configs: Config[] = await Promise.all(\n      manifest.map((path: string) => {\n        return fetchConfig(path, signal);\n      })\n    );\n    const mergedConfig: Config = { specs: [], structure_families: {} };\n    configs.map((config, index) => {\n      (config.specs || []).map((spec: Spec) => {\n        mergedConfig.specs.push(spec);\n      });\n      for (const [key, value] of Object.entries(\n        config.structure_families || {}\n      )) {\n        mergedConfig.structure_families[key] = value;\n      }\n      console.log(`Loaded config ${manifest[index]}`);\n    });\n    sessionStorage.setItem(\"config\", JSON.stringify(mergedConfig));\n    return mergedConfig;\n  } else {\n    // Config is cached.\n    config = cachedConfig as string;\n    return JSON.parse(config);\n  }\n};\n"],"names":["props","partitions","Array","from","npartitions","keys","sx","my","id","labelId","value","label","onChange","event","setValue","target","map","partition","Download","useState","formats","setFormats","info","setInfo","React","anchorEl","setAnchorEl","useMemo","about","result","loadInfo","useEffect","controller","AbortController","loadConfig","signal","config","structure_families","structureFamily","loadFormats","abort","open","Boolean","undefined","variant","format","mimetype","spacing","direction","minWidth","fullWidth","find","setFormat","required","includes","display_name","title","component","href","link","name","extension","disabled","onClick","currentTarget","onClose","anchorOrigin","vertical","horizontal","transformOrigin","PaperProps","style","width","px","py","defaultValue","InputProps","readOnly","copy","handleToggle","currentIndex","columns","indexOf","newChecked","push","splice","setColumns","Stack","List","maxWidth","overflow","maxHeight","bgcolor","subheader","ListSubheader","heading","allColumns","ListItem","disablePadding","ListItemButton","role","dense","ListItemIcon","Checkbox","edge","checked","tabIndex","disableRipple","inputProps","ListItemText","primary","ButtonGroup","Button","macrostructure","setPartition","full","setFull","length","full_link","partition_link","replace","toString","join","field_params","column","concat","Box","FormGroup","FormControlLabel","control","fetchManifest","fetch","process","response","text","data","yaml","manifest","fetchConfig","path","cachedConfig","sessionStorage","getItem","Promise","all","configs","mergedConfig","specs","index","spec","Object","entries","key","console","log","setItem","JSON","stringify","parse"],"sourceRoot":""}