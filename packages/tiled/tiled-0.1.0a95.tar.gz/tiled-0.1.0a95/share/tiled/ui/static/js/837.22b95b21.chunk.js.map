{"version":3,"file":"static/js/837.22b95b21.chunk.js","mappings":"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","sources":["components/node-lazy-contents.tsx","components/overview-generic-node.tsx","config.ts"],"sourcesContent":["import {\n  DataGrid,\n  GridRowModel,\n  GridRowParams,\n  GridToolbarColumnsButton,\n  GridToolbarContainer,\n  GridToolbarDensitySelector,\n} from \"@mui/x-data-grid\";\nimport { useEffect, useState } from \"react\";\n\nimport Box from \"@mui/material/Box\";\nimport Container from \"@mui/material/Container\";\nimport { components } from \"../openapi_schemas\";\nimport { search } from \"../client\";\nimport { useNavigate } from \"react-router-dom\";\n\ninterface Column {\n  header: string;\n  field: string;\n  select_metadata: string;\n}\n\nfunction CustomToolbar() {\n  return (\n    <GridToolbarContainer>\n      <GridToolbarColumnsButton />\n      <GridToolbarDensitySelector />\n    </GridToolbarContainer>\n  );\n}\n\ninterface RowsState {\n  page: number;\n  pageSize: number;\n  rows: GridRowModel[];\n  loading: boolean;\n}\n\ninterface NodeLazyContentsProps {\n  segments: string[];\n  columns: Column[];\n  defaultColumns: string[];\n  specs: string[];\n}\n\nconst DEFAULT_PAGE_SIZE = 10;\n\nconst NodeLazyContents: React.FunctionComponent<NodeLazyContentsProps> = (\n  props\n) => {\n  let navigate = useNavigate();\n  const gridColumns = [\n    {\n      field: \"id\",\n      headerName: \"ID\",\n      flex: 1,\n      hide: !props.defaultColumns.includes(\"id\"),\n    },\n  ];\n  props.columns.map((column) =>\n    gridColumns.push({\n      field: column.field,\n      headerName: column.header,\n      flex: 1,\n      hide: !props.defaultColumns.includes(column.field),\n    })\n  );\n  const [rowsState, setRowsState] = useState<RowsState>({\n    page: 0,\n    pageSize: DEFAULT_PAGE_SIZE,\n    rows: [],\n    loading: false,\n  });\n  type IdsToAncestors = { [key: string]: string[] };\n  const [idsToAncestors, setIdsToAncestors] = useState<IdsToAncestors>({});\n  const [rowCount, setRowCount] = useState<number>(0);\n  useEffect(() => {\n    let active = true;\n\n    async function loadItems(): Promise<\n      components[\"schemas\"][\"Resource_NodeAttributes__dict__dict_\"][]\n    > {\n      var selectMetadata: string | null;\n      var fields: string[];\n      const controller = new AbortController();\n      if (props.columns.length === 0) {\n        // No configuration on which columns to show. Fetch only the ID.\n        fields = [];\n        selectMetadata = null;\n      } else {\n        fields = [\"metadata\"];\n        selectMetadata =\n          \"{\" +\n          props.columns\n            .map((column) => {\n              return `${column.field}:${column.select_metadata}`;\n            })\n            .join(\",\") +\n          \"}\";\n      }\n      var data = await search(\n        props.segments,\n        controller.signal,\n        fields,\n        selectMetadata,\n        rowsState.pageSize * rowsState.page,\n        rowsState.pageSize\n      );\n      setRowCount(data.meta!.count! as number);\n      const items = data.data;\n      return items!;\n    }\n\n    (async () => {\n      setRowsState((prev) => ({ ...prev, loading: true }));\n      const newItems = await loadItems();\n      var idsToAncestors: IdsToAncestors = {};\n      newItems.map(\n        (\n          item: components[\"schemas\"][\"Resource_NodeAttributes__dict__dict_\"]\n        ) => {\n          idsToAncestors[item.id as string] = item.attributes.ancestors;\n          return null;\n        }\n      );\n      const newRows = newItems.map(\n        (\n          item: components[\"schemas\"][\"Resource_NodeAttributes__dict__dict_\"]\n        ) => {\n          const row: { [key: string]: any } = {};\n          row.id = item.id;\n          props.columns.map((column) => {\n            row[column.field] = item.attributes!.metadata![column.field];\n            return null;\n          });\n          return row;\n        }\n      );\n\n      if (!active) {\n        return;\n      }\n\n      // TODO Synchronize these. (Clear rows first?)\n      setIdsToAncestors(idsToAncestors);\n      setRowsState((prev) => ({ ...prev, loading: false, rows: newRows }));\n    })();\n\n    return () => {\n      active = false;\n    };\n  }, [rowsState.page, rowsState.pageSize, props.columns, props.segments]);\n\n  return (\n    <Box sx={{ my: 4 }}>\n      <Container maxWidth=\"lg\">\n        <DataGrid\n          columns={gridColumns}\n          pagination\n          rowCount={rowCount}\n          {...rowsState}\n          paginationMode=\"server\"\n          rowsPerPageOptions={[10, 30, 100]}\n          onPageChange={(page) => setRowsState((prev) => ({ ...prev, page }))}\n          onPageSizeChange={(pageSize) => {\n            setRowsState((prev) => ({ ...prev, pageSize }));\n          }}\n          onRowClick={(params: GridRowParams) => {\n            navigate(\n              `/browse${idsToAncestors[params.id]\n                .map(function (ancestor: string) {\n                  return \"/\" + ancestor;\n                })\n                .join(\"\")}/${params.id}`\n            );\n          }}\n          components={{\n            Toolbar: CustomToolbar,\n          }}\n          disableColumnFilter\n          autoHeight\n        />\n      </Container>\n    </Box>\n  );\n};\n\nexport default NodeLazyContents;\n","import { Column, Spec } from \"./contents\";\nimport { useEffect, useState } from \"react\";\n\nimport Container from \"@mui/material/Container\";\nimport NodeLazyContents from \"./node-lazy-contents\";\nimport { Skeleton } from \"@mui/material\";\nimport Typography from \"@mui/material/Typography\";\nimport { loadConfig } from \"../config\";\n\ninterface IProps {\n  segments: string[];\n  item: any;\n}\n\nconst NodeOverview: React.FunctionComponent<IProps> = (props) => {\n  const [specs, setSpecs] = useState<any>();\n\n  useEffect(() => {\n    const controller = new AbortController();\n    async function loadSpecs() {\n      const config = await loadConfig(controller.signal);\n      const specs = config.specs;\n      setSpecs(specs);\n    }\n    loadSpecs();\n    return () => {\n      controller.abort();\n    };\n  }, []);\n  // Walk through the node's specs until we find one we recognize.\n  if (specs === undefined) {\n    return <Skeleton variant=\"rectangular\" />;\n  }\n  const spec = specs.find((spec: Spec) =>\n    props.item.data!.attributes!.specs.includes(spec.spec)\n  );\n  var columns: Column[];\n  var defaultColumns: string[];\n  if (spec === undefined) {\n    columns = [];\n    defaultColumns = [\"id\"];\n  } else {\n    columns = spec.columns;\n    defaultColumns = spec.default_columns;\n  }\n  return (\n    <Container maxWidth=\"lg\">\n      <Typography id=\"table-title\" variant=\"h6\" component=\"h2\">\n        Contents\n      </Typography>\n      <NodeLazyContents\n        segments={props.segments}\n        specs={props.item.data!.attributes!.specs!}\n        columns={columns}\n        defaultColumns={defaultColumns}\n      />\n    </Container>\n  );\n};\n\nexport default NodeOverview;\n","// Load UI configuration. This includes UI-specific information that we cannot\n// get from the API.  The configuration is specified as YAML.  \"Why not JSON?\"\n// I hear you ask.  JSON is not a good configuration format because it does\n// not support *comments*.  Therefore, we parse the YAML into JSON here and\n// stash it in sessionStorage.\nimport yaml from \"js-yaml\";\n\nconst basename = process.env.PUBLIC_URL;\n\ninterface Column {\n  header: string;\n  field: string;\n  select_metadata: string;\n}\n\ninterface Spec {\n  spec: string;\n  columns: Column[];\n  default_columns: string[];\n}\n\ninterface Manifest {\n  manifest: string[];\n}\n\ninterface Config {\n  specs: Spec[];\n  structure_families: any;\n}\n\nconst fetchManifest = async (signal: AbortSignal): Promise<string[]> => {\n  // Fetch a specially-named file from the public static directory.\n  const response = await fetch(`${basename}/configuration_manifest.yml`, {\n    signal,\n  });\n  const text = await response.text();\n  const data = yaml.load(text) as Manifest;\n  return data.manifest;\n};\n\nconst fetchConfig = async (\n  path: string,\n  signal: AbortSignal\n): Promise<Config> => {\n  // FastAPI StaticFiles ensures that we cannot \"escape\" the directory here\n  // and serve arbitrary files from the filesystem.\n  const response = await fetch(`${basename}/${path}`, { signal });\n  const text = await response.text();\n  const data = yaml.load(text) as Config;\n  return data;\n};\n\nexport const loadConfig = async (signal: AbortSignal) => {\n  // Try loading config from sessionStorage.\n  // If not present, obtain it and cache it.\n  // This is a job for Redux once we adopt Redux.\n  let cachedConfig: string | null = sessionStorage.getItem(\"config\");\n  var config: string;\n  if (cachedConfig === null) {\n    // Config is not cached.\n    const manifest = await fetchManifest(signal);\n    const configs: Config[] = await Promise.all(\n      manifest.map((path: string) => {\n        return fetchConfig(path, signal);\n      })\n    );\n    const mergedConfig: Config = { specs: [], structure_families: {} };\n    configs.map((config, index) => {\n      (config.specs || []).map((spec: Spec) => {\n        mergedConfig.specs.push(spec);\n      });\n      for (const [key, value] of Object.entries(\n        config.structure_families || {}\n      )) {\n        mergedConfig.structure_families[key] = value;\n      }\n      console.log(`Loaded config ${manifest[index]}`);\n    });\n    sessionStorage.setItem(\"config\", JSON.stringify(mergedConfig));\n    return mergedConfig;\n  } else {\n    // Config is cached.\n    config = cachedConfig as string;\n    return JSON.parse(config);\n  }\n};\n"],"names":["CustomToolbar","props","navigate","useNavigate","gridColumns","field","headerName","flex","hide","defaultColumns","includes","columns","map","column","push","header","useState","page","pageSize","rows","loading","rowsState","setRowsState","idsToAncestors","setIdsToAncestors","rowCount","setRowCount","useEffect","active","loadItems","controller","AbortController","length","fields","selectMetadata","select_metadata","join","search","segments","signal","data","meta","count","items","prev","newItems","item","id","attributes","ancestors","newRows","row","metadata","Box","sx","my","Container","maxWidth","pagination","paginationMode","rowsPerPageOptions","onPageChange","onPageSizeChange","onRowClick","params","ancestor","components","Toolbar","disableColumnFilter","autoHeight","specs","setSpecs","loadConfig","config","loadSpecs","abort","undefined","Skeleton","variant","spec","find","default_columns","Typography","component","fetchManifest","fetch","process","response","text","yaml","manifest","fetchConfig","path","cachedConfig","sessionStorage","getItem","Promise","all","configs","mergedConfig","structure_families","index","Object","entries","key","value","console","log","setItem","JSON","stringify","parse"],"sourceRoot":""}