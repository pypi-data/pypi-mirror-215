# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/api.ipynb.

# %% auto 0
__all__ = ['MaticaAPIClient']

# %% ../nbs/api.ipynb 3
import paramiko
import scp as scp2
import base64
import requests
import time

# %% ../nbs/api.ipynb 4
class MaticaAPIClient(object):
    @staticmethod
    def main(hostname, username, api_key, location_uuid, ssh_username, ssh_password, task_id, uploaded_file_path, transfer_type, transfer_accession, storage_username, storage_password, file_dir_path='/home/files'):
        client = MaticaAPIClient(hostname, username, api_key, location_uuid, ssh_username, ssh_password, task_id, storage_username, storage_password, file_dir_path=file_dir_path)
        client.upload(uploaded_file_path)
        directory = client.transfer(transfer_type, transfer_accession)

        transfer_UUID = client.approve_transfer(transfer_type, directory)

        sip_UUID = client.check_transfer_status(transfer_UUID)

        # ingest
        ingest_UUID = client.ingest(sip_UUID)

        url = client.get_aip_url(ingest_UUID)

        return url


    def __init__(self, hostname, username, api_key, location_uuid, ssh_username, ssh_password, task_id, storage_username, storage_password, file_dir_path='/home/files'):
        self.hostname = hostname
        self.username = username
        self.api_key = api_key
        self.location_uuid = location_uuid

        self.ssh_username = ssh_username
        self.ssh_password = ssh_password

        self.task_id = task_id

        self.file_dir_path = file_dir_path # f'/home/files'

        self.task_dir_path = f'{self.file_dir_path}/{self.task_id}/'

        self.headers = {'Authorization': f'ApiKey {username}:{api_key}'}

        self.endpoint = f"http://{hostname}:81/api"

        self.storage_username = storage_username
        self.storage_password = storage_password

        pass

    def upload(self, uploaded_file_path):
        task_dir_path = self.task_dir_path


        with paramiko.SSHClient() as ssh:
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            ssh.connect(self.hostname, port=22, username=self.ssh_username, password=self.ssh_password)

            ssh.exec_command(f"mkdir -p {task_dir_path}")

            with scp2.SCPClient(ssh.get_transport()) as scp:
                scp.put(f'{uploaded_file_path}', task_dir_path)

    def transfer(self, transfer_type, transfer_accession):
        task_dir_path = self.task_dir_path
        paths = [task_dir_path]
        row_ids = [""]

        # base64へのエンコード
        paths_encoded = []
        for path in paths:
            path_encoded = base64.b64encode(f"{self.location_uuid}:{path}".encode()).decode()
            paths_encoded.append(path_encoded)

        data = {
            "name": self.task_id,
            "type": transfer_type,
            "accession": transfer_accession,
            "paths[]": paths_encoded,
            "row_ids[]": row_ids
        }

        response = requests.post(f'{self.endpoint}/transfer/start_transfer/', headers=self.headers, data=data)

        # pass

        return response.json()["path"].split("/")[-2]
    
    def approve_transfer(self, transfer_type, directory):
        while 1:

            data = {
                "type": transfer_type,
                "directory": directory
            }

            response3 = requests.post(f'{self.endpoint}/transfer/approve/', headers=self.headers, data=data)

            if "uuid" in response3.json():
                break

            time.sleep(5)

        return response3.json()["uuid"]
    
    def check_transfer_status(self, transfer_UUID):
        while 1:

            response5 = requests.get(f'{self.endpoint}/transfer/status/{transfer_UUID}', headers=self.headers)

            if response5.json()["status"] != "PROCESSING":
                break

            time.sleep(5)

        return response5.json()["sip_uuid"]
    
    def ingest(self, sip_UUID):
        while 1:

            response4 = requests.get(f'{self.endpoint}/ingest/status/{sip_UUID}', headers=self.headers)

            if response4.json()["status"] != "PROCESSING":
                break

            time.sleep(5)

        return response4.json()["uuid"]
    
    def get_aip_url(self, ingest_UUID):
        endpoint2 = f"http://{self.hostname}:8001/api"
        url2 = f"{endpoint2}/v2/file/{ingest_UUID}/download/"

        # response6 = requests.get(url2, auth=HTTPBasicAuth(self.storage_username, self.storage_password))

        '''
        output_path = "/Users/nakamura/git/kim/matica_tools/demo/test.7z"
        with open(output_path ,mode='wb') as f: # wb でバイト型を書き込める
            f.write(response6.content)
        '''

        # return response6.content
        return url2
