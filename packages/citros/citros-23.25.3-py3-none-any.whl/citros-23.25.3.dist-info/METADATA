Metadata-Version: 2.1
Name: citros
Version: 23.25.3
Summary: A cli entrypoint for the citros system.
Home-page: http://pypi.python.org/pypi/citros_cli/
Author: vovacooper
Author-email: vova@lulav.space
License: LICENSE.txt
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: ansicolors (==1.1.8)
Requires-Dist: gql (==3.4.0)
Requires-Dist: graphql-core (==3.2.3)
Requires-Dist: pymongo (==4.3.3)
Requires-Dist: requests (==2.28.1)
Requires-Dist: rosdep (==0.22.1)
Requires-Dist: python-decouple
Requires-Dist: requests-toolbelt
Requires-Dist: soupsieve
Requires-Dist: bs4
Requires-Dist: zipp
Requires-Dist: pyjwt
Requires-Dist: psycopg2-binary
Requires-Dist: urllib3 (>=1.26)
Requires-Dist: InquirerPy
Requires-Dist: faker

```python
# ==============================================
#   ██████╗██╗████████╗██████╗  ██████╗ ███████╗
#  ██╔════╝██║╚══██╔══╝██╔══██╗██╔═══██╗██╔════╝
#  ██║     ██║   ██║   ██████╔╝██║   ██║███████╗
#  ██║     ██║   ██║   ██╔══██╗██║   ██║╚════██║
#  ╚██████╗██║   ██║   ██║  ██║╚██████╔╝███████║
#   ╚═════╝╚═╝   ╚═╝   ╚═╝  ╚═╝ ╚═════╝ ╚══════╝                                        
# ==============================================
```
# CITROS CLI

[![Publish CITROS_CLI to PyPI / GitHub](https://github.com/lulav/citros_cli/actions/workflows/release_to_pypi.yaml/badge.svg)](https://github.com/lulav/citros_cli/actions/workflows/release_to_pypi.yaml)

# Description

This repository is a python package that implements the CITROS CLI API.
It is run by the user inside the ROS project folder. 

# Prerequisites

- [vscode](https://code.visualstudio.com/download)
- [Docker](https://www.docker.com/)
- [Python3](https://www.python.org/downloads/)

# Installation

1. clone the repo:
    
        git clone git@github.com:lulav/citros_cli.git

2. Within the cloned `citros_cli` folder, open VSCode:
    
        code .

    and reopen the folder inside a Dev Container.

3. Install the package from the current directory, with soft links to dev environment 

        python3 -m pip install -e .

    (recommended during development),

    or 

    Install the package from the current directory, directly to a global bin folder 

        python3 -m pip install .
    
    (should be done before uploading to PyPI, to make sure the installation is working properly).

4. Env

| ENV | Description | used in |
| --- | --- | --- |
| `CITROS_DOMAIN` | the main domain, default is `citros.io` | all packages |
| `CITROS_DATA_HOST` | host of the playground PGDB, default comes from simulation job env (citros_worker) and is: `shared-playground-postgresql.ns-citros-shared`. used for uploading BAG. | citros_bag |
| `CITROS_DATA_PORT` | the port of PGDB, default `5432` | citros_bag |
| `CITROS_DATA_DATABASE` | the database to access inside PGDB. default comes from simulation job env (citros_worker) and is: `domain_prefix`. used for uploading BAG. | citros_bag |
| `CITROS_DATA_USERNAME` | the username to access PGDB, default `citros_anonymous`. the username is the username from citros.  | citros_bag |
| `CITROS_DATA_PASSWORD` | the password to access PGDB, default `citros_anonymous`. the password is the id of the user in `citros.user` table.  | citros_bag |

# CLI API commands:

## login
Login to CITROS.

After entering the command, you will be prompted for your email (the username) and password.

example:

    ros@shalev-Inspiron-15-5510:/workspaces/cannon$ citros login
    email: shalev@lulav.space
    Password: 
    User logged in.
    [2023-05-11 08:12:18,065] [citros.citros-None-None.login:268] [INFO]: Authenticated!

## authenticate
Authenticate yourself to CITROS when a login is not possible, e.g. when running in the cloud or performing automated tests.

First, in order to obtain a valid authentication key, login to [citros](http://citros.io/) and click the `Add Project` button in the top right corner:
![add_proj](img/add_proj.png "add project")

Copy the line `citros authenticate <your key>`:
![auth_key](img/auth_key.png "authentication key")

 and paste it in the command line.

example:

    ros@shalev-Inspiron-15-5510:/workspaces/cannon$ citros authenticate eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiY2l0cm9zX2FkbWluIiwidXNlcl9pZCI6IjE5NzhjODU4LTRjYmEtNDYyNS04NjdlLTUwMjM2ZmRjNmQ5MSIsInVzZXJfbmFtZSI6InNoYWxldiIsImNpdHJvc19yb2xlIjoidXNlciIsIm9yZ2FuaXphdGlvbl9pZCI6ImU5MTVkNjM5LTYzNzItNDVlNC04NTVkLWE4YzliN2Q2YWIwMiIsIm9yZ2FuaXphdGlvbl90eXBlIjoiTUFOQUdFIiwiZG9tYWluX3ByZWZpeCI6Imx1bGF2IiwiZXhwIjoxNjgzNzA1OTUzLCJpYXQiOjE2ODM2MTk1NTMsImF1ZCI6InBvc3RncmFwaGlsZSIsImlzcyI6InBvc3RncmFwaGlsZSJ9.hKgx2YlDMhH23pGCZGh3YqaaX3wTikjBBypIr_dM8tg
    Authenticated!
    [2023-05-11 08:57:11,000] [citros.citros-None-None.authenticate_with_key:219] [INFO]: Authenticated!
Note: the key is valid for two days, after which a new key needs to be generated.  

## logout
Logout of CITROS.

example:

    ros@shalev-Inspiron-15-5510:/workspaces/cannon$ citros logout
    User logged out.
## sync
Sync the ros project to citros.

This command will parse your ROS2 project, extract the names of all the packages, 
nodes, parameters and launch files (and some other metadata), 
assign each of them a UID and upload them to the citros database.

example:
    
    ros@shalev-Inspiron-15-5510:/workspaces/mass_spring_dumper$ citros sync
    -------------------sync_project-------------------
    ...
    ----------------------DONE------------------------

If there were no changes since the last sync, the sync is unnecessary:

    ros@shalev-Inspiron-15-5510:/workspaces/mass_spring_dumper$ citros sync
    project already synched.

If this was your first time running sync on this project, you can open your favorite browser and navigate to [citros.io](citros.io) and log in, and under the project list you'll see a new item for your project has been added to the list:
![project list](img/proj_list.png "project list")


### parameters:
parameter|description
|--|--|
|`-dir` <folder_name> | The working directory of the project. Defaults to ".".|
|`-name` <proj_name> | The name of the project. Defaults to the last folder in the path of *dir*|
|`-w`, `-ws` <workspace_name> | The name of a workspace inside the project directory. May be used multiple times for multiple workspaces. Defaults to "" (namely, no workspace, package folders are directly under the project folder. Default is used whether this parameter is specified or not - additional namespaces are added, but do not overwrite it). |

## params
experimental.

generate parameters for the project
## run_simulation
Create a new batch of simulation runs for your project and run it locally.

### prerequisites:
The project has been built, sourced and `sync`ed with citros, e.g.:
    
    colcon build
    source install/local_setup.bash
    citros sync

In the citros gui, navigate to your project by clicking the three vertical dots on the right side of of your project's row in the project list and select `navigate`: 
![nav_proj](img/nav_proj.png "navigate to project") 

which will take you to the project's Details page. 

There, click the `Simulation Setup` tab:
![sim_setup](img/sim_setup.png "simulation setup")

and click on `new`.

Fill in any relevant details for the new simulation and save:
![save_new_sim](img/save_new_sim.png "save new simulation")

Now click on `Run Simulation Locally`:
![run_sim_loc](img/run_sim_loc.png "run simulation locally")

and in the pop-up that comes up, copy the simulation id that was generated:
![copy_sim_id](img/copy_sim_id.png "copy the simulation id")

and now, finally, in the command-line, run

    citros run_simulation <sim id> <repetitions>
where `<sim_id>` is the id you just copied, and `<repetitions>` is number of simulation runs that will run. Example:
    
    citros run_simulation cf1b4663-a6e3-49bd-96e5-bc47cb5d5326 1
    ...
    - - Finished simulation sid = [0] with return code [1].
    - Finished [a7b188dd-74bb-4de9-b386-9a30489652cb] batch.

## run
Run a previously created batch locally. This command is useful when you'd like to locally rerun a batch that was already run (either locally or on the cluster).

After you've logged into [citros.io](citros.io), click the `Simulation Runs` tab:
![sim_runs](img/sim_runs.png "Simulation Runs")  

and on the list item corresponding to the batch you'd like to run, click the three vertical dots on the right and then click navigate on the small context menu that opens. This will take you to the list of simulation runs for the batch you selected:
![batch_runs](img/batch_runs.png "Batch Runs")

under the `Simulation Runs` heading, you are presented with some metadata for this batch in the following format:

    Dashboard - ProjectList - <project_name> - <simulation_id> - <batch_id>

copy the the batch id, and in the command-line:

    citros run <batch_id> <sim_run_id>

where `<sim_run_id>` is the (zero-based) run index (not to be confused with `simulation_id`). If it is not specified, the entire batch is executed. Example:

    citros run bd175a93-4234-4244-942d-0b2a982c465f 0

## upload_bag
experimental.

upload bag to citros.
## stress
experimental.

stress test the system.
## docker-login
login to docker-hub
## docker
Builds the project.
