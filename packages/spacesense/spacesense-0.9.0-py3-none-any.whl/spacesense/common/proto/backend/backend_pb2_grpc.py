# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import spacesense.common.proto.backend.backend_pb2 as backend__pb2


class JobStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamJobResults = channel.unary_stream(
            "/Job/StreamJobResults",
            request_serializer=backend__pb2.StreamJobResultsRequest.SerializeToString,
            response_deserializer=backend__pb2.StreamJobResultsResponse.FromString,
        )
        self.GetJobReport = channel.unary_unary(
            "/Job/GetJobReport",
            request_serializer=backend__pb2.GetJobReportRequest.SerializeToString,
            response_deserializer=backend__pb2.GetJobReportResponse.FromString,
        )
        self.StartJob = channel.unary_unary(
            "/Job/StartJob",
            request_serializer=backend__pb2.StartJobRequest.SerializeToString,
            response_deserializer=backend__pb2.StartJobResponse.FromString,
        )
        self.RetryJob = channel.unary_unary(
            "/Job/RetryJob",
            request_serializer=backend__pb2.RetryJobRequest.SerializeToString,
            response_deserializer=backend__pb2.RetryJobResponse.FromString,
        )
        self.ListJobs = channel.unary_unary(
            "/Job/ListJobs",
            request_serializer=backend__pb2.ListJobsRequest.SerializeToString,
            response_deserializer=backend__pb2.ListJobsResponse.FromString,
        )
        self.CancelJob = channel.unary_unary(
            "/Job/CancelJob",
            request_serializer=backend__pb2.CancelJobRequest.SerializeToString,
            response_deserializer=backend__pb2.CancelJobResponse.FromString,
        )


class JobServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamJobResults(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetJobReport(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def StartJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RetryJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListJobs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CancelJob(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_JobServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "StreamJobResults": grpc.unary_stream_rpc_method_handler(
            servicer.StreamJobResults,
            request_deserializer=backend__pb2.StreamJobResultsRequest.FromString,
            response_serializer=backend__pb2.StreamJobResultsResponse.SerializeToString,
        ),
        "GetJobReport": grpc.unary_unary_rpc_method_handler(
            servicer.GetJobReport,
            request_deserializer=backend__pb2.GetJobReportRequest.FromString,
            response_serializer=backend__pb2.GetJobReportResponse.SerializeToString,
        ),
        "StartJob": grpc.unary_unary_rpc_method_handler(
            servicer.StartJob,
            request_deserializer=backend__pb2.StartJobRequest.FromString,
            response_serializer=backend__pb2.StartJobResponse.SerializeToString,
        ),
        "RetryJob": grpc.unary_unary_rpc_method_handler(
            servicer.RetryJob,
            request_deserializer=backend__pb2.RetryJobRequest.FromString,
            response_serializer=backend__pb2.RetryJobResponse.SerializeToString,
        ),
        "ListJobs": grpc.unary_unary_rpc_method_handler(
            servicer.ListJobs,
            request_deserializer=backend__pb2.ListJobsRequest.FromString,
            response_serializer=backend__pb2.ListJobsResponse.SerializeToString,
        ),
        "CancelJob": grpc.unary_unary_rpc_method_handler(
            servicer.CancelJob,
            request_deserializer=backend__pb2.CancelJobRequest.FromString,
            response_serializer=backend__pb2.CancelJobResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("Job", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Job(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamJobResults(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/Job/StreamJobResults",
            backend__pb2.StreamJobResultsRequest.SerializeToString,
            backend__pb2.StreamJobResultsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetJobReport(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Job/GetJobReport",
            backend__pb2.GetJobReportRequest.SerializeToString,
            backend__pb2.GetJobReportResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def StartJob(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Job/StartJob",
            backend__pb2.StartJobRequest.SerializeToString,
            backend__pb2.StartJobResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def RetryJob(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Job/RetryJob",
            backend__pb2.RetryJobRequest.SerializeToString,
            backend__pb2.RetryJobResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListJobs(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Job/ListJobs",
            backend__pb2.ListJobsRequest.SerializeToString,
            backend__pb2.ListJobsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def CancelJob(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Job/CancelJob",
            backend__pb2.CancelJobRequest.SerializeToString,
            backend__pb2.CancelJobResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )


class CoreStub(object):
    """backend service definition."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Fuse = channel.unary_unary(
            "/Core/Fuse",
            request_serializer=backend__pb2.FuseRequest.SerializeToString,
            response_deserializer=backend__pb2.FuseReply.FromString,
        )
        self.GetS1Search = channel.unary_unary(
            "/Core/GetS1Search",
            request_serializer=backend__pb2.GetS1SearchRequest.SerializeToString,
            response_deserializer=backend__pb2.GetS1SearchReply.FromString,
        )
        self.GetS2Search = channel.unary_unary(
            "/Core/GetS2Search",
            request_serializer=backend__pb2.GetS2SearchRequest.SerializeToString,
            response_deserializer=backend__pb2.GetS2SearchReply.FromString,
        )
        self.GetLandsatSearch = channel.unary_unary(
            "/Core/GetLandsatSearch",
            request_serializer=backend__pb2.GetLandsatSearchRequest.SerializeToString,
            response_deserializer=backend__pb2.GetLandsatSearchReply.FromString,
        )
        self.GetWeatherSearch = channel.unary_unary(
            "/Core/GetWeatherSearch",
            request_serializer=backend__pb2.GetWeatherSearchRequest.SerializeToString,
            response_deserializer=backend__pb2.GetWeatherSearchReply.FromString,
        )


class CoreServicer(object):
    """backend service definition."""

    def Fuse(self, request, context):
        """backend service definition."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetS1Search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetS2Search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetLandsatSearch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetWeatherSearch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_CoreServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "Fuse": grpc.unary_unary_rpc_method_handler(
            servicer.Fuse,
            request_deserializer=backend__pb2.FuseRequest.FromString,
            response_serializer=backend__pb2.FuseReply.SerializeToString,
        ),
        "GetS1Search": grpc.unary_unary_rpc_method_handler(
            servicer.GetS1Search,
            request_deserializer=backend__pb2.GetS1SearchRequest.FromString,
            response_serializer=backend__pb2.GetS1SearchReply.SerializeToString,
        ),
        "GetS2Search": grpc.unary_unary_rpc_method_handler(
            servicer.GetS2Search,
            request_deserializer=backend__pb2.GetS2SearchRequest.FromString,
            response_serializer=backend__pb2.GetS2SearchReply.SerializeToString,
        ),
        "GetLandsatSearch": grpc.unary_unary_rpc_method_handler(
            servicer.GetLandsatSearch,
            request_deserializer=backend__pb2.GetLandsatSearchRequest.FromString,
            response_serializer=backend__pb2.GetLandsatSearchReply.SerializeToString,
        ),
        "GetWeatherSearch": grpc.unary_unary_rpc_method_handler(
            servicer.GetWeatherSearch,
            request_deserializer=backend__pb2.GetWeatherSearchRequest.FromString,
            response_serializer=backend__pb2.GetWeatherSearchReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("Core", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Core(object):
    """backend service definition."""

    @staticmethod
    def Fuse(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Core/Fuse",
            backend__pb2.FuseRequest.SerializeToString,
            backend__pb2.FuseReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetS1Search(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Core/GetS1Search",
            backend__pb2.GetS1SearchRequest.SerializeToString,
            backend__pb2.GetS1SearchReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetS2Search(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Core/GetS2Search",
            backend__pb2.GetS2SearchRequest.SerializeToString,
            backend__pb2.GetS2SearchReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetLandsatSearch(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Core/GetLandsatSearch",
            backend__pb2.GetLandsatSearchRequest.SerializeToString,
            backend__pb2.GetLandsatSearchReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetWeatherSearch(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Core/GetWeatherSearch",
            backend__pb2.GetWeatherSearchRequest.SerializeToString,
            backend__pb2.GetWeatherSearchReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
