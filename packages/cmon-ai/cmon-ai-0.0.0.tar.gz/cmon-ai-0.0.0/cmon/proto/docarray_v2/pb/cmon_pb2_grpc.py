# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from ... import serializer as cmon__pb2


class CmonDataRequestRPCStub(object):
    """*
    cmon gRPC service for DataRequests.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.process_data = channel.unary_unary(
                '/cmon.CmonDataRequestRPC/process_data',
                request_serializer=cmon__pb2.DataRequestListProto.SerializeToString,
                response_deserializer=cmon__pb2.DataRequestProto.FromString,
                )


class CmonDataRequestRPCServicer(object):
    """*
    cmon gRPC service for DataRequests.
    """

    def process_data(self, request, context):
        """Used for passing DataRequests to the Executors
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CmonDataRequestRPCServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'process_data': grpc.unary_unary_rpc_method_handler(
                    servicer.process_data,
                    request_deserializer=cmon__pb2.DataRequestListProto.FromString,
                    response_serializer=cmon__pb2.DataRequestProto.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cmon.CmonDataRequestRPC', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CmonDataRequestRPC(object):
    """*
    cmon gRPC service for DataRequests.
    """

    @staticmethod
    def process_data(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cmon.CmonDataRequestRPC/process_data',
            cmon__pb2.DataRequestListProto.SerializeToString,
            cmon__pb2.DataRequestProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CmonSingleDataRequestRPCStub(object):
    """*
    cmon gRPC service for DataRequests.
    This is used to send requests to Executors when a list of requests is not needed
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.process_single_data = channel.unary_unary(
                '/cmon.CmonSingleDataRequestRPC/process_single_data',
                request_serializer=cmon__pb2.DataRequestProto.SerializeToString,
                response_deserializer=cmon__pb2.DataRequestProto.FromString,
                )


class CmonSingleDataRequestRPCServicer(object):
    """*
    cmon gRPC service for DataRequests.
    This is used to send requests to Executors when a list of requests is not needed
    """

    def process_single_data(self, request, context):
        """Used for passing DataRequests to the Executors
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CmonSingleDataRequestRPCServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'process_single_data': grpc.unary_unary_rpc_method_handler(
                    servicer.process_single_data,
                    request_deserializer=cmon__pb2.DataRequestProto.FromString,
                    response_serializer=cmon__pb2.DataRequestProto.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cmon.CmonSingleDataRequestRPC', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CmonSingleDataRequestRPC(object):
    """*
    cmon gRPC service for DataRequests.
    This is used to send requests to Executors when a list of requests is not needed
    """

    @staticmethod
    def process_single_data(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cmon.CmonSingleDataRequestRPC/process_single_data',
            cmon__pb2.DataRequestProto.SerializeToString,
            cmon__pb2.DataRequestProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CmonRPCStub(object):
    """*
    cmon streaming gRPC service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Call = channel.stream_stream(
                '/cmon.CmonRPC/Call',
                request_serializer=cmon__pb2.DataRequestProto.SerializeToString,
                response_deserializer=cmon__pb2.DataRequestProto.FromString,
                )


class CmonRPCServicer(object):
    """*
    cmon streaming gRPC service.
    """

    def Call(self, request_iterator, context):
        """Pass in a Request and a filled Request with matches will be returned.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CmonRPCServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Call': grpc.stream_stream_rpc_method_handler(
                    servicer.Call,
                    request_deserializer=cmon__pb2.DataRequestProto.FromString,
                    response_serializer=cmon__pb2.DataRequestProto.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cmon.CmonRPC', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CmonRPC(object):
    """*
    cmon streaming gRPC service.
    """

    @staticmethod
    def Call(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/cmon.CmonRPC/Call',
            cmon__pb2.DataRequestProto.SerializeToString,
            cmon__pb2.DataRequestProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CmonDiscoverEndpointsRPCStub(object):
    """*
    cmon gRPC service to expose Endpoints from Executors.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.endpoint_discovery = channel.unary_unary(
                '/cmon.CmonDiscoverEndpointsRPC/endpoint_discovery',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=cmon__pb2.EndpointsProto.FromString,
                )


class CmonDiscoverEndpointsRPCServicer(object):
    """*
    cmon gRPC service to expose Endpoints from Executors.
    """

    def endpoint_discovery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CmonDiscoverEndpointsRPCServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'endpoint_discovery': grpc.unary_unary_rpc_method_handler(
                    servicer.endpoint_discovery,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=cmon__pb2.EndpointsProto.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cmon.CmonDiscoverEndpointsRPC', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CmonDiscoverEndpointsRPC(object):
    """*
    cmon gRPC service to expose Endpoints from Executors.
    """

    @staticmethod
    def endpoint_discovery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cmon.CmonDiscoverEndpointsRPC/endpoint_discovery',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            cmon__pb2.EndpointsProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CmonGatewayDryRunRPCStub(object):
    """*
    cmon gRPC service to expose Endpoints from Executors.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.dry_run = channel.unary_unary(
                '/cmon.CmonGatewayDryRunRPC/dry_run',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=cmon__pb2.StatusProto.FromString,
                )


class CmonGatewayDryRunRPCServicer(object):
    """*
    cmon gRPC service to expose Endpoints from Executors.
    """

    def dry_run(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CmonGatewayDryRunRPCServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'dry_run': grpc.unary_unary_rpc_method_handler(
                    servicer.dry_run,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=cmon__pb2.StatusProto.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cmon.CmonGatewayDryRunRPC', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CmonGatewayDryRunRPC(object):
    """*
    cmon gRPC service to expose Endpoints from Executors.
    """

    @staticmethod
    def dry_run(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cmon.CmonGatewayDryRunRPC/dry_run',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            cmon__pb2.StatusProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CmonInfoRPCStub(object):
    """*
    cmon gRPC service to expose information about running cmon version and environment.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self._status = channel.unary_unary(
                '/cmon.CmonInfoRPC/_status',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=cmon__pb2.CmonInfoProto.FromString,
                )


class CmonInfoRPCServicer(object):
    """*
    cmon gRPC service to expose information about running cmon version and environment.
    """

    def _status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CmonInfoRPCServicer_to_server(servicer, server):
    rpc_method_handlers = {
            '_status': grpc.unary_unary_rpc_method_handler(
                    servicer._status,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=cmon__pb2.CmonInfoProto.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cmon.CmonInfoRPC', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CmonInfoRPC(object):
    """*
    cmon gRPC service to expose information about running cmon version and environment.
    """

    @staticmethod
    def _status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cmon.CmonInfoRPC/_status',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            cmon__pb2.CmonInfoProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CmonExecutorSnapshotStub(object):
    """*
    cmon gRPC service to trigger a snapshot at the Executor Runtime.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.snapshot = channel.unary_unary(
                '/cmon.CmonExecutorSnapshot/snapshot',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=cmon__pb2.SnapshotStatusProto.FromString,
                )


class CmonExecutorSnapshotServicer(object):
    """*
    cmon gRPC service to trigger a snapshot at the Executor Runtime.
    """

    def snapshot(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CmonExecutorSnapshotServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'snapshot': grpc.unary_unary_rpc_method_handler(
                    servicer.snapshot,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=cmon__pb2.SnapshotStatusProto.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cmon.CmonExecutorSnapshot', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CmonExecutorSnapshot(object):
    """*
    cmon gRPC service to trigger a snapshot at the Executor Runtime.
    """

    @staticmethod
    def snapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cmon.CmonExecutorSnapshot/snapshot',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            cmon__pb2.SnapshotStatusProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CmonExecutorSnapshotProgressStub(object):
    """*
    cmon gRPC service to trigger a snapshot at the Executor Runtime.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.snapshot_status = channel.unary_unary(
                '/cmon.CmonExecutorSnapshotProgress/snapshot_status',
                request_serializer=cmon__pb2.SnapshotId.SerializeToString,
                response_deserializer=cmon__pb2.SnapshotStatusProto.FromString,
                )


class CmonExecutorSnapshotProgressServicer(object):
    """*
    cmon gRPC service to trigger a snapshot at the Executor Runtime.
    """

    def snapshot_status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CmonExecutorSnapshotProgressServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'snapshot_status': grpc.unary_unary_rpc_method_handler(
                    servicer.snapshot_status,
                    request_deserializer=cmon__pb2.SnapshotId.FromString,
                    response_serializer=cmon__pb2.SnapshotStatusProto.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cmon.CmonExecutorSnapshotProgress', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CmonExecutorSnapshotProgress(object):
    """*
    cmon gRPC service to trigger a snapshot at the Executor Runtime.
    """

    @staticmethod
    def snapshot_status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cmon.CmonExecutorSnapshotProgress/snapshot_status',
            cmon__pb2.SnapshotId.SerializeToString,
            cmon__pb2.SnapshotStatusProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CmonExecutorRestoreStub(object):
    """*
    cmon gRPC service to trigger a restore at the Executor Runtime.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.restore = channel.unary_unary(
                '/cmon.CmonExecutorRestore/restore',
                request_serializer=cmon__pb2.RestoreSnapshotCommand.SerializeToString,
                response_deserializer=cmon__pb2.RestoreSnapshotStatusProto.FromString,
                )


class CmonExecutorRestoreServicer(object):
    """*
    cmon gRPC service to trigger a restore at the Executor Runtime.
    """

    def restore(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CmonExecutorRestoreServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'restore': grpc.unary_unary_rpc_method_handler(
                    servicer.restore,
                    request_deserializer=cmon__pb2.RestoreSnapshotCommand.FromString,
                    response_serializer=cmon__pb2.RestoreSnapshotStatusProto.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cmon.CmonExecutorRestore', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CmonExecutorRestore(object):
    """*
    cmon gRPC service to trigger a restore at the Executor Runtime.
    """

    @staticmethod
    def restore(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cmon.CmonExecutorRestore/restore',
            cmon__pb2.RestoreSnapshotCommand.SerializeToString,
            cmon__pb2.RestoreSnapshotStatusProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CmonExecutorRestoreProgressStub(object):
    """*
    cmon gRPC service to trigger a snapshot at the Executor Runtime.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.restore_status = channel.unary_unary(
                '/cmon.CmonExecutorRestoreProgress/restore_status',
                request_serializer=cmon__pb2.RestoreId.SerializeToString,
                response_deserializer=cmon__pb2.RestoreSnapshotStatusProto.FromString,
                )


class CmonExecutorRestoreProgressServicer(object):
    """*
    cmon gRPC service to trigger a snapshot at the Executor Runtime.
    """

    def restore_status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CmonExecutorRestoreProgressServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'restore_status': grpc.unary_unary_rpc_method_handler(
                    servicer.restore_status,
                    request_deserializer=cmon__pb2.RestoreId.FromString,
                    response_serializer=cmon__pb2.RestoreSnapshotStatusProto.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cmon.CmonExecutorRestoreProgress', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CmonExecutorRestoreProgress(object):
    """*
    cmon gRPC service to trigger a snapshot at the Executor Runtime.
    """

    @staticmethod
    def restore_status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cmon.CmonExecutorRestoreProgress/restore_status',
            cmon__pb2.RestoreId.SerializeToString,
            cmon__pb2.RestoreSnapshotStatusProto.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
