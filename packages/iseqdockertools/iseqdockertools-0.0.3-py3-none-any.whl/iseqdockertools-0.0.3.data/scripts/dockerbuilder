#!/bin/bash
set -e 

function dockerbuildhelp() {
  printf "  \n"
  printf "  dockerbuilder\n"
  printf "  ************\n"
  printf "  \n"
  printf "  Info:\n"
  printf "  -----\n"
  printf "    Author(s):\n"
  printf "      + Marcin Piechota, <piechota@intelliseq.pl>, https://gitlab.com/marpiech\n"
  printf "      + Olaf Tomaszewski, <olaf.tomaszewski@intelliseq.pl>, https://gitlab.com/olaf.tomaszewski\n"
  printf "    Copyright: Copyright 2020 Intelliseq\n"
  printf "    License: All rights reserved\n"
  printf "  \n"
  printf "  Description:\n"
  printf "  ------------\n"
  printf "  \n"
  printf "  Build and push docker images for Dockerfiles in this repository. Pushing can be disabled.\n"
  printf "  The version can be automatically incremented. It is compared with the version existing in docker hub.\n"
  printf "  \n"
  printf "      -h|--help                      print help\n"
  printf "      -d|--dockerfile                path to dockerfile\n"
  printf "      -q|--quiet                     print 'docker build' and 'docker push' logs\n"
  printf "      -p|--nopush                    do not push docker image(s) to repository\n"
  printf "      -n|--nocache                   do not use cache when building the docker image(s)\n"
  printf "      -c|--chromosome                build separate images for all chromosomes\n"
  printf "      -v|--versions                  provide custom path to docker-versions.json\n"
  printf "      -i|--ignore-versions           ignore docker-versions.json\n"
  printf "      -I|--ignore-name-version       ignore version number from image name (for example # name tool-1.15b version won't be updated to the newest found (tool-1.18c) in docker-versions.json)\n"
  printf "      -f|--forcepush                 push image even if exists\n"
  printf "      -k|--context                   set current directory as context\n"
  printf "  \n"
}

export -f dockerbuildhelp

exec 5> /dev/stdout #VERBOSE
export REPOSITORY="intelliseqngs/"
export CHROMOSOME_LIST=("")

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -h|--help)
    dockerbuildhelp
    exit 0
    shift # past argument
    ;;
    -d|--dockerfile)
    export TARGET=$(pwd)"/"$2
    shift # past argument
    shift # past value
    ;;
    -q|--quiet)
    exec 5> /dev/null
    shift # past argument
    ;;
    -p|--nopush)
    export NOPUSH=TRUE
    shift # past argument
    ;;
    -n|--nocache)
    export NOCACHE="--no-cache"
    shift # past argument
    ;;
    -c|--chromosome)
    export CHROMOSOME=TRUE
    export CHROMOSOME_LIST="chr1 chr2 chr3 chr4 chr5 chr6 chr7 chr8 chr9 chr10 chr11 chr12 chr13 chr14 chr15 chr16 chr17 chr18 chr19 chr20 chr21 chr22 chrX chrY-and-the-rest"
    shift # past argument
    ;;
    -v|--versions)
    export DOCKER_VERSIONS_FILE=$2
    shift # past argument
    ;;
    -i|--ignore-versions)
    export IGNORE_VERSIONS_FILE=TRUE
    shift # past argument
    ;;
    -I|--ignore-name-version)
    export IGNORE_NAME_VERSION=TRUE
    shift # past argument
    ;;
    -f|--forcepush)
    export FORCEPUSH=TRUE
    shift # past argument
    ;;
    -k|--context)
    export CONTEXT=$2
    shift
    shift # past argument
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done

set -- "${POSITIONAL[@]}" # restore positional parameters

SOURCE="${BASH_SOURCE[0]}"

function getname() {
    #printf "=== getname\n"
    echo $(cat $TARGET | grep "name:" | head -1 | sed 's/\r//g' | sed 's/^[[:space:]]*[#]*[[:space:]]*name:[[:space:]]*//')
}
export -f getname

function getversion() {
    #printf "=== getversion\n"
    current_ver=$(cat $TARGET | grep "version:" | head -1 | sed 's/\r//g' | sed 's/^[[:space:]]*[#]*[[:space:]]*version:[[:space:]]*//')
    echo $current_ver
}
export -f getversion

function getnewversion() {
    new_ver=''

    while true; do
        read -p "Press:
        1 to increment the major version (X+1.0.0)
        2 to increment the minor version (X.Y+1.0)
        3 to increment the patch version (X.Y.Z+1)
        n to exit the process
        Your choice:" choice

        case $choice in 
          1 ) 
            new_ver=$(echo ${TO_SET_DOCKERFILE_VERSION} | awk -F '.' '{print $1+1"."0"."0'})
            break;;
          2 )
            new_ver=$(echo ${TO_SET_DOCKERFILE_VERSION} | awk -F '.' '{print $1"."$2+1"."0'})
            break;;
          3 )
            new_ver=$(echo ${TO_SET_DOCKERFILE_VERSION} | awk -F '.' '{print $1"."$2"."$3+1'})
            break;;
          [nN] ) echo exiting...;
            exit 1;;
          * ) echo invalid response;;
        esac

      done
    
    echo $new_ver
}
export -f getnewversion

function gettag() {
    #printf "=== gettag\n"
    echo $REPOSITORY$(getname)":"${TO_SET_DOCKERFILE_VERSION}
}
export -f gettag

function istargetdefined() {
  if [ -z $TARGET ]
  then
    printf "\n  ERROR: no target provided\n"
    dockerbuildhelp
    exit 1
  else
    printf "=== Building $TARGET\n"
  fi
}
export -f istargetdefined

function dockerfileexists() {
  if [ -f "$TARGET" ]
  then
    printf "=== Docker file $TARGET exists\n"
  else
    printf "\n  ERROR: Docker file $TARGET does not exist\n"
    exit 1
  fi
}
export -f dockerfileexists

function getjsoncontent() {
  json_content=''
  if [ -f "${DOCKER_VERSIONS_FILE}" ]
  then
    echo $(jq -c . ${DOCKER_VERSIONS_FILE})
  elif [ -f "${PWD}/src/main/resources/docker-versions.json" ]
  then
    echo $(jq -c . ${PWD}/src/main/resources/docker-versions.json)
  fi
}
export -f getjsoncontent

function getdockerversionsflag() {
  json_content=$(getjsoncontent)
  build_args=''
  if [ ! "${IGNORE_VERSIONS_FILE}" == "TRUE" ]
  then
    tools=( $(echo ${json_content} | jq -r 'keys[]') )

    for tool in "${tools[@]}"; do
      if grep "ARG" ${TARGET} | grep -q "${tool}"
      then
        build_args="${build_args} --build-arg ${tool}="$(echo ${json_content} | jq -r '.'${tool}'')
      fi
    done
  fi

  echo ${build_args}
}
export -f getdockerversionsflag

function dockertagexists() {
  while $(curl --silent -f -lSL https://hub.docker.com/v2/repositories/$REPOSITORY/$(getname)/tags/${TO_SET_DOCKERFILE_VERSION} 1> /dev/null 2> /dev/null) || ! $FORCEPUSH
  do
    if [ -z $FORCEPUSH ]
    then
      printf "\n Docker image $(gettag) exists in dockerhub\n"
      TO_SET_DOCKERFILE_VERSION=$(getnewversion)
    else      
      printf "\n WARNING: Image exists. Force pushing!\n"
      return
    fi
  done
  printf "=== Docker image $(gettag) does not exist in dockerhub\n"

}
export -f dockertagexists

function setcontext() {
  if [ -z "$CONTEXT" ]; then
    CONTEXT="-f $(realpath --relative-to=$(pwd) $TARGET) ."
  else
    CONTEXT="-f $(realpath --relative-to=$CONTEXT $TARGET) ."
  fi
}
export -f setcontext

function build {
  setcontext
  if [ -z "$CHROMOSOME" ]; then
    docker build $(getdockerversionsflag) $NOCACHE -t $(gettag) $CONTEXT 1>&5 2>&5
  else
    for CHROM in $CHROMOSOME_LIST; do
      docker build $(getdockerversionsflag) --build-arg CHROMOSOME=$CHROM $NOCACHE -t $(gettag)'-'$CHROM $CONTEXT 1>&5 2>&5
    done
  fi
}; export -f build

function push {
  if [ ! "$NOPUSH" == "TRUE" ]; then
    if [ -z "$CHROMOSOME" ]; then
      printf "PUSHING: $(gettag) ... \n"
      docker push $(gettag $1) 1>&5
    else
      for CHROM in $CHROMOSOME_LIST; do
        printf "PUSHING: $(gettag)-$CHROM... \n"
        docker push $(gettag)'-'$CHROM 1>&5 2>&5
      done
    fi
  fi
}; export -f push

function updatenameversion(){
  if [[ "$(getname)" == *"-"* ]] && [ "${IGNORE_VERSIONS_FILE}" != "TRUE" ] && [ "${IGNORE_NAME_VERSION}" != "TRUE" ] ; then
    ver=$(echo $(getname) | { grep -Po '(?<=-)[0-9].+?(?=-\w|$)' || true; })
    
    if [[ -n "${ver}" ]] && [[ "${ver}" =~ [0-9] ]] && [[ ! "${ver::1}" =~ [a-zA-Z] ]] ; then
      toolname=$(echo $(getname) | grep -Po '(?<=-|^).+?(?=-'${ver}')')
      toolname=$(echo "${toolname}" | awk -F '-' '{print $(NF)'})
      
      tool_ver="${toolname^^}_VER"
      json_content=$(getjsoncontent)
      
      new_ver=$(echo ${json_content} | jq -r '.'${tool_ver}'')
      
      if [ "${ver}" != "${new_ver}" ] ; then
        echo "Old dockerfile ${toolname} version: ${ver}"
        echo "Dockerfile ${toolname} version specified in docker-versions.json: ${new_ver}"
        
        sed -i "0,/${toolname}-${ver}/{s/${toolname}-${ver}/${toolname}-${new_ver}/}" $TARGET
        TO_SET_DOCKERFILE_VERSION="1.0.0"
        echo "Changed ${toolname} version to ${new_ver}"
        updateversionindockerfile

      fi
    fi
  fi
}
export -f updatenameversion

function updateversionindockerfile(){
  if [ ${CURRENT_DOCKERFILE_VERSION} != ${TO_SET_DOCKERFILE_VERSION} ]; then
    printf "Changing ${CURRENT_DOCKERFILE_VERSION} version to ${TO_SET_DOCKERFILE_VERSION} in Dockerfile...\n"
    sed -i "0,/${CURRENT_DOCKERFILE_VERSION}/{s/${CURRENT_DOCKERFILE_VERSION}/${TO_SET_DOCKERFILE_VERSION}/}" $TARGET
    printf "Version changed\n"
    CURRENT_DOCKERFILE_VERSION=${TO_SET_DOCKERFILE_VERSION}
  fi
}

export -f updateversionindockerfile

function procede {
  istargetdefined
  sleep 1
  CURRENT_DOCKERFILE_VERSION=$(getversion)
  TO_SET_DOCKERFILE_VERSION=${CURRENT_DOCKERFILE_VERSION}
  updatenameversion
  sleep 1
  dockerfileexists
  sleep 1
  dockertagexists
  sleep 1
  updateversionindockerfile
  sleep 1
  build
  sleep 1
  push
  sleep 1
  printf "DONE: $(gettag) ... \n"
}

export -f procede

procede
