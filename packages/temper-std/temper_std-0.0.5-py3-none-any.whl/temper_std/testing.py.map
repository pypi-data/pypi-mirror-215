{ "version": 3, "file": "OUTPUT_ROOT/temper-std/py/temper_std/testing.py", "sources": [ "std/testing.temper.md" ], "sourcesContent": [ "For now, we use mutable global state to track test results in the interpreter.\n\n    private var passing: Boolean = true;\n    private var messages = new ListBuilder\u003cString\u003e();\n\nTODO We looked at the idea of test blocks, but do we still support this?\n\n    @connected(\u0022::test\u0022)\n    export let test(name: String, body: fn (): Void): Void {\n      passing = true;\n      messages = new ListBuilder\u003cString\u003e();\n      // TODO exception handling?\n      body();\n      if (passing) {\n        console.log(\u0022\u0024{name}: Passed\u0022);\n      } else {\n        console.log(\u0022\u0024{name}: Failed \u0024{messages.join(\u0022\\n\u0022) { (it);; it }}\u0022);\n      }\n    }\n\nCurrently for tests, you should extend `TestFixtureBase` and then decorate test\nmethods inside your test class with `@test`.\n\n    export interface TestFixtureBase {\n\n    }\n\nWe currently support a single `assert` method, for which we still need to refine\nhow we provide failure messages.\n\n    @connected(\u0022::assert\u0022)\n    export let assert(success: Boolean, message: fn (): String): Void {\n      if (!success) {\n        passing = false;\n        messages.add(message());\n      }\n    }\n" ], "names": [ "TemperObject", "str_cat", "str_cat#1239", "list_join", "list_join#1214", "bool_not", "bool_not#1222", "list_builder_add", "list_builder_add#1218", "List", "Callable", "list", "list#1244", "TestFixtureBase", "passing", "t#72", "messages", "test", "name", "body", "vGlobalConsole__36#1245", "return", "t#67", "t#68", "t#63", "fn", "it", "assert", "success", "message", "t#58" ], "mappings": "A,wB,Y,I,a,E,O,I,Y,E,S,I,c,E,Q,I,a,E,gB,I;A,mB,I,I,K,E,Q,I;A,qB,I,I;AAcQ,gBAAO,OAAA,AAAP,eAAO;AAAP,uBAAO,EAAA,AAAP,eAAO,CAAA,AAAP,QAAO;AASM,MAAAa,eAAA,CAAAb,aAAgB,EAAA;AAAhB,WAAgB,EAAA,AAAhB,GAAgB;AArBrBc,UAAO,CAAE,OAAO,EAAG;AACRC,IAAyB,CAAA,AAAzB,aAAyB,EAAA,AAArB,CAAAH,SAAmB,EAAE;AAApCI,WAAQ,CAAA,AAAR,aAAQ,EAAG,CAAAD;AAKhB,GAAI,CAAAE,IAAI,CAAA,AAACC,OAAI,CAAE,MAAM,CAAE,CAAAC,OAAI,CAAE,sBAUnC,IAAA,AAViD,OAAI;AAQnB,SAAAH,WAAQ,CAAA,AAHrC,CAAAF,UAAO,CAGT,CAAAM,uBAAuC;AARO,EAAAC,SAAA;AAQkB,EAAAC,IAAA,yBAAA;AAAjC,EAAAC,IAAiC,CAAA,AAAjC;AAElC,EAAAF,SAAA,OAAA;AATC,EAAAP,UAAO,EAAG,KAAI;AACH,EAAAU,IAAyB,CAAA,AAAzB,aAAyB,EAAA,AAArB,CAAAZ,SAAmB,EAAE;AAApC,EAAAI,WAAQ,EAAG,CAAAQ,IAAyB;AAEpC,EAAAL,OAAI;AAAE,IACF,CAAAL,UAAO,CACD;AAAR,IAAAM,uBAAO,CAAA,AAAP,GAAW,CAAClB,YAAA,CAAGgB,OAAI,CAAC,WAAQ,CAAC;AAAC;AAEqB,QAAAO,MAAA,CAAGC,KAAE,CAAA,AAAF,MAAU,IAAA,AAAJ;AAAA,MAAAL,UAAA;AAAA,MAAAA,UAAA,GAAAK,KAAE;AAAA,YAAA,AAAF,CAAAL,UAAE;AAAE,IAAAC,IAAA,GAAAG,MAAA;AAAjC,IAAAF,IAAA,EAAS,CAAAnB,cAAI,CAAA,AAAbY,WAAQ,CAAM,KAAI,CAAE,CAAAM,IAAa,CAAA;AAAhE,IAAAF,uBAAO,CAAA,AAAP,GAAW,CAAClB,YAAA,CAAGgB,OAAI,CAAC,YAAS,CAAE,CAAAK,IAAiC,CAAE;AAErE,QAAA,AAViD,CAAAF;AAuB3C,GAAI,CAAAM,QAAM,CAAA,AAACC,UAAO,CAAE,OAAO,CAAE,CAAAC,WAAO,CAAE,qBAK5C,IAAA,AAL4D,OAAI;AAG7D,SAAAb,WAAQ,CAAA,AADR,CAAAF,UACQ;AAHiD,EAAAO,SAAA;AAG5C,EAAAS,IAAS,CAAA,AAAT;AAEhB,EAAAT,SAAA,OAAA;AALiE,IAC5D,CAAAf,aAAC,CAAAsB,UAAO;AACV,IAAAd,UAAO,EAAG,MAAK;AACF,IAAAgB,IAAA,GAAAD,WAAO,EAAE;AAAb,IAAArB,qBAAG,CAAA,AAAZQ,WAAQ,CAAK,CAAAc,IAAS;AAEzB,QAAA,AAL4D,CAAAT,SAK5D;AAlCDA,UAAA,UAkCC,KAAA;AAAA,SAAAA" }