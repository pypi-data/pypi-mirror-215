{"version":3,"file":"lib_index_js.2f2d08c0aa32ccae54d5.js","mappings":"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","sources":["webpack://jupyterlab_empinken_extension/./src/index.ts"],"sourcesContent":["import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin,\n  LabShell\n} from '@jupyterlab/application';\n\n//import {CellList} from '@jupyterlab/notebook'; //gets list from ISharedNotebook\n//import { Cell } from '@jupyterlab/cells';\n\nimport { INotebookTracker, NotebookPanel } from '@jupyterlab/notebook';\n\n// Remove items in first list from second list\nfunction removeListMembers(list1: any[], list2: any[]): any[] {\n  return list2.filter(item => !list1.includes(item));\n}\n\n\n/**\n * The plugin registration information.\n */\n\n// https://jupyterlab.readthedocs.io/en/stable/api/index.html\n// https://jupyterlab.readthedocs.io/en/3.3.x/api/interfaces/notebook.inotebooktracker.html\n\nconst empinken_tags: string[] = [\"activity\", \"learner\", \"solution\", \"tutor\"];\n\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'jupyterlab_empinken_extension:plugin',\n  description:\n    'A JupyterLab extension adding a button to the Notebook toolbar.',\n  requires: [INotebookTracker],\n  autoStart: true,\n  activate: (app: JupyterFrontEnd, notebookTracker: INotebookTracker) => {\n    const { commands } = app;\n    \n    //labshell via https://discourse.jupyter.org/t/jupyterlab-4-iterating-over-all-cells-in-a-notebook/20033/2\n    const labShell = app.shell as LabShell;\n    labShell.currentChanged.connect(() => {\n      const notebook = app.shell.currentWidget as NotebookPanel;\n      if (notebook) {\n        notebook.revealed.then(() => {\n          notebook.content.widgets?.forEach(cell=>{\n            const tagList = cell.model.getMetadata('tags') ?? [];\n            console.log(\"cell metadata\",tagList)\n            tagList.forEach((tag:string) => {\n              if (empinken_tags.includes(tag)) {\n                //console.log(\"hit\",tag)\n                cell.node?.classList.add('iou-'+tag+'-node');\n              }\n            })\n          })\n          //const cellList = notebook.content.model.cells;\n          //let i=1;\n          //for (const cell of cellList) {\n          //  console.log(\"a cell of type\", cell.type, i)\n            //const tagList = convertToList(cell.metadata.tags);\n            //empinken_tags.forEach((tag) => {\n            //  if (tagList?.includes(tag)) {\n            //    console.log(\"hit\",tag)\n            //    //cell.node.classList.add('iou-activity-node');\n            //  }\n            //})\n            //i=i+1;\n            //console.log('METADATA: ', cell.metadata)\n          //}\n        })\n      }\n    });\n    // if we can get a list of cells, then update on render?\n    // https://jupyterlab.readthedocs.io/en/stable/api/classes/cells.Cell-1.html#ready\n    \n    // notebookTracker.currentChanged.connect((tracker, panel) => {\n    //   //console.log(panel);\n    //   if (!panel) {\n    //     return;\n    //   }\n    //   console.log(\"fired on currentChanged\")\n    //   console.log(\"this is the panel\", panel)\n    //   const nb = notebookTracker.currentWidget.content\n    //   nb.widgets.forEach((cell: Cell) => {\n    //     console.log(\"try\",cell.model.type)\n    //   })\n    //   console.log(\"panel widgets length\",panel.content.widgets.length)\n    //   // Iterate over all cells in the notebook and display metadata for each cell\n    //   // NO - this is only length 1?\n    //   console.log(\"tracker widgets length\",tracker.currentWidget.content.widgets.length)\n    //   panel.content.widgets.forEach(cell=>{\n    //     console.log(\"panel cell is\", cell)\n    //     if ( cell !== null) {\n    //       //this doesn't work wrt metadata\n    //       console.log(cell.model.type)\n    //       if (cell.model.type === 'code' || cell.model.type === 'markdown') {\n    //         //console.log(\"tags\",cell.model?.getMetadata('tags'))\n    //         let tagList = cell.model.getMetadata(\"tags\") as string[] ?? [];\n    //         console.log(\"model here is\", cell.model);\n    //         console.log(\"metadata tags here is\", tagList);\n    //         if (tagList?.includes('activity')) {\n    //           cell.node.classList.add('iou-activity-node');\n    //         }\n    //         //console.log(cell.model.type)\n    //         //console.log(cell.model.metadata)\n    //         //console.log(cell.model.metadata.get('tags'))\n    //         //console.log(cell.model.metadata.get('tags').includes('activity'))\n    //         //co\n    //       }\n    //     }\n    //   })\n    // });\n    // TO DO  - if the notebook tracker points to current cell\n    // then we should be able to get the current cell.\n     \n\n\n    const createEmpinkenCommand = (label: string, type: string) => {\n      //this works wrt metadata\n      const caption = `Execute empinken ${type} Command`;\n      return {\n        label,\n        caption,\n        execute: () => {\n          let activeCell = notebookTracker.activeCell;\n          //console.log(label, type, caption)\n          //console.log(activeCell)\n          const nodeclass = 'iou-' + type + \"-node\";\n          if ( activeCell !== null) {\n            let tagList = activeCell.model.getMetadata(\"tags\") as string[] ?? [];\n            //console.log(\"cell metadata was\", tagList, \"; checking for\", type);\n            if (tagList.includes(type)) {\n              // ...then remove it\n              const index = tagList.indexOf(type, 0);\n              if (index > -1) {\n                tagList.splice(index, 1);\n              }\n              activeCell.model.setMetadata(\"tags\", tagList)\n              // Remove class\n              activeCell.node.classList.remove(nodeclass)\n              // cell.node.classList exists\n            } else {\n              // remove other tags\n              tagList = removeListMembers(empinken_tags, tagList)\n              empinken_tags.forEach((tag:string) => {\n                activeCell.node.classList.remove('iou-' + tag + \"-node\")\n              })\n              // add required tag\n              tagList.push(type)\n              activeCell.model.setMetadata(\"tags\", tagList)\n              activeCell.node.classList.add(nodeclass)\n            }\n            //console.log(\"cell metadata now is\", tagList);\n          }\n        }\n      };\n    };\n    \n    // empinken_tags.forEach((tag:string) => {\n    //   commands.addCommand('ouseful-empinken:'+tag,\n    //     createEmpinkenCommand(tag.charAt(0).toUpperCase(),\n    //     tag));\n    // })\n    const command_a = 'ouseful-empinken:activity';\n    const command_l = 'ouseful-empinken:learner';\n    const command_s = 'ouseful-empinken:solution';\n    const command_t = 'ouseful-empinken:tutor';\n\n    // Add commands\n    commands.addCommand(command_a, createEmpinkenCommand('A', 'activity'));\n    commands.addCommand(command_l, createEmpinkenCommand('L', 'learner'));\n    commands.addCommand(command_s, createEmpinkenCommand('S', 'solution'));\n    commands.addCommand(command_t, createEmpinkenCommand('T', 'tutor'));\n    console.log(\"commands added\")\n    // Call the command execution\n    //commands.execute(command_a, { origin: 'init' }).catch(reason => {\n    //  console.error(\n    //    `An error occurred during the execution of empinken-A.\\n${reason}`\n    //  );\n    //});\n  }\n};\n\n/**\n * Export the plugin as default.\n */\nexport default plugin;\n"],"names":[],"sourceRoot":""}