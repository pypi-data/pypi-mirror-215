from abc import ABC, abstractmethod
from typing import Any
import requests
from requests.auth import HTTPBasicAuth
from selenium.webdriver.support import wait
from bs4 import BeautifulSoup
from .i_auth_scraping import IAuthScraping
#from ....autogeneratedscript.utils.log_file import write_log_file

class IAuthSession(IAuthScraping):
    """
    # For Authorize Crawling and Scraping in Web
    This is an abstract class which is a skeleton for request authentication
    and getting authorization session. With that session the a program might be
    able to crawl and scrap in a website's authorize routes.
    There are two public methods 
        * auth_request => This will just return the session cookies.
        * insert_cookies_in_driver => If web driver is required this will add those
        session cookies at that web driver object. 

    © BRAIN STATION 23 | Design and Development: Md. Ariful Islam (BS1121)
    """
    _session: requests.Session = None

    def __init__(self) -> None:
        self._session = requests.Session()
        #self.logg = write_log_file()
        

    @abstractmethod
    def insert_cookies_in_driver(self, cookies: dict, driver_obj: Any) -> Any:
        """ If Web Driver is required for Authorize Scraping this method will be used.
        This method will collect the session cookies and the web driver object as parameter
        and arrange the cookies according to the driver's cookie structure and insert those cookies 
        in the Web Driver. ©BS23"""

    @abstractmethod
    def _driver_config(self, target_link: str, driver_obj: Any) -> dict:
        """ If Web Driver is required for Authorize Scraping this method will configure the 
        driver according to the domain address and return a py Dictionary where key will be token name
        and value will be the form token.
        * Return: {'_token': 'eyXqewgbfgfbykj.......'}

        ©BS23"""
        
    @abstractmethod
    def _update_const_cred(self, field_key: str, field_value) -> bool:
        """ # Constants.AUTH_CREDENTIALS
        This method is responsible for updating the Constant User Login Credentials Template. 
        If update is successful it will return True. ©BS23"""

    @abstractmethod
    def _input_auth_credentials(self) -> dict:
        """ This method will collect user login credentials and arrange those as key and values 
        and return that as py Dictionary. ©BS23"""

    @abstractmethod
    def _get_token(self, target_link: str, header: dict, driver_obj: Any = None) -> dict:
        """ This method will make a GET request to get the form state_token/CSRF_token from the HTML body
        and return the token name as key and token itself as value as a py Dictionary.
        * Return: {'_token': 'eyXqewgbfgfbykj.......'}

        ©BS23"""

    @abstractmethod
    def _create_auth_session(self, target_link: str, auth_credentials: dict) -> dict:
        """ This method will make a POST request as login attempt. if the HTTP response status code is 200
        it will return the cookies as py Dictionary including the login session. ©BS23"""
