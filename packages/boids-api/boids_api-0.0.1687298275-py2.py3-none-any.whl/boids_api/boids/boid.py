# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from boids_api.boids.base_model_ import Model
from boids_api.boids.cartesian_triple import CartesianTriple
from boids_api.boids.simulation_timestamp import SimulationTimestamp
from boids_api import util

from boids_api.boids.cartesian_triple import CartesianTriple  # noqa: E501
from boids_api.boids.simulation_timestamp import SimulationTimestamp  # noqa: E501

class Boid(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, timestamp=None, position=None, velocity=None, history=None):  # noqa: E501
        """Boid - a model defined in OpenAPI

        :param id: The id of this Boid.  # noqa: E501
        :type id: str
        :param timestamp: The timestamp of this Boid.  # noqa: E501
        :type timestamp: SimulationTimestamp
        :param position: The position of this Boid.  # noqa: E501
        :type position: CartesianTriple
        :param velocity: The velocity of this Boid.  # noqa: E501
        :type velocity: CartesianTriple
        :param history: The history of this Boid.  # noqa: E501
        :type history: List[Boid]
        """
        self.openapi_types = {
            'id': str,
            'timestamp': SimulationTimestamp,
            'position': CartesianTriple,
            'velocity': CartesianTriple,
            'history': List[Boid]
        }

        self.attribute_map = {
            'id': 'id',
            'timestamp': 'timestamp',
            'position': 'position',
            'velocity': 'velocity',
            'history': 'history'
        }

        self._id = id
        self._timestamp = timestamp
        self._position = position
        self._velocity = velocity
        self._history = history

    @classmethod
    def from_dict(cls, dikt) -> 'Boid':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Boid of this Boid.  # noqa: E501
        :rtype: Boid
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Boid.


        :return: The id of this Boid.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Boid.


        :param id: The id of this Boid.
        :type id: str
        """

        self._id = id

    @property
    def timestamp(self):
        """Gets the timestamp of this Boid.


        :return: The timestamp of this Boid.
        :rtype: SimulationTimestamp
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Boid.


        :param timestamp: The timestamp of this Boid.
        :type timestamp: SimulationTimestamp
        """

        self._timestamp = timestamp

    @property
    def position(self):
        """Gets the position of this Boid.


        :return: The position of this Boid.
        :rtype: CartesianTriple
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Boid.


        :param position: The position of this Boid.
        :type position: CartesianTriple
        """
        if position is None:
            raise ValueError("Invalid value for `position`, must not be `None`")  # noqa: E501

        self._position = position

    @property
    def velocity(self):
        """Gets the velocity of this Boid.


        :return: The velocity of this Boid.
        :rtype: CartesianTriple
        """
        return self._velocity

    @velocity.setter
    def velocity(self, velocity):
        """Sets the velocity of this Boid.


        :param velocity: The velocity of this Boid.
        :type velocity: CartesianTriple
        """
        if velocity is None:
            raise ValueError("Invalid value for `velocity`, must not be `None`")  # noqa: E501

        self._velocity = velocity

    @property
    def history(self):
        """Gets the history of this Boid.


        :return: The history of this Boid.
        :rtype: List[Boid]
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this Boid.


        :param history: The history of this Boid.
        :type history: List[Boid]
        """

        self._history = history
