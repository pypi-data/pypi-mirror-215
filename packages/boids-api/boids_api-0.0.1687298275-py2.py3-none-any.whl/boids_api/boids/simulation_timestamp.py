# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from boids_api.boids.base_model_ import Model
import re
from boids_api import util

import re  # noqa: E501

class SimulationTimestamp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tick=None, elapsed_time=None, wall_clock=None):  # noqa: E501
        """SimulationTimestamp - a model defined in OpenAPI

        :param tick: The tick of this SimulationTimestamp.  # noqa: E501
        :type tick: int
        :param elapsed_time: The elapsed_time of this SimulationTimestamp.  # noqa: E501
        :type elapsed_time: str
        :param wall_clock: The wall_clock of this SimulationTimestamp.  # noqa: E501
        :type wall_clock: datetime
        """
        self.openapi_types = {
            'tick': int,
            'elapsed_time': str,
            'wall_clock': datetime
        }

        self.attribute_map = {
            'tick': 'tick',
            'elapsed_time': 'elapsed_time',
            'wall_clock': 'wall_clock'
        }

        self._tick = tick
        self._elapsed_time = elapsed_time
        self._wall_clock = wall_clock

    @classmethod
    def from_dict(cls, dikt) -> 'SimulationTimestamp':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SimulationTimestamp of this SimulationTimestamp.  # noqa: E501
        :rtype: SimulationTimestamp
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tick(self):
        """Gets the tick of this SimulationTimestamp.


        :return: The tick of this SimulationTimestamp.
        :rtype: int
        """
        return self._tick

    @tick.setter
    def tick(self, tick):
        """Sets the tick of this SimulationTimestamp.


        :param tick: The tick of this SimulationTimestamp.
        :type tick: int
        """
        if tick is None:
            raise ValueError("Invalid value for `tick`, must not be `None`")  # noqa: E501

        self._tick = tick

    @property
    def elapsed_time(self):
        """Gets the elapsed_time of this SimulationTimestamp.


        :return: The elapsed_time of this SimulationTimestamp.
        :rtype: str
        """
        return self._elapsed_time

    @elapsed_time.setter
    def elapsed_time(self, elapsed_time):
        """Sets the elapsed_time of this SimulationTimestamp.


        :param elapsed_time: The elapsed_time of this SimulationTimestamp.
        :type elapsed_time: str
        """
        if elapsed_time is None:
            raise ValueError("Invalid value for `elapsed_time`, must not be `None`")  # noqa: E501
        if elapsed_time is not None and not re.search(r'\d{1,}:[0-5]\d:[0-5]\d\.\d{3}', elapsed_time):  # noqa: E501
            raise ValueError("Invalid value for `elapsed_time`, must be a follow pattern or equal to `/\d{1,}:[0-5]\d:[0-5]\d\.\d{3}/`")  # noqa: E501

        self._elapsed_time = elapsed_time

    @property
    def wall_clock(self):
        """Gets the wall_clock of this SimulationTimestamp.


        :return: The wall_clock of this SimulationTimestamp.
        :rtype: datetime
        """
        return self._wall_clock

    @wall_clock.setter
    def wall_clock(self, wall_clock):
        """Sets the wall_clock of this SimulationTimestamp.


        :param wall_clock: The wall_clock of this SimulationTimestamp.
        :type wall_clock: datetime
        """

        self._wall_clock = wall_clock
