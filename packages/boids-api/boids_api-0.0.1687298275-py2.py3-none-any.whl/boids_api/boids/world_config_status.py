# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from boids_api.boids.base_model_ import Model
from boids_api.boids.world_config import WorldConfig
from boids_api.boids.world_config_status_limits import WorldConfigStatusLimits
from boids_api import util

from boids_api.boids.world_config import WorldConfig  # noqa: E501
from boids_api.boids.world_config_status_limits import WorldConfigStatusLimits  # noqa: E501

class WorldConfigStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current=None, defaults=None, limits=None):  # noqa: E501
        """WorldConfigStatus - a model defined in OpenAPI

        :param current: The current of this WorldConfigStatus.  # noqa: E501
        :type current: WorldConfig
        :param defaults: The defaults of this WorldConfigStatus.  # noqa: E501
        :type defaults: WorldConfig
        :param limits: The limits of this WorldConfigStatus.  # noqa: E501
        :type limits: WorldConfigStatusLimits
        """
        self.openapi_types = {
            'current': WorldConfig,
            'defaults': WorldConfig,
            'limits': WorldConfigStatusLimits
        }

        self.attribute_map = {
            'current': 'current',
            'defaults': 'defaults',
            'limits': 'limits'
        }

        self._current = current
        self._defaults = defaults
        self._limits = limits

    @classmethod
    def from_dict(cls, dikt) -> 'WorldConfigStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The WorldConfigStatus of this WorldConfigStatus.  # noqa: E501
        :rtype: WorldConfigStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current(self):
        """Gets the current of this WorldConfigStatus.


        :return: The current of this WorldConfigStatus.
        :rtype: WorldConfig
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this WorldConfigStatus.


        :param current: The current of this WorldConfigStatus.
        :type current: WorldConfig
        """

        self._current = current

    @property
    def defaults(self):
        """Gets the defaults of this WorldConfigStatus.


        :return: The defaults of this WorldConfigStatus.
        :rtype: WorldConfig
        """
        return self._defaults

    @defaults.setter
    def defaults(self, defaults):
        """Sets the defaults of this WorldConfigStatus.


        :param defaults: The defaults of this WorldConfigStatus.
        :type defaults: WorldConfig
        """
        if defaults is None:
            raise ValueError("Invalid value for `defaults`, must not be `None`")  # noqa: E501

        self._defaults = defaults

    @property
    def limits(self):
        """Gets the limits of this WorldConfigStatus.


        :return: The limits of this WorldConfigStatus.
        :rtype: WorldConfigStatusLimits
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this WorldConfigStatus.


        :param limits: The limits of this WorldConfigStatus.
        :type limits: WorldConfigStatusLimits
        """
        if limits is None:
            raise ValueError("Invalid value for `limits`, must not be `None`")  # noqa: E501

        self._limits = limits
