# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from boids_api.boids.base_model_ import Model
from boids_api import util


class Pagination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sort_field=None, sort_asc=None, page_offset=None, page_size=None, pages_total=None):  # noqa: E501
        """Pagination - a model defined in OpenAPI

        :param sort_field: The sort_field of this Pagination.  # noqa: E501
        :type sort_field: str
        :param sort_asc: The sort_asc of this Pagination.  # noqa: E501
        :type sort_asc: bool
        :param page_offset: The page_offset of this Pagination.  # noqa: E501
        :type page_offset: int
        :param page_size: The page_size of this Pagination.  # noqa: E501
        :type page_size: int
        :param pages_total: The pages_total of this Pagination.  # noqa: E501
        :type pages_total: int
        """
        self.openapi_types = {
            'sort_field': str,
            'sort_asc': bool,
            'page_offset': int,
            'page_size': int,
            'pages_total': int
        }

        self.attribute_map = {
            'sort_field': 'sort_field',
            'sort_asc': 'sort_asc',
            'page_offset': 'page_offset',
            'page_size': 'page_size',
            'pages_total': 'pages_total'
        }

        self._sort_field = sort_field
        self._sort_asc = sort_asc
        self._page_offset = page_offset
        self._page_size = page_size
        self._pages_total = pages_total

    @classmethod
    def from_dict(cls, dikt) -> 'Pagination':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Pagination of this Pagination.  # noqa: E501
        :rtype: Pagination
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sort_field(self):
        """Gets the sort_field of this Pagination.


        :return: The sort_field of this Pagination.
        :rtype: str
        """
        return self._sort_field

    @sort_field.setter
    def sort_field(self, sort_field):
        """Sets the sort_field of this Pagination.


        :param sort_field: The sort_field of this Pagination.
        :type sort_field: str
        """
        if sort_field is None:
            raise ValueError("Invalid value for `sort_field`, must not be `None`")  # noqa: E501

        self._sort_field = sort_field

    @property
    def sort_asc(self):
        """Gets the sort_asc of this Pagination.


        :return: The sort_asc of this Pagination.
        :rtype: bool
        """
        return self._sort_asc

    @sort_asc.setter
    def sort_asc(self, sort_asc):
        """Sets the sort_asc of this Pagination.


        :param sort_asc: The sort_asc of this Pagination.
        :type sort_asc: bool
        """
        if sort_asc is None:
            raise ValueError("Invalid value for `sort_asc`, must not be `None`")  # noqa: E501

        self._sort_asc = sort_asc

    @property
    def page_offset(self):
        """Gets the page_offset of this Pagination.


        :return: The page_offset of this Pagination.
        :rtype: int
        """
        return self._page_offset

    @page_offset.setter
    def page_offset(self, page_offset):
        """Sets the page_offset of this Pagination.


        :param page_offset: The page_offset of this Pagination.
        :type page_offset: int
        """
        if page_offset is None:
            raise ValueError("Invalid value for `page_offset`, must not be `None`")  # noqa: E501

        self._page_offset = page_offset

    @property
    def page_size(self):
        """Gets the page_size of this Pagination.


        :return: The page_size of this Pagination.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this Pagination.


        :param page_size: The page_size of this Pagination.
        :type page_size: int
        """
        if page_size is None:
            raise ValueError("Invalid value for `page_size`, must not be `None`")  # noqa: E501

        self._page_size = page_size

    @property
    def pages_total(self):
        """Gets the pages_total of this Pagination.


        :return: The pages_total of this Pagination.
        :rtype: int
        """
        return self._pages_total

    @pages_total.setter
    def pages_total(self, pages_total):
        """Sets the pages_total of this Pagination.


        :param pages_total: The pages_total of this Pagination.
        :type pages_total: int
        """

        self._pages_total = pages_total
