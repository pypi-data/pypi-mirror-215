# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from boids_api.boids.base_model_ import Model
from boids_api.boids.integer_range import IntegerRange
from boids_api import util

from boids_api.boids.integer_range import IntegerRange  # noqa: E501

class BoidsConfigStatusLimits(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, quantity=None, view_range=None, view_angle=None, speed=None):  # noqa: E501
        """BoidsConfigStatusLimits - a model defined in OpenAPI

        :param quantity: The quantity of this BoidsConfigStatusLimits.  # noqa: E501
        :type quantity: IntegerRange
        :param view_range: The view_range of this BoidsConfigStatusLimits.  # noqa: E501
        :type view_range: IntegerRange
        :param view_angle: The view_angle of this BoidsConfigStatusLimits.  # noqa: E501
        :type view_angle: IntegerRange
        :param speed: The speed of this BoidsConfigStatusLimits.  # noqa: E501
        :type speed: IntegerRange
        """
        self.openapi_types = {
            'quantity': IntegerRange,
            'view_range': IntegerRange,
            'view_angle': IntegerRange,
            'speed': IntegerRange
        }

        self.attribute_map = {
            'quantity': 'quantity',
            'view_range': 'view_range',
            'view_angle': 'view_angle',
            'speed': 'speed'
        }

        self._quantity = quantity
        self._view_range = view_range
        self._view_angle = view_angle
        self._speed = speed

    @classmethod
    def from_dict(cls, dikt) -> 'BoidsConfigStatusLimits':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BoidsConfigStatus_limits of this BoidsConfigStatusLimits.  # noqa: E501
        :rtype: BoidsConfigStatusLimits
        """
        return util.deserialize_model(dikt, cls)

    @property
    def quantity(self):
        """Gets the quantity of this BoidsConfigStatusLimits.


        :return: The quantity of this BoidsConfigStatusLimits.
        :rtype: IntegerRange
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this BoidsConfigStatusLimits.


        :param quantity: The quantity of this BoidsConfigStatusLimits.
        :type quantity: IntegerRange
        """

        self._quantity = quantity

    @property
    def view_range(self):
        """Gets the view_range of this BoidsConfigStatusLimits.


        :return: The view_range of this BoidsConfigStatusLimits.
        :rtype: IntegerRange
        """
        return self._view_range

    @view_range.setter
    def view_range(self, view_range):
        """Sets the view_range of this BoidsConfigStatusLimits.


        :param view_range: The view_range of this BoidsConfigStatusLimits.
        :type view_range: IntegerRange
        """

        self._view_range = view_range

    @property
    def view_angle(self):
        """Gets the view_angle of this BoidsConfigStatusLimits.


        :return: The view_angle of this BoidsConfigStatusLimits.
        :rtype: IntegerRange
        """
        return self._view_angle

    @view_angle.setter
    def view_angle(self, view_angle):
        """Sets the view_angle of this BoidsConfigStatusLimits.


        :param view_angle: The view_angle of this BoidsConfigStatusLimits.
        :type view_angle: IntegerRange
        """

        self._view_angle = view_angle

    @property
    def speed(self):
        """Gets the speed of this BoidsConfigStatusLimits.


        :return: The speed of this BoidsConfigStatusLimits.
        :rtype: IntegerRange
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this BoidsConfigStatusLimits.


        :param speed: The speed of this BoidsConfigStatusLimits.
        :type speed: IntegerRange
        """

        self._speed = speed
