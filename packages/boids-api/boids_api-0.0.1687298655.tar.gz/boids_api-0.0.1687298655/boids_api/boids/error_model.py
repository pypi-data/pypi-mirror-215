# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from boids_api.boids.base_model_ import Model
from boids_api import util


class ErrorModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message=None, code=None):  # noqa: E501
        """ErrorModel - a model defined in OpenAPI

        :param message: The message of this ErrorModel.  # noqa: E501
        :type message: str
        :param code: The code of this ErrorModel.  # noqa: E501
        :type code: int
        """
        self.openapi_types = {
            'message': str,
            'code': int
        }

        self.attribute_map = {
            'message': 'message',
            'code': 'code'
        }

        self._message = message
        self._code = code

    @classmethod
    def from_dict(cls, dikt) -> 'ErrorModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ErrorModel of this ErrorModel.  # noqa: E501
        :rtype: ErrorModel
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this ErrorModel.


        :return: The message of this ErrorModel.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ErrorModel.


        :param message: The message of this ErrorModel.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def code(self):
        """Gets the code of this ErrorModel.


        :return: The code of this ErrorModel.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ErrorModel.


        :param code: The code of this ErrorModel.
        :type code: int
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501
        if code is not None and code > 600:  # noqa: E501
            raise ValueError("Invalid value for `code`, must be a value less than or equal to `600`")  # noqa: E501
        if code is not None and code < 100:  # noqa: E501
            raise ValueError("Invalid value for `code`, must be a value greater than or equal to `100`")  # noqa: E501

        self._code = code
