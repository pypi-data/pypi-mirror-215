# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from boids_api.boids.base_model_ import Model
from boids_api.boids.simulation_state import SimulationState
from boids_api import util

from boids_api.boids.simulation_state import SimulationState  # noqa: E501

class SimulationControlStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, state=None, rate=None, next_states=None):  # noqa: E501
        """SimulationControlStatus - a model defined in OpenAPI

        :param state: The state of this SimulationControlStatus.  # noqa: E501
        :type state: SimulationState
        :param rate: The rate of this SimulationControlStatus.  # noqa: E501
        :type rate: float
        :param next_states: The next_states of this SimulationControlStatus.  # noqa: E501
        :type next_states: List[SimulationState]
        """
        self.openapi_types = {
            'state': SimulationState,
            'rate': float,
            'next_states': List[SimulationState]
        }

        self.attribute_map = {
            'state': 'state',
            'rate': 'rate',
            'next_states': 'next_states'
        }

        self._state = state
        self._rate = rate
        self._next_states = next_states

    @classmethod
    def from_dict(cls, dikt) -> 'SimulationControlStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SimulationControlStatus of this SimulationControlStatus.  # noqa: E501
        :rtype: SimulationControlStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def state(self):
        """Gets the state of this SimulationControlStatus.


        :return: The state of this SimulationControlStatus.
        :rtype: SimulationState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SimulationControlStatus.


        :param state: The state of this SimulationControlStatus.
        :type state: SimulationState
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def rate(self):
        """Gets the rate of this SimulationControlStatus.


        :return: The rate of this SimulationControlStatus.
        :rtype: float
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this SimulationControlStatus.


        :param rate: The rate of this SimulationControlStatus.
        :type rate: float
        """
        if rate is None:
            raise ValueError("Invalid value for `rate`, must not be `None`")  # noqa: E501

        self._rate = rate

    @property
    def next_states(self):
        """Gets the next_states of this SimulationControlStatus.


        :return: The next_states of this SimulationControlStatus.
        :rtype: List[SimulationState]
        """
        return self._next_states

    @next_states.setter
    def next_states(self, next_states):
        """Sets the next_states of this SimulationControlStatus.


        :param next_states: The next_states of this SimulationControlStatus.
        :type next_states: List[SimulationState]
        """
        if next_states is None:
            raise ValueError("Invalid value for `next_states`, must not be `None`")  # noqa: E501

        self._next_states = next_states
