# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from boids_api.boids.base_model_ import Model
from boids_api.boids.pagination import Pagination
from boids_api.boids.system_event import SystemEvent
from boids_api import util

from boids_api.boids.pagination import Pagination  # noqa: E501
from boids_api.boids.system_event import SystemEvent  # noqa: E501

class SystemEventList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, values=None, pagination=None):  # noqa: E501
        """SystemEventList - a model defined in OpenAPI

        :param values: The values of this SystemEventList.  # noqa: E501
        :type values: List[SystemEvent]
        :param pagination: The pagination of this SystemEventList.  # noqa: E501
        :type pagination: Pagination
        """
        self.openapi_types = {
            'values': List[SystemEvent],
            'pagination': Pagination
        }

        self.attribute_map = {
            'values': 'values',
            'pagination': 'pagination'
        }

        self._values = values
        self._pagination = pagination

    @classmethod
    def from_dict(cls, dikt) -> 'SystemEventList':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SystemEventList of this SystemEventList.  # noqa: E501
        :rtype: SystemEventList
        """
        return util.deserialize_model(dikt, cls)

    @property
    def values(self):
        """Gets the values of this SystemEventList.


        :return: The values of this SystemEventList.
        :rtype: List[SystemEvent]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this SystemEventList.


        :param values: The values of this SystemEventList.
        :type values: List[SystemEvent]
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")  # noqa: E501

        self._values = values

    @property
    def pagination(self):
        """Gets the pagination of this SystemEventList.


        :return: The pagination of this SystemEventList.
        :rtype: Pagination
        """
        return self._pagination

    @pagination.setter
    def pagination(self, pagination):
        """Sets the pagination of this SystemEventList.


        :param pagination: The pagination of this SystemEventList.
        :type pagination: Pagination
        """

        self._pagination = pagination
