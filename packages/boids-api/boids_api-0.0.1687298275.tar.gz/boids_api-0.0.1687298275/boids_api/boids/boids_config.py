# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from boids_api.boids.base_model_ import Model
from boids_api.boids.integer_range import IntegerRange
from boids_api import util

from boids_api.boids.integer_range import IntegerRange  # noqa: E501

class BoidsConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, quantity=None, avoid_walls=True, normalize_velocity=True, view_range=None, view_angle=None, speed_limits=None):  # noqa: E501
        """BoidsConfig - a model defined in OpenAPI

        :param quantity: The quantity of this BoidsConfig.  # noqa: E501
        :type quantity: int
        :param avoid_walls: The avoid_walls of this BoidsConfig.  # noqa: E501
        :type avoid_walls: bool
        :param normalize_velocity: The normalize_velocity of this BoidsConfig.  # noqa: E501
        :type normalize_velocity: bool
        :param view_range: The view_range of this BoidsConfig.  # noqa: E501
        :type view_range: int
        :param view_angle: The view_angle of this BoidsConfig.  # noqa: E501
        :type view_angle: int
        :param speed_limits: The speed_limits of this BoidsConfig.  # noqa: E501
        :type speed_limits: IntegerRange
        """
        self.openapi_types = {
            'quantity': int,
            'avoid_walls': bool,
            'normalize_velocity': bool,
            'view_range': int,
            'view_angle': int,
            'speed_limits': IntegerRange
        }

        self.attribute_map = {
            'quantity': 'quantity',
            'avoid_walls': 'avoid_walls',
            'normalize_velocity': 'normalize_velocity',
            'view_range': 'view_range',
            'view_angle': 'view_angle',
            'speed_limits': 'speed_limits'
        }

        self._quantity = quantity
        self._avoid_walls = avoid_walls
        self._normalize_velocity = normalize_velocity
        self._view_range = view_range
        self._view_angle = view_angle
        self._speed_limits = speed_limits

    @classmethod
    def from_dict(cls, dikt) -> 'BoidsConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BoidsConfig of this BoidsConfig.  # noqa: E501
        :rtype: BoidsConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def quantity(self):
        """Gets the quantity of this BoidsConfig.


        :return: The quantity of this BoidsConfig.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this BoidsConfig.


        :param quantity: The quantity of this BoidsConfig.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def avoid_walls(self):
        """Gets the avoid_walls of this BoidsConfig.


        :return: The avoid_walls of this BoidsConfig.
        :rtype: bool
        """
        return self._avoid_walls

    @avoid_walls.setter
    def avoid_walls(self, avoid_walls):
        """Sets the avoid_walls of this BoidsConfig.


        :param avoid_walls: The avoid_walls of this BoidsConfig.
        :type avoid_walls: bool
        """
        if avoid_walls is None:
            raise ValueError("Invalid value for `avoid_walls`, must not be `None`")  # noqa: E501

        self._avoid_walls = avoid_walls

    @property
    def normalize_velocity(self):
        """Gets the normalize_velocity of this BoidsConfig.


        :return: The normalize_velocity of this BoidsConfig.
        :rtype: bool
        """
        return self._normalize_velocity

    @normalize_velocity.setter
    def normalize_velocity(self, normalize_velocity):
        """Sets the normalize_velocity of this BoidsConfig.


        :param normalize_velocity: The normalize_velocity of this BoidsConfig.
        :type normalize_velocity: bool
        """

        self._normalize_velocity = normalize_velocity

    @property
    def view_range(self):
        """Gets the view_range of this BoidsConfig.


        :return: The view_range of this BoidsConfig.
        :rtype: int
        """
        return self._view_range

    @view_range.setter
    def view_range(self, view_range):
        """Sets the view_range of this BoidsConfig.


        :param view_range: The view_range of this BoidsConfig.
        :type view_range: int
        """
        if view_range is None:
            raise ValueError("Invalid value for `view_range`, must not be `None`")  # noqa: E501

        self._view_range = view_range

    @property
    def view_angle(self):
        """Gets the view_angle of this BoidsConfig.


        :return: The view_angle of this BoidsConfig.
        :rtype: int
        """
        return self._view_angle

    @view_angle.setter
    def view_angle(self, view_angle):
        """Sets the view_angle of this BoidsConfig.


        :param view_angle: The view_angle of this BoidsConfig.
        :type view_angle: int
        """
        if view_angle is None:
            raise ValueError("Invalid value for `view_angle`, must not be `None`")  # noqa: E501
        if view_angle is not None and view_angle > 359:  # noqa: E501
            raise ValueError("Invalid value for `view_angle`, must be a value less than or equal to `359`")  # noqa: E501
        if view_angle is not None and view_angle < 0:  # noqa: E501
            raise ValueError("Invalid value for `view_angle`, must be a value greater than or equal to `0`")  # noqa: E501

        self._view_angle = view_angle

    @property
    def speed_limits(self):
        """Gets the speed_limits of this BoidsConfig.


        :return: The speed_limits of this BoidsConfig.
        :rtype: IntegerRange
        """
        return self._speed_limits

    @speed_limits.setter
    def speed_limits(self, speed_limits):
        """Sets the speed_limits of this BoidsConfig.


        :param speed_limits: The speed_limits of this BoidsConfig.
        :type speed_limits: IntegerRange
        """
        if speed_limits is None:
            raise ValueError("Invalid value for `speed_limits`, must not be `None`")  # noqa: E501

        self._speed_limits = speed_limits
