# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from boids_api.boids.base_model_ import Model
from boids_api.boids.simulation_timestamp import SimulationTimestamp
from boids_api.boids.system_event_level import SystemEventLevel
from boids_api import util

from boids_api.boids.simulation_timestamp import SimulationTimestamp  # noqa: E501
from boids_api.boids.system_event_level import SystemEventLevel  # noqa: E501

class SystemEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timestamp=None, level=None, source=None, message=None):  # noqa: E501
        """SystemEvent - a model defined in OpenAPI

        :param timestamp: The timestamp of this SystemEvent.  # noqa: E501
        :type timestamp: SimulationTimestamp
        :param level: The level of this SystemEvent.  # noqa: E501
        :type level: SystemEventLevel
        :param source: The source of this SystemEvent.  # noqa: E501
        :type source: str
        :param message: The message of this SystemEvent.  # noqa: E501
        :type message: str
        """
        self.openapi_types = {
            'timestamp': SimulationTimestamp,
            'level': SystemEventLevel,
            'source': str,
            'message': str
        }

        self.attribute_map = {
            'timestamp': 'timestamp',
            'level': 'level',
            'source': 'source',
            'message': 'message'
        }

        self._timestamp = timestamp
        self._level = level
        self._source = source
        self._message = message

    @classmethod
    def from_dict(cls, dikt) -> 'SystemEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SystemEvent of this SystemEvent.  # noqa: E501
        :rtype: SystemEvent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timestamp(self):
        """Gets the timestamp of this SystemEvent.


        :return: The timestamp of this SystemEvent.
        :rtype: SimulationTimestamp
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this SystemEvent.


        :param timestamp: The timestamp of this SystemEvent.
        :type timestamp: SimulationTimestamp
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def level(self):
        """Gets the level of this SystemEvent.


        :return: The level of this SystemEvent.
        :rtype: SystemEventLevel
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this SystemEvent.


        :param level: The level of this SystemEvent.
        :type level: SystemEventLevel
        """
        if level is None:
            raise ValueError("Invalid value for `level`, must not be `None`")  # noqa: E501

        self._level = level

    @property
    def source(self):
        """Gets the source of this SystemEvent.


        :return: The source of this SystemEvent.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this SystemEvent.


        :param source: The source of this SystemEvent.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def message(self):
        """Gets the message of this SystemEvent.


        :return: The message of this SystemEvent.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SystemEvent.


        :param message: The message of this SystemEvent.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message
