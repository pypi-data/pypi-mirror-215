from tkinter import Button,PhotoImage,colorchooser,filedialog,Tk,Menu
from tkinter.simpledialog import askstring
import cv2, os, sqlite3, base64
from PIL import Image, ImageTk





def addMButton(window, x=0, y=0, text="", px=50, py=0,  **kw):    
    widget = Button(window, text=text, **kw)
    widget.place(x=x, y=y)
    
    widget.img="default.png"
    widget.px = px
    widget.py = py
    widget.fg = widget["fg"]
    widget.bg = widget["bg"]
    widget.imw = widget.winfo_reqwidth() + widget.px
    widget.imh = widget.winfo_reqheight() + widget.py
    widget.imgcolor = window.winfo_rgb("white") #c0c0c0
    window["bg"]="#e1e1e1"
    widget.b64img=default
    widget.windowbg = window["bg"]
    widget.window = window
    
    with open(widget.img, "wb") as file: file.write(base64.b64decode(widget.b64img))
    ModernButtonDesign(window,widget,widget.imgcolor,widget.winfo_rgb(widget["fg"]))
    
    bindwidget(widget)
    window.bind("<Button-3>",lambda e: popMenu(window,e))
    widget.bind("<Button-2>",lambda e: popMenuMiddle(window,e))
    widget.bind("<B1-Motion>",lambda e: rightLeft(e,window,widget))
    widget.bind("<MouseWheel>",lambda e: MouseWheel(e,widget,window))
    window.bind("<Shift-F12>",lambda e: aa())
    return widget

def btnpress(event):
    i = event.widget
    print(i,i["text"],"window color:",i.window["bg"],i.window.title(),i.window.geometry())
    
EscapeKey=0

def aa():
    global EscapeKey
    if EscapeKey == 0 :
        EscapeKey = 1
    elif EscapeKey == 1 : EscapeKey = 0

def MouseWheel(event,widget,window):
    delta = event.delta
    if EscapeKey == 1 :
        if widget.imh >=20:
            widget["fg"]=widget.fg
            if delta > 0:
                widget.imh = widget.imh + 1
            elif delta < 0:
                widget.imh = widget.imh - 1
        else: widget.imh=20
        ModernButtonDesign(window,widget,window.winfo_rgb(widget.imgcolor),widget.winfo_rgb(widget["fg"]))
        
    
prev_y, prev_x = 0, 0
def rightLeft(event,window,widget):
    global prev_x, prev_y
    if EscapeKey == 1 :
        if (widget.winfo_reqwidth()-widget.imw) == 4:
            widget["fg"]=widget.fg
            if event.x > prev_x :
                    widget.imw = widget.imw + 1
            elif event.x < prev_x :
                    widget.imw = widget.imw - 1
            prev_x, prev_y = event.x, event.y
        else: widget.imw = widget.imw + 1
        ModernButtonDesign(window,widget,window.winfo_rgb(widget.imgcolor),widget.winfo_rgb(widget["fg"]))

    
def ModernButtonDesign(window,widget,rgb1,rgb2):
    red = rgb1[0] // 256
    green = rgb1[1] // 256
    blue = rgb1[2] // 256
    widget.imgcolor = '#{:02x}{:02x}{:02x}'.format(red, green, blue)
    
    mainimage = cv2.imread(widget.img, cv2.IMREAD_UNCHANGED)      
    b, g, r, a = cv2.split(mainimage)
    r = cv2.add(r, red - r.mean())
    g = cv2.add(g, green - g.mean())
    b = cv2.add(b, blue - b.mean())
    image = cv2.merge((b, g, r, a))
    image = cv2.resize(image, (widget.imw, widget.imh))
    image = cv2.cvtColor(image, cv2.COLOR_BGRA2RGBA)
    image = Image.fromarray(image)
    img = ImageTk.PhotoImage(image)
    widget.configure(image=img,fg="black",compound="center",bd=0,bg=window["bg"],
                     activeforeground=window["bg"],activebackground=window["bg"])
    widget.image=img

    red = rgb2[0] // 256
    green = rgb2[1] // 256
    blue = rgb2[2] // 256
    aaa1 = '#{:02x}{:02x}{:02x}'.format(red, green, blue)
    mainimage = cv2.imread(widget.img, cv2.IMREAD_UNCHANGED)      
    b, g, r, a = cv2.split(mainimage)
    r = cv2.add(r, red - r.mean())
    g = cv2.add(g, green - g.mean())
    b = cv2.add(b, blue - b.mean())
    image1 = cv2.merge((b, g, r, a))
    image1 = cv2.resize(image1, (widget.imw, widget.imh))
    image1 = cv2.cvtColor(image1, cv2.COLOR_BGRA2RGBA)
    image1 = Image.fromarray(image1)
    img1 = ImageTk.PhotoImage(image1)
    widget.bind("<Enter>",lambda e: widget.config(image=img1,fg=widget.imgcolor))
    widget.bind("<Leave>",lambda e: widget.config(image=img,fg=aaa1))


def popMenu(window, event,var=""):
 if isinstance(event.widget, Tk):
  mainm = Menu(tearoff=0)
  mainm.add_command(label="Interface Color", command=lambda: InterfaceColor(window))
  mainm.add_separator()
    
  buttonm = Menu(tearoff=0)
  mainm.add_cascade(label="Buttons", menu=buttonm)
  buttonm.add_command(label="Styles", command=lambda: openPNG(window))
  buttonm.add_separator()
  buttonm.add_command(label="Style Color", command=lambda: WidgetsColor(window,"bbg"))
  buttonm.add_command(label="Text  Color", command=lambda: WidgetsColor(window,"bfg"))
  buttonm.add_command(label="Style Width", command=lambda: ChangeDimW(window))
  buttonm.add_command(label="Style Height", command=lambda: ChangeDimH(window))
  
  mod = Menu(tearoff=0)
  mainm.add_cascade(label="Built in", menu=mod)
  mod.add_command(label="Style 1", command=lambda: ThwBuiltInStyle(default,window))
  mod.add_command(label="Style 2", command=lambda: ThwBuiltInStyle(default002,window))
  mod.add_command(label="Style 3", command=lambda: ThwBuiltInStyle(default003,window))
  mod.add_command(label="Style 4", command=lambda: ThwBuiltInStyle(default004,window))
  mod.add_command(label="Style 5", command=lambda: ThwBuiltInStyle(default005,window))
  mod.add_command(label="Style 6", command=lambda: ThwBuiltInStyle(default006,window))
  mod.add_command(label="Style 7", command=lambda: ThwBuiltInStyle(default007,window))
  mod.add_command(label="Style 8", command=lambda: ThwBuiltInStyle(default008,window))
  mod.add_command(label="Style 9", command=lambda: ThwBuiltInStyle(default009,window))
  mod.add_command(label="Style 10", command=lambda: ThwBuiltInStyle(default010,window))

  
  if EscapeKey == 1:   mainm.post(event.x_root, event.y_root)

def ThwBuiltInStyle(a,window):
    for widget in window.winfo_children():
        if isinstance(widget,Button):
            with open(widget.img, "wb") as file: file.write(base64.b64decode(a))
            ModernButtonDesign(window,widget,window.winfo_rgb(widget.imgcolor),widget.winfo_rgb(widget["fg"]))

    
def ChangeDimW(window):
    text="Type the desired width for Buttons in pixels"
    text = askstring("Buttons Width", text )      
    for widget in window.winfo_children():
        if isinstance(widget,Button):
            widget.imw=int(text)
            ModernButtonDesign(window,widget,window.winfo_rgb(widget.imgcolor),widget.winfo_rgb(widget.fg))
            widget["fg"]=widget.fg
            
def ChangeDimH(window):
    text="Type the desired Height for Buttons in pixels"
    text = askstring("Buttons Height", text )      
    for widget in window.winfo_children():
        if isinstance(widget,Button):
            widget.imh=int(text)
            ModernButtonDesign(window,widget,window.winfo_rgb(widget.imgcolor),widget.winfo_rgb(widget.fg))
            widget["fg"]=widget.fg
     
     
def popMenuMiddle(window,event,var=""):
    popupmenu = Menu(tearoff=0)
    lab= event.widget.cget("text")
    if isinstance(event.widget,Button):
        popupmenu.add_command(label="Button Style", command=lambda : openOnePNG(window,event))
        popupmenu.add_separator()
        popupmenu.add_command(label="Change Text", command=lambda : changeText(window,event))
        popupmenu.add_command(label="Text  Color", command=lambda : ColorButton(window,event,"bfg"))
        popupmenu.add_command(label="Style Color", command=lambda : ColorButton(window,event,"bbg"))
        popupmenu.add_command(label="Style Width", command=lambda : ChangeDimension(window,event,"width"))
        popupmenu.add_command(label="Style Height", command=lambda : ChangeDimension(window,event,"height"))
        
    if EscapeKey == 1: popupmenu.post(event.x_root, event.y_root)


     
def ChangeDimension(window,event,var):
    if var == "width":
        text=event.widget.imw
        text = askstring("Change Button width","Current style width is: "+ str(text)+ " Pixels, Type requested pixels", initialvalue=text)
        event.widget.imw = int(text)
    elif var == "height":
        text=event.widget.imh
        text = askstring("Change Button height","Current style height is: "+ str(text)+ " Pixels, Type requested pixels", initialvalue=text)
        event.widget.imh = int(text)
    ModernButtonDesign(window,event.widget,window.winfo_rgb(event.widget.imgcolor),event.widget.winfo_rgb(event.widget.fg))
     
    
def changeText(window,event):
    text=event.widget.cget("text")
    text = askstring(text,"Change "+ text + " text", initialvalue=text)
    event.widget.config(text=text)
    event.widget.imw = event.widget.winfo_reqwidth()
    ModernButtonDesign(window,event.widget,window.winfo_rgb(event.widget.imgcolor),event.widget.winfo_rgb(event.widget.fg))
    
def ColorButton(window,event,var):               
    color = colorchooser.askcolor()[1]
    if color is not None:
        rgb = color.lstrip("#")
        red = int(rgb[0:2], 16) 
        green = int(rgb[2:4], 16)
        blue = int(rgb[4:6], 16)
        event.widget.red, event.widget.green, event.widget.blue = red, green, blue
        if isinstance(event.widget,Button) and var == "bbg":
            ModernButtonDesign(window,event.widget,window.winfo_rgb(color),event.widget.winfo_rgb(event.widget["fg"]))
            event.widget["fg"]=event.widget.fg
        elif isinstance(event.widget,Button) and var == "bfg":
            ModernButtonDesign(window,event.widget,window.winfo_rgb(event.widget.imgcolor),event.widget.winfo_rgb(color))
            event.widget["fg"]=color
            event.widget.fg=color

            
def openOnePNG(window,event):
    imagefile= filedialog.askopenfilename(initialdir=os.getcwd())
    if imagefile != "":
        event.widget.img = imagefile
        ModernButtonDesign(window,event.widget,window.winfo_rgb(event.widget.imgcolor),event.widget.winfo_rgb(event.widget["fg"]))
        event.widget["fg"]=event.widget.fg

            
def openPNG(window):
    imagefile = filedialog.askopenfilename(title="Choose Button Image File",initialdir=os.getcwd())
    if imagefile !="":
        for widget in window.winfo_children():
            widget.img = imagefile
            if isinstance(widget, (Button)):
              ModernButtonDesign(window,widget,window.winfo_rgb(widget.imgcolor),widget.winfo_rgb(widget["fg"]))
              widget["fg"]=widget.fg
                
def InterfaceColor(window):               
    color = colorchooser.askcolor()[1]
    if color is not None:
        for widget in window.winfo_children():
         window["bg"]=color
         widget.config(bg=color,activebackground=color,activeforeground=color)


def WidgetsColor(window,var):               
    color = colorchooser.askcolor()[1]
    if color is not None:
        for widget in window.winfo_children():
            if isinstance(widget,Button) and var =="bbg":
                ModernButtonDesign(window,widget,window.winfo_rgb(color),widget.winfo_rgb(widget["fg"]))
                widget["fg"]=widget.fg
            elif isinstance(widget,Button) and var =="bfg":
                ModernButtonDesign(window,widget,window.winfo_rgb(widget.imgcolor),widget.winfo_rgb(color))
                widget["fg"]=color
                widget.fg = color
                

    
def HoldWidget(event):
    if EscapeKey == 1 :
        widget = event.widget
        widget._drag_start_x = event.x
        widget._drag_start_y = event.y
    
    
def DragWidget(event):
    if EscapeKey == 1 :
        widget = event.widget
        x = widget.winfo_x() - widget._drag_start_x + event.x
        y = widget.winfo_y() - widget._drag_start_y + event.y
        widget.place(x=x, y=y)

def bindwidget(widget):
    widget.bind("<Button-3>", HoldWidget)
    widget.bind("<B3-Motion>", DragWidget)

def EntryReturn(*textboxes):
    def onkeypressed(event):
        cur_entry = textboxes.index(event.widget)
        next_entry = (cur_entry + 1) % len(textboxes)
        textboxes[next_entry].focus()
    for entry in textboxes:    
        entry.bind('<Return>', onkeypressed)



def MakeTable(dbfilename, tabname):
    if not os.path.isfile(dbfilename):
        conn = sqlite3.connect(dbfilename)
        cursor = conn.cursor()
        cursor.execute(f'''CREATE TABLE IF NOT EXISTS {tabname}
                        (widget_id INTEGER PRIMARY KEY NOT NULL,
                        widgetname TEXT,
                        widgettext TEXT,
                        widgetbg TEXT,
                        widgetfg TEXT,
                        widgetx INTEGER,
                        widgety integer,
                        widgetimage text,
                        imw integer,
                        imh integer,
                        px integer,
                        py integer,
                        imgcolor TEXT,
                        widgetb64 TEXT,
                        windowbg text)''')
        conn.commit()
        cursor.close()
        conn.close()

def AddData(dbfilename, tabname, data):
    conn = sqlite3.connect(dbfilename)
    cursor = conn.cursor()
    cursor.execute(f'''INSERT INTO {tabname}
                    (widgetname, widgettext, widgetbg, widgetfg, widgetx, widgety,
                    widgetimage,imw,imh,px,py,imgcolor,widgetb64,windowbg)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)''', data)
    conn.commit()
    cursor.close()
    conn.close()


def RegisterData(window):
    MakeTable("dbFile.db", "WidgetsTable")
    
    for i in window.winfo_children():
        if isinstance(i,(Button)):
            window.update()
            data = (str(i),i["text"],i["bg"],i["fg"],i.winfo_x(),i.winfo_y(),
                    i.img,i.imw,i.imh,i.px,i.py,i.imgcolor,i.b64img, window["bg"])
            AddData("dbFile.db", "WidgetsTable", data)
    window.destroy()



i=0    
def loadwidgetsprop(window):
    global i
    if os.path.isfile("dbFile.db"):
        conn = sqlite3.connect("dbFile.db")
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM WidgetsTable")
        rows = cursor.fetchall()
        for row in rows:           
            widgets = window.winfo_children()
            window["bg"]=row[14]
            window.update()
            if i  < len(widgets):
                widgets[i].place(x=row[5],y=row[6])
                widgets[i].config(text=row[2],bg=row[3],fg=row[4])
                widgets[i].bg=row[3]
                widgets[i].fg=row[4]
                widgets[i].img=row[7]
                widgets[i].px=row[10]
                widgets[i].py=row[11]
                widgets[i].imw=row[8] 
                widgets[i].imh=row[9]              
                widgets[i].imgcolor=row[12]
                ModernButtonDesign(window,widgets[i],widgets[i].winfo_rgb(widgets[i].imgcolor),widgets[i].winfo_rgb(widgets[i]["fg"]))
                window.update()
                i += 1              
            else:
                i = 0
        
        
        cursor.close
        conn.close()
        os.remove("dbFile.db")
   
default    = r'iVBORw0KGgoAAAANSUhEUgAAAHgAAAAoCAYAAAA16j4lAAAACXBIWXMAABYlAAAWJQFJUiTwAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAARQSURBVHgB7VxLctswDLUVZu8b1N3FO/cEbY6QE6Q3a3qCHCHNCZquMtn5CD6AkxTQCJlnDMCP5Nj0DN8MIpkiQYiPgKAPM58Bnp+ff1xcXNzO5/N113ULFtpn+aiD+w3Hx/v7+97+IJu3t7deXl9fH1er1Z3U6dkiYpdE5j3Jmgie0XbGWyaT9z1SU2Rz51xHjJoyOUp0YF2xQds0pv9DTW7LJoZlr9VWb4nYXohckQ2VXxPRmzAofiBCl0yqCBMrIh02760DmlzeMrHCFcmSft9TlW9z8t6fIYRfJDMR8WBpwNsSoNfGyqbom1Lvs+pPOcdSQHje8+DdbodyHS4vL78zgUKu9uJhRjTvrQxILvPE5BrHbzlELzEk8754cSO4XgjBzBGTjOXCI+2vA8drJBeTLCRYAxMCa6vr6bZijNZtJVOWPq8frdsKmVbS5W2tgU3p8cbJO09Lp2eHlUVjm4HYnnS+AwpE4hITKi0x79XJl5WMeYToerEytkMPgjVgWCZtUpHHsx37tO4EPGJ0f7kT3KtjjSWeMyZcQi7c/SyCDBYSisTGbpMsWIPqnXwJcokqaVPS7xT9KQeJ1UFI+MXfg6d+hGrkkp9jBLzGehIzQs/C0ow7dUJW37GwlfLskr4xCljhP0fH2L51nwxrDJAjyyGDVl46U0tnYQlyZn6sXupYTt9eqCzRMbXv0vpIfFeqrKEO5E7yLnZQcKyb94Z8eJxoLt0Lpo7tDXUhdglB9AR7s6F5bv1IcRQN0c1z60eKI9eD8Sa6oV6M9uDmvfUj5z57L8lqpJ4PYuTuPbLVjaz9hvMCcudeg71HgQ11IDfa7l2Dc5/vNpweuU6358GpV3IN9SD7VessghaazwvWxxLtQccZI+cJZBdr3Dy4buQ4YFYW3VAfNGeeM0Y9uKFe4NclMXS57xUb6oP3DgGR5cHNm+tD7vdeHTZAwXLcjjXmM5BjW27f+hPUWaSPse/PPR0l4+PZpu0XCZpYXQm/7ptKcu6s89prW9AmK+nIvU7pdgz5BBXLSkj2znUqyRaJKLIYTeoxwVsqXOABWQrBBsqJTiHXMnBK29yoMtXmU7dP6bVIxd+8DfRnSz8WuELN+vwyBs/LtQdYx71jXh+6DPVbbayBifXv2aS/iS61xes3ZkuqjSZTBMr79cFbTS6uVMslueG40B4ri79lf+B0E3a73T8ib62J5Iayyt9629RwOugQjcQqkjccou/ox61FroSj5sH1QXswLgCHf+Xw2LP28vLylwhd67XB3vrgHLK9LPLY0Fm3VzZWb6z8kGNgXX8ZeO1Vq/w3V1dXX8NQ6YYaPJAsxXs1uak3Tl7yEYOXmKSSs1K9sfapBFH0lCSMOfp1HUTOWCLBxnX4icpuet3YiP9fBxHL/0rpC68bpk6WYoA24tDeaWWz1rFY+1gmnGvvoTxwjJ5YVPDqD7e5W/q5JXKfSH6vVqs/Uuc//73GWeh0gQoAAAAASUVORK5CYII='
default001 = b'iVBORw0KGgoAAAANSUhEUgAAAHgAAAAoCAYAAAA16j4lAAAACXBIWXMAABYlAAAWJQFJUiTwAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAG9SURBVHgB7dzPUcJAFAbwD7x4UypgrcASzNGbdOCWYAfSgXQgHaAVoDeP2sFy9AY3b/oejwDOBBN1BrJvvt/MN/5JuOSbbJhkNx00U0iuJB1JXzKTnID2SY/9HHb8k+RR8oR/ipKx5EZyCmqLgE03EX8QJBPYmUvtFiVTWGeNXEtG4BmbE+1qKBnU7ThY7Uh5GsJO0EoBLNcDHX1D1QYdxzks5087nJR/HK1+Rsmb5AWUuw/JO+wL8mv5z3uQN8tO9QwuJAtstU0unEmO9ZedF2XKml6LR11sbn2RL3pbE1rwDORVXwvmQwO/UhfkWY8FO8eCnWPBzrFg51iwcyzYORbsHAt2jgU7x4KdY8HOacELkFef5fNg8mmuBSeQV0EL1kVNnC7rT5DMdNKdTrO8BKfMeqOrVNadctqsP+tps6oHG6YTyIMIm2v3bSq0LnfgtTh/2uG0akOQ3IFyN8TWPPftO1kJtj7pFpQr7U6H5fTTToPVjhyu87FcxYBfvM4hwMbxxh+ggylg359C1cZOzYej5ELyDHujSwK1gZ6xUXIO62a8a8e6gksFbOjmK5QORx8KlcdfPaDBa5S+AATWQG3KJxHIAAAAAElFTkSuQmCC'
default002 = b'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'
default003 = b'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'
default004 = b'iVBORw0KGgoAAAANSUhEUgAAAHgAAAAoCAYAAAA16j4lAAAACXBIWXMAABYlAAAWJQFJUiTwAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAABLvSURBVHgBtVzdqiZHFd3V3WfOTCaeJGP0xkwcEYxPIOJFJDcKYS4EISCEhIF4Z/IMeYJchUB+IM/hhQqC4o0MIkbCRCZgnEiimZPEmTNnTn9d7l29165V9X0zk8TY0HR3dXX1d2rVWvunqk+S/9P20ksvnTk4OPhGzvmRzWbzyDRNo55Py7Ic6O2TlNKsxwd0H7R8sOM4jknvj3ovcTmOWmznVmewzY5abu1G/bRuA8qszp3K7Fx3OyZ/R0IbehQ71038OezSnYs/x9eZ71tzXiZ0LOe2ra9bj1RnoefKNZXFEff8+cX3cm5bki9xe/PNN08fHx9/T9/1mHbMQ/qSd/f29q7r8SMt2+jRwBvneVYsR+voSVaArFNHHQjlvnd2GRCygjAa8Kjn13Ze7lu57lHe1/PBYNcDDw4HvQwoGizCg4F2WfswpR2A25b82QDQxpB1PF0v3k5ef0K5tB+0EMAbgOfPGmBWtvgziz+zwbO6bbQ/NwGq1tdH1+fkS9heffXVb2tjP9bT+/SFb586deqq/VDdCoDK3sFAtXPreAbWQNVnClAMMNUb6DmAVNrCPQc3zglgBn8A+Lb5u5LUARbM7hgu3k4CwMBLOoD9mHccyzkAtms7J/ZunHUBqAHk5+W+AensLMDKOhA2Xmfpy+zc/sxJ/oeNgD05ffr0H3UUfQRQT05OTun15IwdwFww1STbgNIfEcwlEANAYzHaABPB1g7MANrKvO2QcTDXzvV9DXt9EMAcpB5kMBbgkhzHEcx1wmYHUYiZ2duErBa62U+UdSBlZ53QQEreDtRBjMB2qX0rJA5QhRhIupX3fiGAX3nllYcUoJ9pA2f0+Ctl7A0DVvd9Z8hkwAEIll8Gsj+iLkl03EcdYjdYOwEc1HVQCpAEegHZO3l08zTQswzo0EuxDwJ0vhDAGZ1PWzDVgQ12+jPGXgMX7wMwwoMJ72LZd58AQAPb2Bzc8owdPzfAb7zxxuPacT/QF/1+f3//mjhbyeZNxI7RO7rIMAMNQPnoQAZo3AYD7uUD3WuAxC4k0WAzyXmigcRgA0wAy/YWPRrgOjDZwc/e6YOXgclgrThLBxoABpq9z2Q5GegOYGEkgVvas3IlVTla2fpoGSxR1+W+2OnPZYNVkn+iD55Xxv46k9PkzJgAMo4AU4jFJrn2B6nkTv6HTWxTAXReHSxm3+gdB3s9+fUIEGlAMJDBWi4Dcx3EkQBn73qgPx9gNx4yOlSqrWWvl5mbyVaGLfWyDZf5+dzZX4s6Fu93OF4benYWssP+/PKZGGwhz9mzZ3+hD1xT1v7SQQMjixzbTjZ2Mi/ZgTXpbljKrO0lWCp7JwYcAIGF3E7H3qIAbnt5AICt5QgAXW0CUGLsQKBCDtmRKlJrFyTBcJoWAE8sbsYE7QIb21RYtyYM6gZM3HPAMwEcYdM9AVZJPqcAPa+ycFlDnitadEolOTrdpNc6yMAFO62DwV6A7p0aHjRLsj0HBna2OeSeGDx6+0MP8g6mjgAa4IKtANmfD3DJDu9yqMKRcvAGAnLpwE0EhNXbCA0QakMIOGEA3QlrBo5LcqgBnwNsZ/29vWgDVys/r2z8kz74jp7vWccYqMZQA4+cowlesYHItjaRc8XgQJ4TecEAyMtCisWZTfUnlubOFo8EaM/cgcrDsYKTZb+NAA3adQwr3i6Y4iglBwD17V5xilL1jMVBLFUAKPbOrjZsxbXHuWDsxr1wxL2lrmJTvGjdP7krwFrh58raP+vp3/R8L3vIYiAai8Fe2Eu7tnAG1yTNGBCwmxOHO2ArgVOA7ZhfQGbwrF2EPvRcM2Ck2lvYWbbD8KZ7eQ7W5ooMZ6MGByM5IAABHnHyARBOGdnpcKCEpBd1IOveJpSh2FxjJNgJ24yjuTWwz+KJEAP6jgC/9tprP9XKH2jFd3Tfcwke0fFsP4USERgEcLpgE5HocDnmTFVhI3m4AIbLIjECOYe823uovXD6EoVLsu1lI8FhGPT2N2QZIYkzEB0fcuzlS652mlkpQiyVKu8At5HaRE5TWhMd2UENZiJLZUfLXAHIvHrgi9dFG9rl826Jfv3117+vDzyi3vJvtWKxuQyiHS2J4WwpHax1wv4CtNw6Sybvlm8ekQyRysaxGxSN3UYbufWUx25AxGCSHTFxXjNRk1T7G7ntXNOSwTowLXvIIp0D5cc+P80xK8tsk6VysBcCj52lxQfQ7HVLKpIYHGlKqwNGS81iBbv1eluiX3755a9qhR+qU/UHSilGxzvQE5ynHYCPxKp43tODk4dKJRmC+Di33m8j3T5QGtAhzzxAZIdswzFj6ScGN8wFsC7ZjQcs7i07qJnllzY20mEz2QESSj2Sk4Q8M5gLMAuwJrP2XjAW98VTkbYRo/G8hUy7wyS1uRf1wb8rwLe0wp5OHiBVWNKLaY1DR8Sw3pEcy4JdIeVePlGnFxZnSlxIx2QhT1s6D5wGBMs8D4w+lOLrmETIlLHKnRNFoC1dGQO6FfuSBPeeLXu4HPs28a+XAygAWpjq90q8q4DOBq4d/b2z2108b4Pm3w3Aane/o4Vf0wZ/p5KrWO+NnnI0J4nDkQDAtky2ObVJijjPFAL1A4BkN7xqZ3pIvR+beDpX+wxbfKdJifCovQ6kuaQfyRmC7Vy8Q3sPOHcACzOUwOuTFyyjC0AiGZ4hy+YsCSUuUAcgY0DYuYEL4MkWz34+699/owFYCy8pS3/jHT3dvn27dJwBjQ6HFAN0O0d4pE3sWZgxrn5643C5LI+wxQ7U1Ekve9KNWRBiKNvrLtmxlUzJ5AdI9bRjCtCQcxsr8EodTY5dWXKZnSGrstpUyG/sQrYxtdkngDJzWQc87CkDGcB7nGxzrxt6r5VvFEdj32EArBMIj5lRVim+ZV4zZnm04sRTfW57J2dtgAiAGFzvdKQXG2bzNcl0I+O5etwTsbmR8ly944bhUm2uDai01KlHAF22ZU3Mg4GwyXNqp+9CalOdygvAXA5nArYBbQeIeG52e1tAActltZ8BGmSawyRc989iQNhzjz766McBsBb+SLG0mHdyx4c7G0mGsMeZYuJehp3RW6AQ07hsyrs948a2GlBuM5v39TLu+3AHeQ9wHUzYRSQfmlUTPftkldZgEa6dQTOAFpdcdHTPQsgt2cu5c7K43XgGQPIgyjUubtrQZz584oknSuLBJhEe1hu2vOav5ljBznZABcNkdbLA6CYh4XZ4osl7ltqpA5pj3B64aUdyI87B3h1A9uD3702pWznhDA37yGAK2Teyhw1TrK7b3ghtHKSZn3fwS30lUzAOjpKVk9zOfA8AYqA42I08+/uLA6bm9T3xzrPtu7q/q/se5459AgH2szAbeWgMAMS1fdKDgJtWUzHEpMMusBkYaUMzMHJLUcDYvO2Fc/ss44PL7LyLnQxsosyRS2nPSB4Ec2dnow22nfwecpSiHa874zcyazFQ+rYx6AA8wNccxnUG+HGt9BcDwVmz5x04ehkmFCZ3ptCZE1ZrMFvhkLn9G5zRsToj1bQkpyTZTjchELM0UyarY2mEXzRo7N2RM7aRbX88GAbWEXujA6WznQxuql5t4wmTDS67vmuGDPeDAG2SBJtj1DtTGxps5RqA228De8F0vFPB/fDpp5++VQBWeb5Pjw+b12XZKADlnYPEQ0keAGiSyli5QZ0+AcAdQESOOtWMVQ9s2Mxcs2AxCFKdfRo6OY5pv0RLZbwzxSUwe942QhWAyvKc2nVNzOywsanOyc6pnYudiZ1zpxALDY4AkpQCch/nANGTHjEoTOINTGvDzu0ZS03673vP/+aSI/6mIv4+wBVybNhL5pCGwcxdGMN7qnO4jWRK6+lOxLY+1h04p+3qws5SrLhwUO1vyg4umFPKDGxKMGAmpglZhBwnllGyvQtYzaDp8QTgY3DQQGhCJGSfEMP6O8JWs/SjLphtABuosN8YCK5K+N1Hyt5PAmCNcS9opU9NlokdSBTsIWNFyYVgEbOzv06UkRIRHhCFpR4TA6xmMoAkPxbFEbv7pTTigCVP74kDKUA71XwvEgWYYovEAcDtGDy79C1gWJeIaCQ5kwecOu+Z7bmpZXanSap8l/fhGctAwonyXHSADjZnCrPSuhbLJhjeEdqsw7+ulT9xpiFXC4keucNhL0kah7wjKyXVCerPI/GQWwcrJi0KFWV70buzVzpQeQIgQE51PXKTD07Ve+7ThJyEWFhepZNxlnOA4+9vWJlax40BZbvehE3krTfOl5CDBXnGc5BqOx4dHf3rueee+7QBWG9+Sx96W2qI08y9EnCRxGDW5d0pR8zm8LKZEqKQrU0diEgJAkzkh0s6cfCJdGMosRLnPI+7NYMjNHsjbc53IUYGo7lMWglvgCOW9hMFjf3EkW2tO3wAfeG0Y3LvGe838GCT8Rv82UJZu69zBrcODg7el24zcI4YXA9lGnA5HZgpXUhS3ix+63LOvMCtSC5NAMApYrD7lYuL30dCf4OB4x3Kk/JC9eITj9SlFwF2rgn8RbbzxZvOnnLSoQmHpJNO1M01nl34KNVDbxy17LNGrCD0G2NglXleBRV19NraufbUU0/d3gXwVwAYwDUDiXg475itYcbm3E7FyWpfB2a6tCsZ+0XjQ2dP10I1/QutmpA61TZAaqXOwYofMZUXzHX5ZIlGGrK3v41Md0A2DO3qbshOcrqwsa3O8pjDJXsdttc/PwlgMViMrXg3JNnaMvaqD2XlH166dOlQdmwm0ZDFkNhurhcJAnz2EV8GSE0eQFabReT91JxI85EXbG35IXl7us7evaA80XpjvwZpm68HhGZ5rNysitDUnbSrJzjPzBK89MBKtYMBCAPq0hw2OnUTBj4gIb0LwqPkzhHA1r6dHehguXnRQrG5OWBnzpyxbJVd33zmmWc+kDtsk0tc5JUBlIM58LUzOhGQsWrCOx8zNZiKK6EMvzDR9JsD06xZAmu9U4ZUHaZEQCZqj0ENOYadTrSElNjZpycbYKXK+IYzSVSHmdmslxLKgqXqPDUJFQPMwh9IP9r3OHcrHEK7YP3Zs2fN5loTx+fPn/+H3GUz+X0g1RWMvMSUJTjso6cdMRCwpjdWRziteAI95e0lqOXSj0sHPOLUIdcVFIkcrWZwCHnTaA/Apups7WIrs3nX4nMOg5rpQYQlDGgv39LO+cYx05wtpvsI3MJOZ26xtSbBcKh8MMyas7Cy4wsXLlyzCQW5G8ALfZQl1c72EsupP45BY02T75hfTQBF6kdYwba8LlQbvNOGTorxvc8i9I3OGo7HAAlb69N9Eevi3FnPa542OwBuVibmGuJEHfKQw5ZKt3SGjwAuUcaKvWdIMexr8nldgEqpzQKuUBilCSkw+ejq1av/fPbZZxe5x1Zy0ataDM33OW5HB4Dl9QcGlcHO9au8UhFHodAl+/c7QqEMAVmAk3bVf6xujMZS8/2t2djea0ZKMhwsAiz30gwQqdMXtrlSV2owS7c+FWEZ78Oi1NlyDp+MpWCvecPmGffSjAFkNvfcuXOHFy9evC6fcZvEvV7xEAaS62UowgfSvHyFpVf8GJ3vXjCcnYEYVaSXWB3xa2696eQsjeX/g38eKbR0hhjK8a49kp19ESKBncs6+hqGelnjhOU6mbDlhBF44RljMNCkQaxX7sMnrzv7yotIYJCEl3ea02XnanNP7r///usK7n/kc2wT0HLGNYyULoQBGLkuNd3aiJnNElJ09LJ+xzN6Z2Vp88mJpDpondr1UI2nTNfNZP3QLXzjJAe+hhdiK7ztVLNMseKRpVt2hE8+WABiLJy7E4NhwwEs3kPZs1K2v79fnCmV6ptXrly5/uKLL97V3u4EOJNXTDIbnU2d3IBKxNo6lyq94m1HDOumQHyQRBYKjMZ9bLCxBGh8ZcAA4zzXRemxeDzRxH5qveUAP3Xes1T5bWSYQcc1T9sJTUVmim3NeQJDDUhPTsTgsHKTa7Ozxloru3nz5tHh4eHHL7zwwrF8wa0sBM91ZT7/E5IGUE/iBzsdpFil784F/nEJLzctoAFLV4oGWAyi+hPgOJc4FoBKB2YzJUjnsfYYa4qlDY14RgneKdYeB1vhKLHTRACGjOY6IxRZKpNdobDGVItl2LxgkuNwnrQcztbRgw8+ePjkk09+YWAD4Lx6qIL49W6VHWThzoXTROAskHuRYDfkPiYEcjvNF1Lsg6Zcom1INN5Hx7C7qYZEIccehvTgBkOXdUkKOjo8bQwOHwiQzgVOUVodKSQ8wgu3cEbltBytPkC097HjhHID1kAd1mnBm5pL/vTy5cs3VIrv6R1/1m1ysJjBQVHvRAFQQt/T5DXrVRIT5LHavcE7fahNxMdbwdhdwFqhgettii3F3gGqSOtILSnFf5dpnC22qzQgQnqRScr+OUgPbq6OEgZBOGUAH6EMAMM0H9oyMA08BTJ7G/ZBgTlMJzdu3LilSYvjt9566/jLBJW3/wITdEjL4T0xIQAAAABJRU5ErkJggg=='
default005 = b'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'
default006 = b'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'
default007 = b'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'
default008 = b''
default009 = b'iVBORw0KGgoAAAANSUhEUgAAAHgAAAAoCAYAAAA16j4lAAAACXBIWXMAABYlAAAWJQFJUiTwAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAFkSURBVHgB7ZvBTcNAFETH4cIt5sbRHZAjR5dACXSA6CAdQAeICkwJoYPQgTvA3Lg5f7y7kuWkAGc0TxrFu1nl8vQdr7W/wjl15CnyEKnyeIhsYdYE3Qz5eoz8RA6RfrmoQJEveY4Lj7MfMOunjTxHfiOvlxZ0kR3MtdMguaznk2/5C6MBC3XPiw2SWNruYVQ45s/6BumB6hsWrMgjK5jlfIBRg1W8o+ARRpFpB0TBFYwqWwr2Cwxdhg2MMncWLI4Fi2PB4liwOBYsjgWLY8HiWLA4FiyOBYtjweJYsDgWLI4Fi2PB4liwOBYsjgWLY8HiUPAfjCqjT1VqM52qdIuoLlU5+F7DSMLms/vILdx8pkYb+ecFq3cPo8ZHpJn/B7u7X4cGaXfUlwlWcQd3+SvAQu3KYNlZ+I60bfqEe4avCRYoxbZ5TI/TnflS62iTF85v2d4rrwvKozt6KS+q2PD9hcW29wQ9QizD/yDWcQAAAABJRU5ErkJggg=='
default010 = b''


