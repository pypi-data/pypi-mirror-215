# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chiral_client.conductor_pb2 as conductor__pb2


class ChiralOrchestraConductorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AssignTask = channel.unary_unary(
                '/chiral_orchestra_conductor.ChiralOrchestraConductor/AssignTask',
                request_serializer=conductor__pb2.RequestAssignTask.SerializeToString,
                response_deserializer=conductor__pb2.ReplyAssignTask.FromString,
                )
        self.CompleteTask = channel.unary_unary(
                '/chiral_orchestra_conductor.ChiralOrchestraConductor/CompleteTask',
                request_serializer=conductor__pb2.RequestCompleteTask.SerializeToString,
                response_deserializer=conductor__pb2.ReplyCompleteTask.FromString,
                )
        self.SendData = channel.unary_unary(
                '/chiral_orchestra_conductor.ChiralOrchestraConductor/SendData',
                request_serializer=conductor__pb2.RequestSendData.SerializeToString,
                response_deserializer=conductor__pb2.ReplySendData.FromString,
                )
        self.AcceptJob = channel.unary_unary(
                '/chiral_orchestra_conductor.ChiralOrchestraConductor/AcceptJob',
                request_serializer=conductor__pb2.RequestAcceptJob.SerializeToString,
                response_deserializer=conductor__pb2.ReplyAcceptJob.FromString,
                )
        self.JobStatus = channel.unary_unary(
                '/chiral_orchestra_conductor.ChiralOrchestraConductor/JobStatus',
                request_serializer=conductor__pb2.RequestJobStatus.SerializeToString,
                response_deserializer=conductor__pb2.ReplyJobStatus.FromString,
                )
        self.JobResult = channel.unary_unary(
                '/chiral_orchestra_conductor.ChiralOrchestraConductor/JobResult',
                request_serializer=conductor__pb2.RequestJobResult.SerializeToString,
                response_deserializer=conductor__pb2.ReplyJobResult.FromString,
                )
        self.CompletedJobStatus = channel.unary_unary(
                '/chiral_orchestra_conductor.ChiralOrchestraConductor/CompletedJobStatus',
                request_serializer=conductor__pb2.RequestCompletedJobStatus.SerializeToString,
                response_deserializer=conductor__pb2.ReplyCompletedJobStatus.FromString,
                )
        self.ProcessingJobStatus = channel.unary_unary(
                '/chiral_orchestra_conductor.ChiralOrchestraConductor/ProcessingJobStatus',
                request_serializer=conductor__pb2.RequestProcessingJobStatus.SerializeToString,
                response_deserializer=conductor__pb2.ReplyProcessingJobStatus.FromString,
                )


class ChiralOrchestraConductorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AssignTask(self, request, context):
        """assign a task to a player
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompleteTask(self, request, context):
        """accept a task result from a player
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendData(self, request, context):
        """send dataset to a player
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AcceptJob(self, request, context):
        """accept a job from an end user
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JobStatus(self, request, context):
        """report status of given job ids to an end-user
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JobResult(self, request, context):
        """send result of a given job to an end-user
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CompletedJobStatus(self, request, context):
        """report status of completed jobs to an administrator
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessingJobStatus(self, request, context):
        """report status of processing jobs to an administrator
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChiralOrchestraConductorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AssignTask': grpc.unary_unary_rpc_method_handler(
                    servicer.AssignTask,
                    request_deserializer=conductor__pb2.RequestAssignTask.FromString,
                    response_serializer=conductor__pb2.ReplyAssignTask.SerializeToString,
            ),
            'CompleteTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CompleteTask,
                    request_deserializer=conductor__pb2.RequestCompleteTask.FromString,
                    response_serializer=conductor__pb2.ReplyCompleteTask.SerializeToString,
            ),
            'SendData': grpc.unary_unary_rpc_method_handler(
                    servicer.SendData,
                    request_deserializer=conductor__pb2.RequestSendData.FromString,
                    response_serializer=conductor__pb2.ReplySendData.SerializeToString,
            ),
            'AcceptJob': grpc.unary_unary_rpc_method_handler(
                    servicer.AcceptJob,
                    request_deserializer=conductor__pb2.RequestAcceptJob.FromString,
                    response_serializer=conductor__pb2.ReplyAcceptJob.SerializeToString,
            ),
            'JobStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.JobStatus,
                    request_deserializer=conductor__pb2.RequestJobStatus.FromString,
                    response_serializer=conductor__pb2.ReplyJobStatus.SerializeToString,
            ),
            'JobResult': grpc.unary_unary_rpc_method_handler(
                    servicer.JobResult,
                    request_deserializer=conductor__pb2.RequestJobResult.FromString,
                    response_serializer=conductor__pb2.ReplyJobResult.SerializeToString,
            ),
            'CompletedJobStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.CompletedJobStatus,
                    request_deserializer=conductor__pb2.RequestCompletedJobStatus.FromString,
                    response_serializer=conductor__pb2.ReplyCompletedJobStatus.SerializeToString,
            ),
            'ProcessingJobStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessingJobStatus,
                    request_deserializer=conductor__pb2.RequestProcessingJobStatus.FromString,
                    response_serializer=conductor__pb2.ReplyProcessingJobStatus.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'chiral_orchestra_conductor.ChiralOrchestraConductor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ChiralOrchestraConductor(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AssignTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chiral_orchestra_conductor.ChiralOrchestraConductor/AssignTask',
            conductor__pb2.RequestAssignTask.SerializeToString,
            conductor__pb2.ReplyAssignTask.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CompleteTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chiral_orchestra_conductor.ChiralOrchestraConductor/CompleteTask',
            conductor__pb2.RequestCompleteTask.SerializeToString,
            conductor__pb2.ReplyCompleteTask.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chiral_orchestra_conductor.ChiralOrchestraConductor/SendData',
            conductor__pb2.RequestSendData.SerializeToString,
            conductor__pb2.ReplySendData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AcceptJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chiral_orchestra_conductor.ChiralOrchestraConductor/AcceptJob',
            conductor__pb2.RequestAcceptJob.SerializeToString,
            conductor__pb2.ReplyAcceptJob.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JobStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chiral_orchestra_conductor.ChiralOrchestraConductor/JobStatus',
            conductor__pb2.RequestJobStatus.SerializeToString,
            conductor__pb2.ReplyJobStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JobResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chiral_orchestra_conductor.ChiralOrchestraConductor/JobResult',
            conductor__pb2.RequestJobResult.SerializeToString,
            conductor__pb2.ReplyJobResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CompletedJobStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chiral_orchestra_conductor.ChiralOrchestraConductor/CompletedJobStatus',
            conductor__pb2.RequestCompletedJobStatus.SerializeToString,
            conductor__pb2.ReplyCompletedJobStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProcessingJobStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/chiral_orchestra_conductor.ChiralOrchestraConductor/ProcessingJobStatus',
            conductor__pb2.RequestProcessingJobStatus.SerializeToString,
            conductor__pb2.ReplyProcessingJobStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
