Metadata-Version: 2.1
Name: pynssp
Version: 0.1.0
Summary: A Python package for the National Syndromic Surveillance Program (NSSP) and its Community of Practice. A collection of classes and methods to advance the practice of Syndromic Surveillance.
Home-page: https://github.com/cdcgov/pynssp
Author: Gbedegnon Roseric Azondekon
Author-email: gazondekon@cdc.gov, roseric_2000@yahoo.fr
License: Apache Software License 2.0
Keywords: pynssp
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
License-File: AUTHORS.md
Requires-Dist: pandas
Requires-Dist: cryptography
Requires-Dist: pillow
Requires-Dist: scikit-image
Requires-Dist: matplotlib
Requires-Dist: statsmodels
Requires-Dist: scipy
Requires-Dist: datetime

# pynssp <a href='https://cdcgov.github.io/pynssp'><img src='docs/_static/logo.png' align="right" height="139" /></a>

<!-- badges: start -->
[![pynssp Pipeline](https://github.com/cdcent/pynssp/actions/workflows/check-standard.yaml/badge.svg)](https://github.com/cdcent/pynssp/actions/workflows/check-standard.yaml)
[![pynssp documentation](https://github.com/CDCgov/pynssp/actions/workflows/gh-pages.yaml/badge.svg)](https://github.com/CDCgov/pynssp/actions/workflows/gh-pages.yaml)
[![Project Status: Active - The project has reached a stable, usable
state and is being actively
developed.](https://www.repostatus.org/badges/latest/active.svg)](https://github.com/CDCgov/pynssp)
[![Lifecycle: experimental](https://img.shields.io/badge/lifecycle-stable-brightgreen.svg)](https://lifecycle.r-lib.org/articles/stages.html#stable)
<!-- badges: end -->

## Overview
A Python package for the National Syndromic Surveillance Program (NSSP) and its Community of Practice. A collection of classes and methods to advance the practice of Syndromic Surveillance. This python package serves as a Python alternative to the [Rnssp R package](https://github.com/CDCgov/Rnssp/).

## Installation

### Stable release

To install `pynssp`, run this command in your terminal:

```sh
pip install pynssp
```

This is the preferred method to install `pynssp`, as it will always install the most recent stable release.

### Development version

You can install the development version of `pynssp` from Github:

```sh
pip install git+https://github.com/CDCgov/pynssp.git
```

## Usage
```python
from pynssp import *
from datetime import date, timedelta
import pandas as pd


## Creating a user profile (token)
myProfile = create_token_profile()

## Creating a user profile (username and password)
myProfile = create_profile()

## JSON URL from NSSP-ESSENCE API
url = "https://essence.syndromicsurveillance.org/nssp_essence/api/alerts/regionSyndromeAlerts?end_date=31Jan2021&start_date=29Jan2021"

## Update Start and End dates in NSSP-ESSENCE API URL
startDate = date.today() - timedelta(days=30)
endDate = date.today()

url = change_dates(url, start_date = startDate, end_date = endDate)

## Pull Time Series Data from NSSP-ESSENCE
api_data = get_api_data(url, profile=myProfile)

## Inspect data object structure
api_data.columns

## Extract table of interest
api_data = pd.json_normalize(api_data["regionSyndromeAlerts"][0])

## Get a glimpse of the pulled dataset
api_data.head()
```

## Contributing to this project
Should you want to contribute to this project, submit a push request to this Github repository and consider submitting a request to be added as a developer to gazondekon@cdc.gov.

## Getting Help
If you encounter a clear bug, please consider emailing the author at gazondekon@cdc.gov and/or [file an issue](https://github.com/CDCgov/pynssp/issues) with a minimal reproducible example.

## Public Domain Standard Notice
This repository constitutes a work of the United States Government and is not
subject to domestic copyright protection under 17 USC ? 105. This repository is in
the public domain within the United States, and copyright and related rights in
the work worldwide are waived through the [CC0 1.0 Universal public domain dedication](https://creativecommons.org/publicdomain/zero/1.0/).
All contributions to this repository will be released under the CC0 dedication. By
submitting a pull request you are agreeing to comply with this waiver of
copyright interest.

## License Standard Notice
The repository utilizes code licensed under the terms of the Apache Software
License and therefore is licensed under ASL v2 or later.

This source code in this repository is free: you can redistribute it and/or modify it under
the terms of the Apache Software License version 2, or (at your option) any
later version.

This source code in this repository is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the Apache Software License for more details.

You should have received a copy of the Apache Software License along with this
program. If not, see http://www.apache.org/licenses/LICENSE-2.0.html

The source code forked from other open source projects will inherit its license.

## Privacy Standard Notice
This repository contains only non-sensitive, publicly available data and
information. All material and community participation is covered by the
[Disclaimer](https://github.com/CDCgov/template/blob/master/DISCLAIMER.md)
and [Code of Conduct](https://github.com/CDCgov/template/blob/master/code-of-conduct.md).
For more information about CDC's privacy policy, please visit [http://www.cdc.gov/other/privacy.html](https://www.cdc.gov/other/privacy.html).

## Contributing Standard Notice
Anyone is encouraged to contribute to the repository by [forking](https://help.github.com/articles/fork-a-repo)
and submitting a pull request. (If you are new to GitHub, you might start with a
[basic tutorial](https://help.github.com/articles/set-up-git).) By contributing
to this project, you grant a world-wide, royalty-free, perpetual, irrevocable,
non-exclusive, transferable license to all users under the terms of the
[Apache Software License v2](http://www.apache.org/licenses/LICENSE-2.0.html) or
later.

All comments, messages, pull requests, and other submissions received through
CDC including this GitHub page may be subject to applicable federal law, including but not limited to the Federal Records Act, and may be archived. Learn more at [http://www.cdc.gov/other/privacy.html](http://www.cdc.gov/other/privacy.html).

## Records Management Standard Notice
This repository is not a source of government records, but is a copy to increase
collaboration and collaborative potential. All government records will be
published through the [CDC web site](http://www.cdc.gov).


# Release Notes

## 0.1.0 (2023-06-22)
* First release on PyPI.

### Features

#### Credentials Management
* `create_profile()` initializes a `Credentials` object from a username and password.
* `create_token_profile()` initializes a `Token` object from a REST API token.

#### REST API data pulls
* `get_api_response()` retrieves a response from an API service using a provided profile of type `Credentials` or `Token`. Used as a wrapper to the `.get_api_response()` method of a provided profile of type `Credentials` or `Token`.
* `get_api_data()` retrieves data (in JSON or CSV) from an API service using a provided profile of type `Credentials` or `Token`. Used as a wrapper to the `.get_api_data()` method of a provided profile of type `Credentials` or `Token`.
* `get_api_graph()` retrieves a graph from an API service using a provided profile of type `Credentials` or `Token`. Used as a wrapper to the `.get_api_graph()` method of a provided profile of type `Credentials` or `Token`.
* `get_essence_data()` retrieves data from the NSSP-ESSENCE API service using a provided profile of type `Credentials` or `Token`.

#### Anomaly Detection and Trend Classification
* `alert_ewma()` implements the EWMA time series anomaly detection algorithm.
* `alert_regression()` implements the Multiple Adaptive Regression time series anomaly detection algorithm.
* `alert_switch()` implements the Regression/EWMA Switch time series anomaly detection algorithm
* `alert_nbinom()` implements the Negative Binomial Regression time series anomaly detection algorithm.
* `alert_serfling()` implements the original and modified Serfling method for time series anomaly detection.
* `classify_trend()` fits rolling binomial models to a daily time series of percentages or proportions to classify the overall trend.

#### Added Data
* `load_simulated_ts()` loads a dataframe of simulated time series.
* `load_nssp_stopwords()` loads a dataframe of NSSP-curated stopwords.
* `get_scenario1()` loads a a subset of the simulated time series data ("scenario #1").
* `get_scenario2()` loads a a subset of the simulated time series data ("scenario #2").

#### Utility Functions
* `change_dates()` modifies the start and end dates in a given URL to new dates, if provided.
* `webscrape_icd()` scrapes ICD Codes from the Web.

#### Classes
* `Credentials` is an abstract representation of a profile object given a username and password strings.
* `Token` is an abstract representation of a profile object given a token string.
* `APIGraph` is an abstract representation of a graph object returns from an API service.
* `NSSPContainer` encapsulates a value or an object to store.
