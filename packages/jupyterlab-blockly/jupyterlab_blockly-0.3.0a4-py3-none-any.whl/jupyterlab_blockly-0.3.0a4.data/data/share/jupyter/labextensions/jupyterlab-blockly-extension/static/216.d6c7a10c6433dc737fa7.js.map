{"version":3,"file":"216.d6c7a10c6433dc737fa7.js?v=d6c7a10c6433dc737fa7","mappings":"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","sources":["webpack://jupyterlab-blockly-extension/./style/icons/blockly_logo.svg","webpack://jupyterlab-blockly-extension/./lib/icons.js","webpack://jupyterlab-blockly-extension/./lib/index.js"],"sourcesContent":["export default \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?>\\n<svg\\n   xmlns:dc=\\\"http://purl.org/dc/elements/1.1/\\\"\\n   xmlns:cc=\\\"http://creativecommons.org/ns#\\\"\\n   xmlns:rdf=\\\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\\\"\\n   xmlns:svg=\\\"http://www.w3.org/2000/svg\\\"\\n   xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n   xmlns:sodipodi=\\\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\\\"\\n   xmlns:inkscape=\\\"http://www.inkscape.org/namespaces/inkscape\\\"\\n   id=\\\"Layer_6\\\"\\n   data-name=\\\"Layer 6\\\"\\n   viewBox=\\\"0 0 192 192\\\"\\n   version=\\\"1.1\\\"\\n   sodipodi:docname=\\\"logo-only.svg\\\"\\n   inkscape:version=\\\"0.92.2pre0 (973e216, 2017-07-25)\\\"\\n   inkscape:export-filename=\\\"/usr/local/google/home/epastern/Documents/Blockly Logos/Square/logo-only.png\\\"\\n   inkscape:export-xdpi=\\\"96\\\"\\n   inkscape:export-ydpi=\\\"96\\\">\\n  <metadata\\n     id=\\\"metadata913\\\">\\n    <rdf:RDF>\\n      <cc:Work\\n         rdf:about=\\\"\\\">\\n        <dc:format>image/svg+xml</dc:format>\\n        <dc:type\\n           rdf:resource=\\\"http://purl.org/dc/dcmitype/StillImage\\\" />\\n        <dc:title>blockly-logo</dc:title>\\n      </cc:Work>\\n    </rdf:RDF>\\n  </metadata>\\n  <sodipodi:namedview\\n     pagecolor=\\\"#ffffff\\\"\\n     bordercolor=\\\"#666666\\\"\\n     borderopacity=\\\"1\\\"\\n     objecttolerance=\\\"10\\\"\\n     gridtolerance=\\\"10\\\"\\n     guidetolerance=\\\"10\\\"\\n     inkscape:pageopacity=\\\"0\\\"\\n     inkscape:pageshadow=\\\"2\\\"\\n     inkscape:window-width=\\\"2560\\\"\\n     inkscape:window-height=\\\"1379\\\"\\n     id=\\\"namedview911\\\"\\n     showgrid=\\\"false\\\"\\n     inkscape:zoom=\\\"2\\\"\\n     inkscape:cx=\\\"239.87642\\\"\\n     inkscape:cy=\\\"59.742687\\\"\\n     inkscape:window-x=\\\"0\\\"\\n     inkscape:window-y=\\\"0\\\"\\n     inkscape:window-maximized=\\\"1\\\"\\n     inkscape:current-layer=\\\"g1013\\\" />\\n  <defs\\n     id=\\\"defs902\\\">\\n    <style\\n       id=\\\"style900\\\">.cls-1{fill:#4285f4;}.cls-2{fill:#c8d1db;}</style>\\n  </defs>\\n  <title\\n     id=\\\"title904\\\">blockly-logo</title>\\n  <g\\n     id=\\\"g1013\\\"\\n     transform=\\\"translate(23.500002,-7.9121105)\\\"\\n     inkscape:export-xdpi=\\\"96\\\"\\n     inkscape:export-ydpi=\\\"96\\\">\\n    <path\\n       id=\\\"path906\\\"\\n       d=\\\"M 20.140625,32 C 13.433598,31.994468 7.9944684,37.433598 8,44.140625 V 148.85938 C 7.99447,155.56641 13.433598,161.00553 20.140625,161 h 4.726563 c 2.330826,8.74182 10.245751,14.82585 19.292968,14.83008 C 53.201562,175.81878 61.108176,169.73621 63.4375,161 h 4.841797 15.726562 c 4.418278,0 8,-3.58172 8,-8 V 40 l -8,-8 z\\\"\\n       style=\\\"fill:#4285f4\\\"\\n       inkscape:connector-curvature=\\\"0\\\"\\n       sodipodi:nodetypes=\\\"ccccccccssccc\\\" />\\n    <path\\n       sodipodi:nodetypes=\\\"ccccccccccccccccc\\\"\\n       inkscape:connector-curvature=\\\"0\\\"\\n       id=\\\"path908\\\"\\n       d=\\\"M 80.007812,31.994141 C 79.997147,49.696887 80,67.396525 80,85.109375 L 63.369141,75.710938 C 60.971784,74.358189 58.004891,76.087168 58,78.839844 v 40.621096 c 0.0049,2.75267 2.971786,4.48165 5.369141,3.1289 L 80,113.18945 v 37.5918 2.21875 8 h 8 1.425781 36.054689 c 6.36195,-2.6e-4 11.51927,-5.15758 11.51953,-11.51953 V 43.480469 C 136.97822,37.133775 131.8272,32.000222 125.48047,32 Z\\\"\\n       style=\\\"fill:#c8d1db\\\" />\\n  </g>\\n</svg>\\n\";","import { LabIcon } from '@jupyterlab/ui-components';\nimport blockly_logo from '/style/icons/blockly_logo.svg';\nexport const blockly_icon = new LabIcon({\n    name: 'blockly:icon/logo',\n    svgstr: blockly_logo\n});\n//# sourceMappingURL=icons.js.map","import { ILayoutRestorer } from '@jupyterlab/application';\nimport { jsonIcon } from '@jupyterlab/ui-components';\nimport { WidgetTracker, ICommandPalette } from '@jupyterlab/apputils';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { IEditorServices } from '@jupyterlab/codeeditor';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { IJupyterWidgetRegistry } from '@jupyter-widgets/base';\nimport { WidgetRenderer, registerWidgetManager } from '@jupyter-widgets/jupyterlab-manager';\nimport { BlocklyEditorFactory } from 'jupyterlab-blockly';\nimport { IBlocklyRegistry } from 'jupyterlab-blockly';\nimport { blockly_icon } from './icons';\n/**\n * The name of the factory that creates the editor widgets.\n */\nconst FACTORY = 'Blockly editor';\nconst PALETTE_CATEGORY = 'Blockly editor';\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.createNew = 'blockly:create-new-blockly-file';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * The id of the translation plugin.\n */\nconst PLUGIN_ID = '@jupyterlab/translation-extension:plugin';\n/**\n * Initialization data for the jupyterlab-blocky extension.\n */\nconst plugin = {\n    id: 'jupyterlab-blocky:plugin',\n    autoStart: true,\n    requires: [\n        ILayoutRestorer,\n        IRenderMimeRegistry,\n        IEditorServices,\n        IFileBrowserFactory,\n        ISettingRegistry,\n        ITranslator\n    ],\n    optional: [ILauncher, ICommandPalette, IMainMenu, IJupyterWidgetRegistry],\n    provides: IBlocklyRegistry,\n    activate: (app, restorer, rendermime, editorServices, browserFactory, settings, translator, launcher, palette, mainMenu, widgetRegistry) => {\n        console.log('JupyterLab extension jupyterlab-blocky is activated!');\n        // Namespace for the tracker\n        const namespace = 'jupyterlab-blocky';\n        // Creating the tracker for the document\n        const tracker = new WidgetTracker({ namespace });\n        // Handle state restoration.\n        if (restorer) {\n            // When restoring the app, if the document was open, reopen it\n            restorer.restore(tracker, {\n                command: 'docmanager:open',\n                args: widget => ({ path: widget.context.path, factory: FACTORY }),\n                name: widget => widget.context.path\n            });\n        }\n        const { commands } = app;\n        // Creating the widget factory to register it so the document manager knows about\n        // our new DocumentWidget\n        const widgetFactory = new BlocklyEditorFactory({\n            name: FACTORY,\n            modelName: 'text',\n            fileTypes: ['blockly'],\n            defaultFor: ['blockly'],\n            // Kernel options, in this case we need to execute the code generated\n            // in the blockly editor. The best way would be to use kernels, for\n            // that reason, we tell the widget factory to start a kernel session\n            // when opening the editor, and close the session when closing the editor.\n            canStartKernel: true,\n            preferKernel: true,\n            shutdownOnClose: true,\n            // The rendermime instance, necessary to render the outputs\n            // after a code execution. And the mimeType service to get the\n            // mimeType from the kernel language\n            rendermime: rendermime,\n            mimetypeService: editorServices.mimeTypeService,\n            // The translator instance, used for the internalization of the plugin.\n            translator: translator\n        });\n        // Add the widget to the tracker when it's created\n        widgetFactory.widgetCreated.connect((sender, widget) => {\n            // Adding the Blockly icon for the widget so it appears next to the file name.\n            widget.title.icon = blockly_icon;\n            // Notify the instance tracker if restore data needs to update.\n            widget.context.pathChanged.connect(() => {\n                tracker.save(widget);\n            });\n            tracker.add(widget);\n        });\n        // Registering the file type\n        app.docRegistry.addFileType({\n            name: 'blockly',\n            displayName: 'Blockly',\n            contentType: 'file',\n            fileFormat: 'json',\n            extensions: ['.jpblockly'],\n            mimeTypes: ['application/json'],\n            icon: jsonIcon,\n            iconLabel: 'JupyterLab-Blockly'\n        });\n        // Registering the widget factory\n        app.docRegistry.addWidgetFactory(widgetFactory);\n        function getSetting(setting) {\n            // Read the settings and convert to the correct type\n            const currentLocale = setting.get('locale').composite;\n            return currentLocale;\n        }\n        // Wait for the application to be restored and\n        // for the settings for this plugin to be loaded\n        settings.load(PLUGIN_ID).then(setting => {\n            // Read the settings\n            const currentLocale = getSetting(setting);\n            // Listen for our plugin setting changes using Signal\n            setting.changed.connect(getSetting);\n            // Get new language and call the function that modifies the language name accordingly.\n            // Also, make the transformation to have the name of the language package as in Blockly.\n            const language = currentLocale[currentLocale.length - 2].toUpperCase() +\n                currentLocale[currentLocale.length - 1].toLowerCase();\n            console.log(`Current Language : '${language}'`);\n            // Transmitting the current language to the manager.\n            widgetFactory.registry.setlanguage(language);\n        });\n        commands.addCommand(CommandIDs.createNew, {\n            label: args => args['isPalette'] ? 'New Blockly Editor' : 'Blockly Editor',\n            caption: 'Create a new Blockly Editor',\n            icon: args => (args['isPalette'] ? null : blockly_icon),\n            execute: async (args) => {\n                // Get the directory in which the Blockly file must be created;\n                // otherwise take the current filebrowser directory\n                const cwd = args['cwd'] || browserFactory.tracker.currentWidget.model.path;\n                // Create a new untitled Blockly file\n                const model = await commands.execute('docmanager:new-untitled', {\n                    path: cwd,\n                    type: 'file',\n                    ext: '.jpblockly'\n                });\n                // Open the newly created file with the 'Editor'\n                return commands.execute('docmanager:open', {\n                    path: model.path,\n                    factory: FACTORY\n                });\n            }\n        });\n        // Add the command to the launcher\n        if (launcher) {\n            launcher.add({\n                command: CommandIDs.createNew,\n                category: 'Other',\n                rank: 1\n            });\n        }\n        // Add the command to the palette\n        if (palette) {\n            palette.addItem({\n                command: CommandIDs.createNew,\n                args: { isPalette: true },\n                category: PALETTE_CATEGORY\n            });\n        }\n        // Add the command to the main menu\n        if (mainMenu) {\n            mainMenu.kernelMenu.kernelUsers.add({\n                tracker,\n                interruptKernel: current => {\n                    var _a;\n                    const kernel = (_a = current.context.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n                    if (kernel) {\n                        return kernel.interrupt();\n                    }\n                    return Promise.resolve(void 0);\n                },\n                reconnectToKernel: current => {\n                    var _a;\n                    const kernel = (_a = current.context.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n                    if (kernel) {\n                        return kernel.reconnect();\n                    }\n                    return Promise.resolve(void 0);\n                },\n                restartKernel: current => {\n                    var _a;\n                    const kernel = (_a = current.context.sessionContext.session) === null || _a === void 0 ? void 0 : _a.kernel;\n                    if (kernel) {\n                        return kernel.restart();\n                    }\n                    return Promise.resolve(void 0);\n                },\n                shutdownKernel: current => current.context.sessionContext.shutdown()\n            });\n        }\n        if (widgetRegistry) {\n            tracker.forEach(panel => {\n                registerWidgetManager(panel.context, panel.content.rendermime, widgetRenderers([panel.content.cell]));\n            });\n            tracker.widgetAdded.connect((sender, panel) => {\n                registerWidgetManager(panel.context, panel.content.rendermime, widgetRenderers([panel.content.cell]));\n            });\n        }\n        return widgetFactory.registry;\n    }\n};\nfunction* widgetRenderers(cells) {\n    for (const w of cells) {\n        if (w instanceof WidgetRenderer) {\n            yield w;\n        }\n    }\n}\nexport default plugin;\n//# sourceMappingURL=index.js.map"],"names":["blockly_icon","LabIcon","name","svgstr","FACTORY","CommandIDs","widgetRenderers","cells","w","WidgetRenderer","createNew","id","autoStart","requires","ILayoutRestorer","IRenderMimeRegistry","IEditorServices","IFileBrowserFactory","ISettingRegistry","ITranslator","optional","ILauncher","ICommandPalette","IMainMenu","IJupyterWidgetRegistry","provides","IBlocklyRegistry","activate","app","restorer","rendermime","editorServices","browserFactory","settings","translator","launcher","palette","mainMenu","widgetRegistry","console","log","tracker","WidgetTracker","namespace","restore","command","args","widget","path","context","factory","commands","widgetFactory","BlocklyEditorFactory","modelName","fileTypes","defaultFor","canStartKernel","preferKernel","shutdownOnClose","mimetypeService","mimeTypeService","getSetting","setting","get","composite","widgetCreated","connect","sender","title","icon","pathChanged","save","add","docRegistry","addFileType","displayName","contentType","fileFormat","extensions","mimeTypes","jsonIcon","iconLabel","addWidgetFactory","load","then","currentLocale","changed","language","length","toUpperCase","toLowerCase","registry","setlanguage","addCommand","label","caption","execute","async","cwd","currentWidget","model","type","ext","category","rank","addItem","isPalette","kernelMenu","kernelUsers","interruptKernel","current","_a","kernel","sessionContext","session","interrupt","Promise","resolve","reconnectToKernel","reconnect","restartKernel","restart","shutdownKernel","shutdown","forEach","panel","registerWidgetManager","content","cell","widgetAdded"],"sourceRoot":""}