"use strict";(self.webpackChunkjupyterlab_blockly_extension=self.webpackChunkjupyterlab_blockly_extension||[]).push([[903],{3903:(e,t,n)=>{n.r(t),n.d(t,{BlocklyEditor:()=>x,BlocklyEditorFactory:()=>E,BlocklyLayout:()=>b,BlocklyManager:()=>K,BlocklyPanel:()=>v,BlocklyRegistry:()=>T,IBlocklyRegistry:()=>M,THEME:()=>m,TOOLBOX:()=>h});var o=n(6676),l=n(8667),a=n(8832),s=n(1840),i=n(9764),r=n(1872),c=n(8918),d=n(1041);const h={kind:"categoryToolbox",contents:[{kind:"category",name:"Logic",colour:"210",contents:[{kind:"block",type:"controls_if"},{kind:"BLOCK",type:"logic_compare"},{kind:"BLOCK",blockxml:'<block type="logic_operation"></block>',type:"logic_operation"},{kind:"BLOCK",blockxml:'<block type="logic_negate"></block>',type:"logic_negate"},{kind:"BLOCK",blockxml:'<block type="logic_boolean"></block>',type:"logic_boolean"},{kind:"BLOCK",blockxml:'<block type="logic_null"></block>',type:"logic_null"},{kind:"BLOCK",blockxml:'<block type="logic_ternary"></block>',type:"logic_ternary"}]},{kind:"category",name:"Loops",colour:"120",contents:[{kind:"BLOCK",blockxml:'<block type="controls_repeat_ext">\n          <value name="TIMES">\n            <shadow type="math_number">\n              <field name="NUM">10</field>\n            </shadow>\n          </value>\n        </block>',type:"controls_repeat_ext"},{kind:"BLOCK",blockxml:'<block type="controls_whileUntil"></block>',type:"controls_whileUntil"},{kind:"BLOCK",blockxml:'<block type="controls_for">\n          <value name="FROM">\n            <shadow type="math_number">\n              <field name="NUM">1</field>\n            </shadow>\n          </value>\n          <value name="TO">\n            <shadow type="math_number">\n              <field name="NUM">10</field>\n            </shadow>\n          </value>\n          <value name="BY">\n            <shadow type="math_number">\n              <field name="NUM">1</field>\n            </shadow>\n          </value>\n        </block>',type:"controls_for"},{kind:"BLOCK",blockxml:'<block type="controls_forEach"></block>',type:"controls_forEach"},{kind:"BLOCK",blockxml:'<block type="controls_flow_statements"></block>',type:"controls_flow_statements"}]},{kind:"CATEGORY",name:"Math",colour:"230",contents:[{kind:"BLOCK",blockxml:'<block type="math_number"></block>',type:"math_number"},{kind:"BLOCK",blockxml:'<block type="math_arithmetic">\n          <value name="A">\n            <shadow type="math_number">\n              <field name="NUM">1</field>\n            </shadow>\n          </value>\n          <value name="B">\n            <shadow type="math_number">\n              <field name="NUM">1</field>\n            </shadow>\n          </value>\n        </block>',type:"math_arithmetic"},{kind:"BLOCK",blockxml:'<block type="math_single">\n          <value name="NUM">\n            <shadow type="math_number">\n              <field name="NUM">9</field>\n            </shadow>\n          </value>\n        </block>',type:"math_single"},{kind:"BLOCK",blockxml:'<block type="math_trig">\n          <value name="NUM">\n            <shadow type="math_number">\n              <field name="NUM">45</field>\n            </shadow>\n          </value>\n        </block>',type:"math_trig"},{kind:"BLOCK",blockxml:'<block type="math_constant"></block>',type:"math_constant"},{kind:"BLOCK",blockxml:'<block type="math_number_property">\n          <value name="NUMBER_TO_CHECK">\n            <shadow type="math_number">\n              <field name="NUM">0</field>\n            </shadow>\n          </value>\n        </block>',type:"math_number_property"},{kind:"BLOCK",blockxml:'<block type="math_change">\n          <value name="DELTA">\n            <shadow type="math_number">\n              <field name="NUM">1</field>\n            </shadow>\n          </value>\n        </block>',type:"math_change"},{kind:"BLOCK",blockxml:'<block type="math_round">\n          <value name="NUM">\n            <shadow type="math_number">\n              <field name="NUM">3.1</field>\n            </shadow>\n          </value>\n        </block>',type:"math_round"},{kind:"BLOCK",blockxml:'<block type="math_on_list"></block>',type:"math_on_list"},{kind:"BLOCK",blockxml:'<block type="math_modulo">\n          <value name="DIVIDEND">\n            <shadow type="math_number">\n              <field name="NUM">64</field>\n            </shadow>\n          </value>\n          <value name="DIVISOR">\n            <shadow type="math_number">\n              <field name="NUM">10</field>\n            </shadow>\n          </value>\n        </block>',type:"math_modulo"},{kind:"BLOCK",blockxml:'<block type="math_constrain">\n          <value name="VALUE">\n            <shadow type="math_number">\n              <field name="NUM">50</field>\n            </shadow>\n          </value>\n          <value name="LOW">\n            <shadow type="math_number">\n              <field name="NUM">1</field>\n            </shadow>\n          </value>\n          <value name="HIGH">\n            <shadow type="math_number">\n              <field name="NUM">100</field>\n            </shadow>\n          </value>\n        </block>',type:"math_constrain"},{kind:"BLOCK",blockxml:'<block type="math_random_int">\n          <value name="FROM">\n            <shadow type="math_number">\n              <field name="NUM">1</field>\n            </shadow>\n          </value>\n          <value name="TO">\n            <shadow type="math_number">\n              <field name="NUM">100</field>\n            </shadow>\n          </value>\n        </block>',type:"math_random_int"},{kind:"BLOCK",blockxml:'<block type="math_random_float"></block>',type:"math_random_float"}]},{kind:"CATEGORY",name:"Text",colour:"160",contents:[{kind:"BLOCK",blockxml:'<block type="text"></block>',type:"text"},{kind:"BLOCK",blockxml:'<block type="text_join"></block>',type:"text_join"},{kind:"BLOCK",blockxml:'<block type="text_append">\n          <value name="TEXT">\n            <shadow type="text"></shadow>\n          </value>\n        </block>',type:"text_append"},{kind:"BLOCK",blockxml:'<block type="text_length">\n          <value name="VALUE">\n            <shadow type="text">\n              <field name="TEXT">abc</field>\n            </shadow>\n          </value>\n        </block>',type:"text_length"},{kind:"BLOCK",blockxml:'<block type="text_isEmpty">\n          <value name="VALUE">\n            <shadow type="text">\n              <field name="TEXT"></field>\n            </shadow>\n          </value>\n        </block>',type:"text_isEmpty"},{kind:"BLOCK",blockxml:'<block type="text_indexOf">\n          <value name="VALUE">\n            <block type="variables_get">\n              <field name="VAR">text</field>\n            </block>\n          </value>\n          <value name="FIND">\n            <shadow type="text">\n              <field name="TEXT">abc</field>\n            </shadow>\n          </value>\n        </block>',type:"text_indexOf"},{kind:"BLOCK",blockxml:'<block type="text_charAt">\n          <value name="VALUE">\n            <block type="variables_get">\n              <field name="VAR">text</field>\n            </block>\n          </value>\n        </block>',type:"text_charAt"},{kind:"BLOCK",blockxml:'<block type="text_getSubstring">\n          <value name="STRING">\n            <block type="variables_get">\n              <field name="VAR">text</field>\n            </block>\n          </value>\n        </block>',type:"text_getSubstring"},{kind:"BLOCK",blockxml:'<block type="text_changeCase">\n          <value name="TEXT">\n            <shadow type="text">\n              <field name="TEXT">abc</field>\n            </shadow>\n          </value>\n        </block>',type:"text_changeCase"},{kind:"BLOCK",blockxml:'<block type="text_trim">\n          <value name="TEXT">\n            <shadow type="text">\n              <field name="TEXT">abc</field>\n            </shadow>\n          </value>\n        </block>',type:"text_trim"},{kind:"BLOCK",blockxml:'<block type="text_print">\n          <value name="TEXT">\n            <shadow type="text">\n              <field name="TEXT">abc</field>\n            </shadow>\n          </value>\n        </block>',type:"text_print"},{kind:"BLOCK",blockxml:'<block type="text_prompt_ext">\n          <value name="TEXT">\n            <shadow type="text">\n              <field name="TEXT">abc</field>\n            </shadow>\n          </value>\n        </block>',type:"text_prompt_ext"}]},{kind:"CATEGORY",name:"Lists",colour:"260",contents:[{kind:"BLOCK",blockxml:'<block type="lists_create_with">\n          <mutation items="0"></mutation>\n        </block>',type:"lists_create_with"},{kind:"BLOCK",blockxml:'<block type="lists_create_with"></block>',type:"lists_create_with"},{kind:"BLOCK",blockxml:'<block type="lists_repeat">\n          <value name="NUM">\n            <shadow type="math_number">\n              <field name="NUM">5</field>\n            </shadow>\n          </value>\n        </block>',type:"lists_repeat"},{kind:"BLOCK",blockxml:'<block type="lists_length"></block>',type:"lists_length"},{kind:"BLOCK",blockxml:'<block type="lists_isEmpty"></block>',type:"lists_isEmpty"},{kind:"BLOCK",blockxml:'<block type="lists_indexOf">\n          <value name="VALUE">\n            <block type="variables_get">\n              <field name="VAR">list</field>\n            </block>\n          </value>\n        </block>',type:"lists_indexOf"},{kind:"BLOCK",blockxml:'<block type="lists_getIndex">\n          <value name="VALUE">\n            <block type="variables_get">\n              <field name="VAR">list</field>\n            </block>\n          </value>\n        </block>',type:"lists_getIndex"},{kind:"BLOCK",blockxml:'<block type="lists_setIndex">\n          <value name="LIST">\n            <block type="variables_get">\n              <field name="VAR">list</field>\n            </block>\n          </value>\n        </block>',type:"lists_setIndex"},{kind:"BLOCK",blockxml:'<block type="lists_getSublist">\n          <value name="LIST">\n            <block type="variables_get">\n              <field name="VAR">list</field>\n            </block>\n          </value>\n        </block>',type:"lists_getSublist"},{kind:"BLOCK",blockxml:'<block type="lists_split">\n          <value name="DELIM">\n            <shadow type="text">\n              <field name="TEXT">,</field>\n            </shadow>\n          </value>\n        </block>',type:"lists_split"},{kind:"BLOCK",blockxml:'<block type="lists_sort"></block>',type:"lists_sort"}]},{kind:"CATEGORY",name:"Color",colour:"20",contents:[{kind:"BLOCK",blockxml:'<block type="colour_picker"></block>',type:"colour_picker"},{kind:"BLOCK",blockxml:'<block type="colour_random"></block>',type:"colour_random"},{kind:"BLOCK",blockxml:'<block type="colour_rgb">\n          <value name="RED">\n            <shadow type="math_number">\n              <field name="NUM">100</field>\n            </shadow>\n          </value>\n          <value name="GREEN">\n            <shadow type="math_number">\n              <field name="NUM">50</field>\n            </shadow>\n          </value>\n          <value name="BLUE">\n            <shadow type="math_number">\n              <field name="NUM">0</field>\n            </shadow>\n          </value>\n        </block>',type:"colour_rgb"},{kind:"BLOCK",blockxml:'<block type="colour_blend">\n          <value name="COLOUR1">\n            <shadow type="colour_picker">\n              <field name="COLOUR">#ff0000</field>\n            </shadow>\n          </value>\n          <value name="COLOUR2">\n            <shadow type="colour_picker">\n              <field name="COLOUR">#3333ff</field>\n            </shadow>\n          </value>\n          <value name="RATIO">\n            <shadow type="math_number">\n              <field name="NUM">0.5</field>\n            </shadow>\n          </value>\n        </block>',type:"colour_blend"}]},{kind:"SEP"},{kind:"CATEGORY",colour:"330",custom:"VARIABLE",name:"Variables"},{kind:"CATEGORY",colour:"290",custom:"PROCEDURE",name:"Functions"}]},m=d.Theme.defineTheme("jupyterlab",{name:"JupyterLab Blockly",base:d.Themes.Classic,componentStyles:{workspaceBackgroundColour:"var(--jp-layout-color0)",toolboxBackgroundColour:"var(--jp-layout-color2)",toolboxForegroundColour:"var(--jp-ui-font-color0)",flyoutBackgroundColour:"var(--jp-border-color2)",flyoutForegroundColour:"var(--jp-layout-color3)",flyoutOpacity:1,scrollbarColour:"var(--jp-border-color0)",insertionMarkerOpacity:.3,scrollbarOpacity:.4,cursorColour:"var(--jp-scrollbar-background-color)"},fontStyle:{family:"var(--jp-ui-font-family)"}});class b extends a.SplitLayout{constructor(e,t,n){super({renderer:a.SplitPanel.defaultRenderer,orientation:"vertical"}),this._manager=e,this._sessionContext=t,this._host=new a.Widget,this._cell=new r.CodeCell({model:new r.CodeCellModel({}),rendermime:n}),this._cell.addClass("jp-blockly-codeCell"),this._cell.readOnly=!0,this._cell.model.trusted=!0,this._cell.model.mimeType=this._manager.mimeType,this._cell.node.style.overflow="scroll",this._manager.changed.connect(this._onManagerChanged,this)}get cell(){return this._cell}get workspace(){return d.serialization.workspaces.save(this._workspace)}set workspace(e){const t=null===e?{variables:[]}:e;d.serialization.workspaces.load(t,this._workspace)}dispose(){this._manager.changed.disconnect(this._resizeWorkspace,this),s.Signal.clearData(this),this._workspace.dispose(),super.dispose()}init(){super.init(),this.addWidget(this._host),this.addWidget(this._cell)}iter(){return new c.ArrayIterator([])}removeWidget(e){}getBlocksToplevelInit(){let e="";const t=this._workspace.getAllBlocks(!0);for(const n in t){const o=t[n].type;d.Blocks[o].toplevel_init&&(e+=d.Blocks[o].toplevel_init)}return e}run(){const e=this.getBlocksToplevelInit()+this._manager.generator.workspaceToCode(this._workspace);this._cell.model.sharedModel.setSource(e),this._sessionContext.hasNoKernel?(0,i.showErrorMessage)("Select a valid kernel","There is not a valid kernel selected, select one from the dropdown menu in the toolbar.\n        If there isn't a valid kernel please install 'xeus-python' from Pypi.org or using mamba.\n        "):r.CodeCell.execute(this._cell,this._sessionContext).then((()=>this._resizeWorkspace())).catch((e=>console.error(e)))}onUpdateRequest(e){super.onUpdateRequest(e),this._resizeWorkspace()}onResize(e){super.onResize(e),this._resizeWorkspace()}onFitRequest(e){super.onFitRequest(e),this._resizeWorkspace()}onAfterAttach(e){super.onAfterAttach(e),this._workspace=d.inject(this._host.node,{toolbox:this._manager.toolbox,theme:m}),this._workspace.addChangeListener((()=>{const e=this.getBlocksToplevelInit()+this._manager.generator.workspaceToCode(this._workspace);this._cell.model.sharedModel.setSource(e)}))}_resizeWorkspace(){d.svgResize(this._workspace)}_onManagerChanged(e,t){if("kernel"===t){const e=this.getBlocksToplevelInit()+this._manager.generator.workspaceToCode(this._workspace);this._cell.model.sharedModel.setSource(e),this._cell.model.mimeType=this._manager.mimeType}"toolbox"===t&&this._workspace.updateToolbox(this._manager.toolbox)}}class k extends i.ToolbarButton{constructor(e){super(e),this.addClass("jp-blockly-button")}}class p extends a.Widget{constructor(){super(),this.addClass("jp-Toolbar-spacer")}}var u=n(6271),_=n.n(u);class y extends k{constructor(e){super(e),this.handleChange=e=>{this._manager.setToolbox(e.target.value),this.update()},this._manager=e.manager,this._manager.changed.connect(this.update,this)}dispose(){super.dispose(),this._manager.changed.disconnect(this.update,this)}render(){return _().createElement(l.HTMLSelect,{onChange:this.handleChange,value:this._manager.getToolbox(),options:this._manager.listToolboxes()})}}class g extends k{constructor(e){super(e),this.handleChange=e=>{this._manager.selectKernel(e.target.value),this.update()},this._manager=e.manager,this._manager.changed.connect(this.update,this)}dispose(){super.dispose(),this._manager.changed.disconnect(this.update,this)}render(){const e=this._manager.listKernels();return"No kernel"===this._manager.kernel&&e.push({label:"No kernel",value:"No kernel"}),_().createElement(l.HTMLSelect,{onChange:this.handleChange,value:this._manager.kernel,options:e})}}class x extends o.DocumentWidget{constructor(e){super(e);const t=new k({label:"",icon:l.runIcon,className:"jp-blockly-runButton",onClick:()=>this.content.layout.run(),tooltip:"Run Code"});this.toolbar.addItem("run",t),this.toolbar.addItem("spacer",new p),this.toolbar.addItem("toolbox",new y({label:"Toolbox",tooltip:"Select tollbox",manager:e.manager})),this.toolbar.addItem("generator",new g({label:"Kernel",tooltip:"Select kernel",manager:e.manager}))}dispose(){this.content.dispose(),super.dispose()}}class v extends a.SplitPanel{constructor(e,t,n){super({layout:new b(t,e.sessionContext,n)}),this.addClass("jp-BlocklyPanel"),this._context=e,this._rendermime=n,this._context.ready.then((()=>this._load())),this._context.saveState.connect(this._onSave,this)}get cell(){return this.layout.cell}get rendermime(){return this._rendermime}dispose(){this.isDisposed||(s.Signal.clearData(this),super.dispose())}_load(){const e=this._context.model.toJSON();this.layout.workspace=e}_onSave(e,t){if("started"===t){const e=this.layout.workspace;this._context.model.fromJSON(e)}}}var f,w=n(4119),C=n(2515),O=n(115),L=n(500),B=n.n(L);class T{constructor(){this._toolboxes=new Map,this._toolboxes.set("default",h),this._generators=new Map,this._generators.set("python",w.pythonGenerator),this._generators.set("javascript",C.javascriptGenerator),this._generators.set("lua",O.luaGenerator)}get toolboxes(){return this._toolboxes}get generators(){return this._generators}registerToolbox(e,t){this._toolboxes.set(e,t)}registerBlocks(e){d.defineBlocksWithJsonArray(e)}registerGenerator(e,t){this._generators.set(e,t)}setlanguage(e){f.importLanguageModule(e)}}!function(e){e.importLanguageModule=async function(e){let t;switch(e){case"En":t=Promise.resolve().then(n.t.bind(n,500,23));break;case"Es":t=n.e(867).then(n.t.bind(n,867,23));break;case"Fr":t=n.e(680).then(n.t.bind(n,6475,23));break;case"Sa":t=n.e(798).then(n.t.bind(n,7798,23));break;case"Cz":t=n.e(318).then(n.t.bind(n,5318,23));break;case"Dk":t=n.e(663).then(n.t.bind(n,8663,23));break;case"De":t=n.e(261).then(n.t.bind(n,3261,23));break;case"Gr":t=n.e(412).then(n.t.bind(n,7412,23));break;case"Ee":t=n.e(566).then(n.t.bind(n,4566,23));break;case"Fi":t=n.e(765).then(n.t.bind(n,9765,23));break;case"Il":t=n.e(909).then(n.t.bind(n,8909,23));break;case"Hu":t=n.e(394).then(n.t.bind(n,3394,23));break;case"Am":t=n.e(77).then(n.t.bind(n,5077,23));break;case"Id":t=n.e(772).then(n.t.bind(n,7772,23));break;case"It":t=n.e(600).then(n.t.bind(n,4600,23));break;case"Jp":t=n.e(122).then(n.t.bind(n,1122,23));break;case"Kr":t=n.e(657).then(n.t.bind(n,5657,23));break;case"Lt":t=n.e(568).then(n.t.bind(n,1568,23));break;case"Nl":t=n.e(164).then(n.t.bind(n,2164,23));break;case"Pl":t=n.e(554).then(n.t.bind(n,554,23));break;case"Br":t=n.e(217).then(n.t.bind(n,9318,23));break;case"Ro":t=n.e(135).then(n.t.bind(n,6135,23));break;case"Ru":t=n.e(615).then(n.t.bind(n,1615,23));break;case"Lk":t=n.e(262).then(n.t.bind(n,1262,23));break;case"Tr":t=n.e(801).then(n.t.bind(n,7801,23));break;case"Ua":t=n.e(354).then(n.t.bind(n,3354,23));break;case"Vn":t=n.e(359).then(n.t.bind(n,8359,23));break;case"Tw":t=n.e(924).then(n.t.bind(n,2924,23));break;case"Cn":t=n.e(337).then(n.t.bind(n,5337,23));break;default:console.warn("Language not found. Loading english"),t=Promise.resolve(B())}t.then((e=>{d.setLocale(e)}))}}(f||(f={}));class K{constructor(e,t,n){this._registry=e,this._sessionContext=t,this._mimetypeService=n,this._toolbox="default",this._generator=this._registry.generators.get("python"),this._changed=new s.Signal(this),this._sessionContext.kernelChanged.connect(this._onKernelChanged,this)}get toolbox(){return this._registry.toolboxes.get(this._toolbox)}get mimeType(){return this._selectedKernel?this._mimetypeService.getMimeTypeByLanguage({name:this._selectedKernel.language}):"text/plain"}get kernel(){var e;return(null===(e=this._selectedKernel)||void 0===e?void 0:e.name)||"No kernel"}get generator(){return this._generator}get changed(){return this._changed}dispose(){this._sessionContext.kernelChanged.disconnect(this._onKernelChanged,this)}getToolbox(){return this._toolbox}setToolbox(e){if(this._toolbox!==e){const t=this._registry.toolboxes.get(e);this._toolbox=t?e:"default",this._changed.emit("toolbox")}}listToolboxes(){const e=[];return this._registry.toolboxes.forEach(((t,n)=>{e.push({label:n,value:n})})),e}selectKernel(e){this._sessionContext.changeKernel({name:e})}listKernels(){const e=this._sessionContext.specsManager.specs.kernelspecs,t=[];return Object.keys(e).forEach((n=>{const o=e[n].language;this._registry.generators.has(o)&&t.push({label:e[n].display_name,value:e[n].name})})),t}_onKernelChanged(e,t){const n=this._sessionContext.specsManager.specs.kernelspecs;if(t.newValue&&void 0!==n[t.newValue.name]){this._selectedKernel=n[t.newValue.name];const e=n[t.newValue.name].language;this._generator=this._registry.generators.get(e),this._changed.emit("kernel")}}}class E extends o.ABCWidgetFactory{constructor(e){super(e),this._registry=new T,this._rendermime=e.rendermime,this._mimetypeService=e.mimetypeService}get registry(){return this._registry}createNewWidget(e){e.model.metadata=new Map;const t=new K(this._registry,e.sessionContext,this._mimetypeService),n=new v(e,t,this._rendermime);return new x({context:e,content:n,manager:t})}}const M=new(n(1526).Token)("jupyterlab-blockly/registry")}}]);
//# sourceMappingURL=903.eaefbff39eefe84c7852.js.map?v=eaefbff39eefe84c7852