# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import provider_pb2 as provider__pb2


class ProviderServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMetrics = channel.unary_unary(
                '/batchx.provider.ProviderService/GetMetrics',
                request_serializer=provider__pb2.GetMetricsRequest.SerializeToString,
                response_deserializer=provider__pb2.GetMetricsResponse.FromString,
                )
        self.ListPayouts = channel.unary_unary(
                '/batchx.provider.ProviderService/ListPayouts',
                request_serializer=provider__pb2.ListPayoutsRequest.SerializeToString,
                response_deserializer=provider__pb2.ListPayoutsResponse.FromString,
                )
        self.ListRevenueByTools = channel.unary_unary(
                '/batchx.provider.ProviderService/ListRevenueByTools',
                request_serializer=provider__pb2.ListRevenueByToolsRequest.SerializeToString,
                response_deserializer=provider__pb2.ListRevenueByToolsResponse.FromString,
                )
        self.ListRevenueByCustomer = channel.unary_unary(
                '/batchx.provider.ProviderService/ListRevenueByCustomer',
                request_serializer=provider__pb2.ListRevenueByCustomerRequest.SerializeToString,
                response_deserializer=provider__pb2.ListRevenueByCustomerResponse.FromString,
                )


class ProviderServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPayouts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRevenueByTools(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListRevenueByCustomer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProviderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMetrics,
                    request_deserializer=provider__pb2.GetMetricsRequest.FromString,
                    response_serializer=provider__pb2.GetMetricsResponse.SerializeToString,
            ),
            'ListPayouts': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPayouts,
                    request_deserializer=provider__pb2.ListPayoutsRequest.FromString,
                    response_serializer=provider__pb2.ListPayoutsResponse.SerializeToString,
            ),
            'ListRevenueByTools': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRevenueByTools,
                    request_deserializer=provider__pb2.ListRevenueByToolsRequest.FromString,
                    response_serializer=provider__pb2.ListRevenueByToolsResponse.SerializeToString,
            ),
            'ListRevenueByCustomer': grpc.unary_unary_rpc_method_handler(
                    servicer.ListRevenueByCustomer,
                    request_deserializer=provider__pb2.ListRevenueByCustomerRequest.FromString,
                    response_serializer=provider__pb2.ListRevenueByCustomerResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'batchx.provider.ProviderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ProviderService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/batchx.provider.ProviderService/GetMetrics',
            provider__pb2.GetMetricsRequest.SerializeToString,
            provider__pb2.GetMetricsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListPayouts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/batchx.provider.ProviderService/ListPayouts',
            provider__pb2.ListPayoutsRequest.SerializeToString,
            provider__pb2.ListPayoutsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListRevenueByTools(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/batchx.provider.ProviderService/ListRevenueByTools',
            provider__pb2.ListRevenueByToolsRequest.SerializeToString,
            provider__pb2.ListRevenueByToolsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListRevenueByCustomer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/batchx.provider.ProviderService/ListRevenueByCustomer',
            provider__pb2.ListRevenueByCustomerRequest.SerializeToString,
            provider__pb2.ListRevenueByCustomerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
