{"version":3,"file":"lib_jupyterlab_index_js.7e2e20e3f016c99ef291.js","mappings":"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","sources":["webpack://@datalayer/jupyter-rtc-test/./style/base.css","webpack://@datalayer/jupyter-rtc-test/./style/index.css","webpack://@datalayer/jupyter-rtc-test/./lib/components/tester/Stresser.js","webpack://@datalayer/jupyter-rtc-test/./lib/components/tester/Tests.js","webpack://@datalayer/jupyter-rtc-test/./lib/jupyterlab/handler.js","webpack://@datalayer/jupyter-rtc-test/./lib/jupyterlab/index.js","webpack://@datalayer/jupyter-rtc-test/./lib/jupyterlab/widget.js","webpack://@datalayer/jupyter-rtc-test/./style/index.css?0140"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"/*\\n    See the JupyterLab Developer Guide for useful CSS Patterns:\\n\\n    https://jupyterlab.readthedocs.io/en/stable/developer/css.html\\n*/\\n\\n.jupyterrtctest-container {\\n  overflow-y: visible;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./style/base.css\"],\"names\":[],\"mappings\":\"AAAA;;;;CAIC;;AAED;EACE,mBAAmB;AACrB\",\"sourcesContent\":[\"/*\\n    See the JupyterLab Developer Guide for useful CSS Patterns:\\n\\n    https://jupyterlab.readthedocs.io/en/stable/developer/css.html\\n*/\\n\\n.jupyterrtctest-container {\\n  overflow-y: visible;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_AT_RULE_IMPORT_0___ from \"-!../node_modules/css-loader/dist/cjs.js!./base.css\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n___CSS_LOADER_EXPORT___.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n\", \"\",{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { ThemeProvider, BaseStyles, Box } from '@primer/react';\nimport { UnderlineNav } from '@primer/react/drafts';\nimport { CodeIcon } from '@primer/octicons-react';\nimport Tests from './Tests';\nconst Stresser = () => {\n    const [tab, setTab] = useState(1);\n    return (_jsx(_Fragment, { children: _jsx(ThemeProvider, { children: _jsx(BaseStyles, { children: _jsxs(Box, { children: [_jsx(UnderlineNav, { children: _jsx(UnderlineNav.Item, { \"aria-current\": \"page\", icon: CodeIcon, onSelect: e => {\n                                    e.preventDefault();\n                                    setTab(1);\n                                }, children: \"Tests\" }) }), _jsx(Box, { p: 3, children: tab === 1 && _jsx(Tests, {}) })] }) }) }) }));\n};\nexport default Stresser;\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useState, useEffect, useCallback } from 'react';\nimport { Button, Box } from '@primer/react';\nimport useWebSocket, { ReadyState } from 'react-use-websocket';\nconst Tests = () => {\n    const [messages, setMessages] = useState(new Map());\n    const [running, setRunning] = useState(false);\n    const [socketUrl, _] = useState('ws://localhost:8888/jupyter_rtc_test/stresser');\n    const [messageHistory, setMessageHistory] = useState([]);\n    const { sendMessage, lastMessage, readyState } = useWebSocket(socketUrl);\n    const sendStart = useCallback(() => sendMessage('start'), []);\n    const sendStop = useCallback(() => sendMessage('stop'), []);\n    useEffect(() => {\n        if (lastMessage !== null) {\n            setMessageHistory((prev) => prev.concat(lastMessage));\n            const data = lastMessage.data;\n            if (data.startsWith('info:')) {\n                const parts = data.split(':');\n                const id = Number(parts[1]);\n                const text = parts[2];\n                messages.set(id, { id, text });\n                setMessages(messages);\n            }\n        }\n    }, [lastMessage, setMessageHistory]);\n    const startTest = () => {\n        sendStart();\n        setRunning(true);\n    };\n    const stopTest = () => {\n        sendStop();\n        setRunning(false);\n    };\n    return (_jsx(_Fragment, { children: _jsxs(Box, { sx: { display: 'flex' }, children: [_jsx(Box, { children: running ?\n                        _jsx(Button, { variant: \"danger\", onClick: stopTest, disabled: readyState !== ReadyState.OPEN, children: \"Stop test\" })\n                        :\n                            _jsx(Button, { variant: \"primary\", onClick: startTest, disabled: readyState !== ReadyState.OPEN, children: \"Start test\" }) }), _jsxs(Box, { ml: 3, children: [_jsx(Box, { children: Array.from(messages.values()).sort((a, b) => (a.id < b.id ? -1 : (a.id == b.id ? 0 : 1))).map(message => {\n                                return _jsxs(Box, { children: [message.id, \" \", message.text] }, message.id);\n                            }) }), _jsx(Box, { children: messageHistory.map((value, index) => {\n                                return _jsx(Box, { children: value.data }, index);\n                            }) })] })] }) }));\n};\nexport default Tests;\n","import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'jupyter_rtc_test', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","import { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { MainAreaWidget, ICommandPalette } from '@jupyterlab/apputils';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { LabIcon } from '@jupyterlab/ui-components';\nimport { requestAPI } from './handler';\nimport { JupyterRTCTestWidget } from './widget';\nimport jupyterRtcTestSvg from '../../style/svg/jupyter-rtc-test.svg';\nimport './../../style/index.css';\n/**\n * The command IDs used by the plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.create = 'create-jupyter-rtc-test-widget';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Initialization data for the @datalayer/jupyter-rtc-test extension.\n */\nconst plugin = {\n    id: '@datalayer/jupyter-rtc-test:plugin',\n    autoStart: true,\n    requires: [ICommandPalette],\n    optional: [ISettingRegistry, ILauncher],\n    activate: (app, palette, settingRegistry, launcher) => {\n        const { commands } = app;\n        const command = CommandIDs.create;\n        const jupyterRtcTestIcon = new LabIcon({\n            name: 'jupyter-rtc-test:icon',\n            svgstr: jupyterRtcTestSvg,\n        });\n        commands.addCommand(command, {\n            caption: 'Show Jupyter RTC Test',\n            label: 'Jupyter RTC Test',\n            icon: (args) => jupyterRtcTestIcon,\n            execute: () => {\n                const content = new JupyterRTCTestWidget();\n                const widget = new MainAreaWidget({ content });\n                widget.title.label = 'Jupyter RTC Test';\n                widget.title.icon = jupyterRtcTestIcon;\n                app.shell.add(widget, 'main');\n            }\n        });\n        const category = 'Jupyter RTC Test';\n        palette.addItem({ command, category, args: { origin: 'from palette' } });\n        if (launcher) {\n            launcher.add({\n                command,\n                category: 'Datalayer',\n                rank: 99\n            });\n        }\n        console.log('JupyterLab extension @datalayer/jupyter-rtc-test is activated!');\n        if (settingRegistry) {\n            settingRegistry\n                .load(plugin.id)\n                .then(settings => {\n                console.log('@datalayer/jupyter-rtc-test settings loaded:', settings.composite);\n            })\n                .catch(reason => {\n                console.error('Failed to load settings for @datalayer/jupyter-rtc-test.', reason);\n            });\n        }\n        requestAPI('get_config')\n            .then(data => {\n            console.log(data);\n        })\n            .catch(reason => {\n            console.error(`The jupyter_rtc_test server extension appears to be missing.\\n${reason}`);\n        });\n    }\n};\nexport default plugin;\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { ReactWidget } from '@jupyterlab/apputils';\nimport Tester from '../components/tester/Stresser';\nexport class JupyterRTCTestWidget extends ReactWidget {\n    constructor() {\n        super();\n        this.addClass('jupyterrtctest-container');\n    }\n    render() {\n        return _jsx(Tester, {});\n    }\n}\n","import api from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../node_modules/css-loader/dist/cjs.js!./index.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};"],"names":[],"sourceRoot":""}