# Since bazel_to_cmake doesn't have a global view of targets, it cannot apply
# aspects to collect the proto_library() sources in order to build e.g. upbdefs.
# As a workaround the upb targets are injected into the reposoitory here so that
# other upb libraries can link to the common protos.
#
#  These also become the "well-known-protos" depdendencies for upb/upbdefs.

load(
    "@com_google_protobuf_upb//bazel:upb_proto_library.bzl",
    "upb_proto_library",
    "upb_proto_reflection_library",
)

WELL_KNOWN_TYPES = [
    "any",
    "api",
    "duration",
    "empty",
    "field_mask",
    "source_context",
    "struct",
    "timestamp",
    "type",
    "wrappers",
]

cc_library(
    name = "b2cmake_wkt_cc_proto",
    srcs = ["src/google/protobuf/" + wkt + ".pb.cc" for wkt in WELL_KNOWN_TYPES],
    hdrs = ["src/google/protobuf/" + wkt + ".pb.h" for wkt in WELL_KNOWN_TYPES],
    includes = ["src"],
    strip_include_prefix = "src",
    deps = ["//src/google/protobuf:protobuf_nowkt"],
)

# NOTE: the :wkt_upb_proto and :wkt_upbdefs_proto targets could, in theory,
# be created here, since there is no dependency between upb and protobuf
# because the upb and upbdefs protos have been patched in, however that would
# exclude using the system protobuf compiler in the build.
