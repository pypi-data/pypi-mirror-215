{"version":3,"sources":["stChat.tsx","index.tsx"],"names":["hljs","configure","cssSelector","Message","styled","div","display","border","borderRadius","padding","margin","maxWidth","Avatar","img","height","width","ChatMessage","flex","withStreamlitConnection","props","_props$args","args","isUser","avatarStyle","seed","message","logo","allowHTML","extLinks","avatarUrl","concat","theme","chatStyle","flexDirection","fontFamily","font","messageStyle","background","secondaryBackgroundColor","messageRef","React","useRef","mdFormat","useEffect","highlightAll","resizeObserver","ResizeObserver","Streamlit","setFrameHeight","current","observe","disconnect","window","isSecureContext","codes","getElementsByTagName","_loop","pre","button","document","createElement","innerHTML","className","addEventListener","console","log","navigator","clipboard","writeText","innerText","then","tooltip","getElementsByClassName","setTimeout","err","style","position","appendChild","length","ref","onLoad","src","Markdown","options","overrides","a","component","target","undefined","ReactDOM","render","StrictMode","Chat","getElementById"],"mappings":"iSAcAA,IAAKC,UAAU,CACbC,YAAa,aAGf,IAAMC,EAAUC,IAAOC,IAAI,CACzBC,QAAS,eAETC,OAAQ,wBACRC,aAAc,OACdC,QAAS,YACTC,OAAQ,WACRC,SAAU,QAGNC,EAASR,IAAOS,IAAI,CACxBN,OAAO,wBACPC,aAAc,MACdM,OAAQ,OACRC,MAAO,OACPL,OAAQ,IAGJM,EAAcZ,IAAOC,IAAI,CAC7BC,QAAS,OACTI,OAAQ,EACRK,MAAO,OACPE,KAAM,MAyFOC,eAtF0B,SAACC,GACxC,IAAAC,EAA0ED,EAAME,KAAxEC,EAAMF,EAANE,OAAQC,EAAWH,EAAXG,YAAaC,EAAIJ,EAAJI,KAAMC,EAAOL,EAAPK,QAASC,EAAIN,EAAJM,KAAMC,EAASP,EAATO,UAAWC,EAAQR,EAARQ,SACvDC,EAAcH,GAAW,gCAAAI,OAAmCP,EAAW,cAAAO,OAAaN,GAClFO,EAAUZ,EAAVY,MAEFC,EAAiC,CACrCC,cAAeX,EAAS,cAAgB,MACxCY,WAAW,GAADJ,OAAU,OAALC,QAAK,IAALA,OAAK,EAALA,EAAOI,KAAI,uCAGtBC,EAAe,CACnBC,WAAiB,OAALN,QAAK,IAALA,OAAK,EAALA,EAAOO,0BAGfC,EAAaC,IAAMC,OAAuB,MAC1CC,EAAWf,IAAa,EAiD9B,OA9CAgB,qBAAU,WACR3C,IAAK4C,kBAIPD,qBAAU,WACR,IAAME,EAAiB,IAAIC,gBAAe,WACxCC,IAAUC,oBAKZ,OAHIT,EAAWU,SACbJ,EAAeK,QAAQX,EAAWU,SAE7B,WACLJ,EAAeM,gBAEhB,CAACZ,IAGJI,qBAAU,WACR,GAAIJ,EAAWU,SAAWG,OAAOC,gBAE7B,IADF,IAAMC,EAAQf,EAAWU,QAAQM,qBAAqB,OAAMC,EAAA,SAAAC,GAExD,IAAMC,EAASC,SAASC,cAAc,OACtCF,EAAOG,UAAY,gFACnBH,EAAOI,UAAY,cACnBJ,EAAOK,iBAAiB,SAAS,WAC/B,IACAC,QAAQC,IAAI,WACZC,UAAUC,UAAUC,UAAUd,EAAMG,GAAKY,WAAWC,MAAK,WACvD,IAAMC,EAAUjB,EAAMG,GAAKe,uBAAuB,eAAe,GACjED,EAAQV,UAAY,UACpBY,YAAW,WACTF,EAAQV,UAAY,sBACnB,QAEH,MAAOa,GACPV,QAAQC,IAAI,mBAAoBS,OAGpCpB,EAAMG,GAAKkB,MAAMC,SAAW,WAC5BtB,EAAMG,GAAKoB,YAAYnB,IAnBjBD,EAAM,EAAGA,EAAMH,EAAMwB,OAAQrB,IAAKD,EAAAC,KAsB7C,CAAClB,IAGGC,IAAAoB,cAAC5C,EAAW,CAAC2D,MAAO3C,EAAW+C,IAAKxC,EACzCyC,OAAQ,WACNjC,IAAUC,iBACVgB,QAAQC,IAAI,YAGdzB,IAAAoB,cAAChD,EAAM,CAACqE,IAAKpD,IACbW,IAAAoB,cAACzD,EAAO,CAACwE,MAAOvC,GACbM,EACCF,IAAAoB,cAACsB,IAAQ,CACPC,QAAS,CACPC,UAAWxD,EAAW,CACpByD,EAAG,CAAEC,UAAW,IAAKnE,MAAO,CAAEoE,OAAQ,iBACpCC,IAEN/D,GACDA,O,OCtHTgE,IAASC,OACPlD,IAAAoB,cAACpB,IAAMmD,WAAU,KACfnD,IAAAoB,cAACgC,EAAI,OAEPjC,SAASkC,eAAe,W","file":"static/js/main.59f02cc6.chunk.js","sourcesContent":["import {\n  // eslint-disable-next-line \n  Streamlit,\n  ComponentProps,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { useEffect } from \"react\"\nimport styled from '@emotion/styled'\n\nimport Markdown from 'markdown-to-jsx'\n\nimport hljs from \"highlight.js\"\nimport \"highlight.js/styles/base16/dracula.css\"\n\nhljs.configure({\n  cssSelector: \"pre code\"\n})\n\nconst Message = styled.div({\n  display: 'inline-block',\n\n  border: '1px solid transparent',\n  borderRadius: '10px',\n  padding: '10px 2rem',\n  margin: '5px 20px',\n  maxWidth: '80%',\n})\n\nconst Avatar = styled.img({\n  border: `1px solid transparent`,\n  borderRadius: '50%',\n  height: '3rem',\n  width: '3rem',\n  margin: 0\n})\n\nconst ChatMessage = styled.div({\n  display: 'flex',\n  margin: 0,\n  width: '100%',\n  flex: '1',\n})\n\nconst ChatUI: React.FC<ComponentProps> = (props) => {\n  const { isUser, avatarStyle, seed, message, logo, allowHTML, extLinks } = props.args;\n  const avatarUrl = !!logo ? logo : `https://api.dicebear.com/5.x/${avatarStyle}/svg?seed=${seed}`\n  const { theme } = props\n\n  const chatStyle: React.CSSProperties = {\n    flexDirection: isUser ? 'row-reverse' : 'row',\n    fontFamily: `${theme?.font}, 'Segoe UI', 'Roboto', sans-serif`,\n  }\n\n  const messageStyle = {\n    background: theme?.secondaryBackgroundColor,\n  }\n\n  const messageRef = React.useRef<HTMLDivElement>(null)\n  const mdFormat = allowHTML || false\n\n  // Highlight code blocks\n  useEffect(() => {\n    hljs.highlightAll()\n  });\n\n  // Watch for changes in the element and auto update the frame height\n  useEffect(() => {\n    const resizeObserver = new ResizeObserver(() => {\n      Streamlit.setFrameHeight()\n    })\n    if (messageRef.current) {\n      resizeObserver.observe(messageRef.current)\n    }\n    return () => {\n      resizeObserver.disconnect()\n    }\n  }, [messageRef])\n\n  // Copy code to clipboard\n  useEffect(() => {\n    if (messageRef.current && window.isSecureContext) {\n      const codes = messageRef.current.getElementsByTagName('pre')\n        for(let pre = 0; pre < codes.length; pre++) {\n          const button = document.createElement('div')\n          button.innerHTML = '<span class=\"tooltiptext\" id=\"myTooltip\">Copy to clipboard</span>ðŸ“‹'\n          button.className = 'copy-button'\n          button.addEventListener('click', () => {\n            try {\n            console.log('copying')\n            navigator.clipboard.writeText(codes[pre].innerText).then(() => {\n              const tooltip = codes[pre].getElementsByClassName(\"tooltiptext\")[0]\n              tooltip.innerHTML = 'Copied!'\n              setTimeout(() => {\n                tooltip.innerHTML = 'Copy to clipboard'\n              }, 2000)\n            })\n            } catch (err) {\n              console.log('Failed to copy: ', err)\n            }\n          })\n          codes[pre].style.position = 'relative'\n          codes[pre].appendChild(button)\n        }\n    }    \n  }, [messageRef])\n    \n\n  return <ChatMessage style={chatStyle} ref={messageRef}\n    onLoad={() => {\n      Streamlit.setFrameHeight()\n      console.log('onLoad')\n    }}\n  >\n    <Avatar src={avatarUrl} />\n    <Message style={messageStyle}>\n      {mdFormat ?\n        <Markdown\n          options={{\n            overrides: extLinks ? {\n              a: { component: 'a', props: { target: \"_blank\" } }\n            } : undefined,\n          }}\n        >{message}</Markdown> :\n         message \n      }\n    </Message>\n  </ChatMessage>\n}\n\nexport default withStreamlitConnection(ChatUI);\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport Chat from \"./stChat\"\nimport \"./index.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Chat />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}