import typing
from System import IEquatable_1
from TransformsAI.Animo.Objects import TypeIds

class AffinityData(IEquatable_1[AffinityData]):
    @property
    def AffinityType(self) -> AffinityType: ...
    @AffinityType.setter
    def AffinityType(self, value: AffinityType) -> AffinityType: ...
    @property
    def CharacterId(self) -> int: ...
    @CharacterId.setter
    def CharacterId(self, value: int) -> int: ...
    @property
    def ItemType(self) -> TypeIds: ...
    @ItemType.setter
    def ItemType(self, value: TypeIds) -> TypeIds: ...
    def GetHashCode(self) -> int: ...
    def __eq__(self, left: AffinityData, right: AffinityData) -> bool: ...
    def __ne__(self, left: AffinityData, right: AffinityData) -> bool: ...
    # Skipped Equals due to it being static, abstract and generic.

    Equals : Equals_MethodGroup
    class Equals_MethodGroup:
        @typing.overload
        def __call__(self, other: AffinityData) -> bool:...
        @typing.overload
        def __call__(self, obj: typing.Any) -> bool:...



class AffinityType(typing.SupportsInt):
    @typing.overload
    def __init__(self, value : int) -> None: ...
    @typing.overload
    def __init__(self, value : int, force_if_true: bool) -> None: ...
    def __int__(self) -> int: ...
    
    # Values:
    None_ : AffinityType # 0
    Item : AffinityType # 1
    Character : AffinityType # 2

