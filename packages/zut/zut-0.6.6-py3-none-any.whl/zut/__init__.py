from __future__ import annotations

try:
    # Version generated by setuptools_scm during build
    from ._version import __version__
except ImportError:
    __version__ = None

# Top-level API (available directly from "zut" namespace). Does not require any dependency.
from .colors import Colors
from .commands import create_command_parser, add_func_command, add_module_command, add_package_commands, get_command_func, run_command_func, exec_command_func, run_command_parser, exec_command_parser, ArgumentParser
from .config import get_config, get_config_files, ExtendedConfigParser
from .csv import get_default_csv_delimiter
from .datetime import now_aware, make_aware, is_aware
from .filesh import configure_smb_credentials  # other functions should be called directly with the module, e.g. `from zut import filesh`, then `filesh.open_file(...)`
from .git import get_git_tags, get_git_hash, git_has_changes, check_git_version_tag
from .gpg import download_gpg_key, verify_gpg_signature
from .inout import out_file, out_table, in_table, transfer_table, OutFile, OutTable, OutTabulate, OutCsv, OutExcel, OutDb, InTable, InCsv, InExcel, InDb, normalize_inout
from .json import ExtendedJSONDecoder, ExtendedJSONEncoder
from .lang import ZUT_ROOT, is_list_or_tuple_of
from .logging import configure_logging, DEFAULT_LOGGING_DICTCONFIG
from .network import configure_proxy, check_connectivity, check_socket
from .numeric import human_bytes, parse_decimal
from .process import get_exit_code, check_completed_subprocess
from .text import slugify, slugify_snake, remove_whitespaces, remove_consecutive_whitespaces, reconfigure_encoding
from .venv import get_venv, is_in_venv
from .unittest import StartTestProgram


# NOTE: Inner API: the following features rely on extra dependencies.
# zut.credentials       -> [credentials]
# zut.db                -> [pg] or [mssql]
# zut.django            -> [django]
# zut.excel             -> [excel]
# zut.filesh            -> [smb] (for operations on Samba/Windows shares)
# zut.network.winhttp   -> [winhttp]
# zut.typing            -> [typing]
