Metadata-Version: 2.1
Name: SmithWagnerCV
Version: 0.0.6
Summary: Produces critical values for value-added learning scores proposed in Smith and Wagner (2018) through Monte Carlo simulations.
Project-URL: Homepage, https://github.com/tazzben/SmithWagnerCV
Project-URL: Bug Tracker, https://github.com/tazzben/SmithWagnerCV
Author-email: Ben Smith <bosmith@unomaha.edu>
Maintainer-email: Ben Smith <bosmith@unomaha.edu>
License-Expression: MIT
License-File: LICENSE
Keywords: Monte Carlo,Statistics,Value-added Learning
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.8
Requires-Dist: numpy>=1.21.0
Requires-Dist: pandas>=1.3.0
Requires-Dist: tqdm>=4.26.0
Description-Content-Type: text/markdown

# SmithWagnerCV
 
This module produces critical values for the disaggregated learning types as described in Smith and Wagner (2018) and Smith and White (2021). 

## Examples

Run a Monte Carlo Simulation of mu value of 0.1 and 25 students.

```python
from SmithWagnerCV import RunSimulation

d = RunSimulation(25, 0.1)

```

Simulate all combinations of [10,20] students and [0.1,0.5] mu values and return them as a dictionary

```python
from SmithWagnerCV import SimulationTable

d = SimulationTable([10,20], [0.1,0.5])

```
Simulate all combinations of [10,20] students and [0.1,0.5] mu values and save them to CSV files

```python
from SmithWagnerCV import SaveSimulationTable 

d = SaveSimulationTable([10,20], [0.1,0.5])

```

## Installation

Using the pip tool, you can install this module with the following command:

```
pip install SmithWagnerCV
```

Using the conda command you can type the following:

```
conda install -c tazzben smithwagnercv  
```
