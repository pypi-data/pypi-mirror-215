# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ResponsePipelineStepRunSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'env_vars': 'OrmEnvVars',
        'kernel_cluster': 'ResponseKernelCluster',
        'kernel_cluster_select_policies': 'OrmKernelClusterSelectPolicies',
        'kernel_image': 'ResponseKernelImage',
        'kernel_resource_spec': 'ResponseKernelResourceSpec',
        'start_command': 'str',
        'variable_specs': 'list[PipelinePipelineSingleVariableSpec]',
        'volume_tree': 'VolumetreenodeVolumeTreeNode'
    }

    attribute_map = {
        'env_vars': 'env_vars',
        'kernel_cluster': 'kernel_cluster',
        'kernel_cluster_select_policies': 'kernel_cluster_select_policies',
        'kernel_image': 'kernel_image',
        'kernel_resource_spec': 'kernel_resource_spec',
        'start_command': 'start_command',
        'variable_specs': 'variable_specs',
        'volume_tree': 'volume_tree'
    }

    def __init__(self, env_vars=None, kernel_cluster=None, kernel_cluster_select_policies=None, kernel_image=None, kernel_resource_spec=None, start_command=None, variable_specs=None, volume_tree=None, local_vars_configuration=None):  # noqa: E501
        """ResponsePipelineStepRunSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._env_vars = None
        self._kernel_cluster = None
        self._kernel_cluster_select_policies = None
        self._kernel_image = None
        self._kernel_resource_spec = None
        self._start_command = None
        self._variable_specs = None
        self._volume_tree = None
        self.discriminator = None

        if env_vars is not None:
            self.env_vars = env_vars
        if kernel_cluster is not None:
            self.kernel_cluster = kernel_cluster
        if kernel_cluster_select_policies is not None:
            self.kernel_cluster_select_policies = kernel_cluster_select_policies
        if kernel_image is not None:
            self.kernel_image = kernel_image
        if kernel_resource_spec is not None:
            self.kernel_resource_spec = kernel_resource_spec
        self.start_command = start_command
        if variable_specs is not None:
            self.variable_specs = variable_specs
        if volume_tree is not None:
            self.volume_tree = volume_tree

    @property
    def env_vars(self):
        """Gets the env_vars of this ResponsePipelineStepRunSpec.  # noqa: E501


        :return: The env_vars of this ResponsePipelineStepRunSpec.  # noqa: E501
        :rtype: OrmEnvVars
        """
        return self._env_vars

    @env_vars.setter
    def env_vars(self, env_vars):
        """Sets the env_vars of this ResponsePipelineStepRunSpec.


        :param env_vars: The env_vars of this ResponsePipelineStepRunSpec.  # noqa: E501
        :type env_vars: OrmEnvVars
        """

        self._env_vars = env_vars

    @property
    def kernel_cluster(self):
        """Gets the kernel_cluster of this ResponsePipelineStepRunSpec.  # noqa: E501


        :return: The kernel_cluster of this ResponsePipelineStepRunSpec.  # noqa: E501
        :rtype: ResponseKernelCluster
        """
        return self._kernel_cluster

    @kernel_cluster.setter
    def kernel_cluster(self, kernel_cluster):
        """Sets the kernel_cluster of this ResponsePipelineStepRunSpec.


        :param kernel_cluster: The kernel_cluster of this ResponsePipelineStepRunSpec.  # noqa: E501
        :type kernel_cluster: ResponseKernelCluster
        """

        self._kernel_cluster = kernel_cluster

    @property
    def kernel_cluster_select_policies(self):
        """Gets the kernel_cluster_select_policies of this ResponsePipelineStepRunSpec.  # noqa: E501


        :return: The kernel_cluster_select_policies of this ResponsePipelineStepRunSpec.  # noqa: E501
        :rtype: OrmKernelClusterSelectPolicies
        """
        return self._kernel_cluster_select_policies

    @kernel_cluster_select_policies.setter
    def kernel_cluster_select_policies(self, kernel_cluster_select_policies):
        """Sets the kernel_cluster_select_policies of this ResponsePipelineStepRunSpec.


        :param kernel_cluster_select_policies: The kernel_cluster_select_policies of this ResponsePipelineStepRunSpec.  # noqa: E501
        :type kernel_cluster_select_policies: OrmKernelClusterSelectPolicies
        """

        self._kernel_cluster_select_policies = kernel_cluster_select_policies

    @property
    def kernel_image(self):
        """Gets the kernel_image of this ResponsePipelineStepRunSpec.  # noqa: E501


        :return: The kernel_image of this ResponsePipelineStepRunSpec.  # noqa: E501
        :rtype: ResponseKernelImage
        """
        return self._kernel_image

    @kernel_image.setter
    def kernel_image(self, kernel_image):
        """Sets the kernel_image of this ResponsePipelineStepRunSpec.


        :param kernel_image: The kernel_image of this ResponsePipelineStepRunSpec.  # noqa: E501
        :type kernel_image: ResponseKernelImage
        """

        self._kernel_image = kernel_image

    @property
    def kernel_resource_spec(self):
        """Gets the kernel_resource_spec of this ResponsePipelineStepRunSpec.  # noqa: E501


        :return: The kernel_resource_spec of this ResponsePipelineStepRunSpec.  # noqa: E501
        :rtype: ResponseKernelResourceSpec
        """
        return self._kernel_resource_spec

    @kernel_resource_spec.setter
    def kernel_resource_spec(self, kernel_resource_spec):
        """Sets the kernel_resource_spec of this ResponsePipelineStepRunSpec.


        :param kernel_resource_spec: The kernel_resource_spec of this ResponsePipelineStepRunSpec.  # noqa: E501
        :type kernel_resource_spec: ResponseKernelResourceSpec
        """

        self._kernel_resource_spec = kernel_resource_spec

    @property
    def start_command(self):
        """Gets the start_command of this ResponsePipelineStepRunSpec.  # noqa: E501


        :return: The start_command of this ResponsePipelineStepRunSpec.  # noqa: E501
        :rtype: str
        """
        return self._start_command

    @start_command.setter
    def start_command(self, start_command):
        """Sets the start_command of this ResponsePipelineStepRunSpec.


        :param start_command: The start_command of this ResponsePipelineStepRunSpec.  # noqa: E501
        :type start_command: str
        """
        if self.local_vars_configuration.client_side_validation and start_command is None:  # noqa: E501
            raise ValueError("Invalid value for `start_command`, must not be `None`")  # noqa: E501

        self._start_command = start_command

    @property
    def variable_specs(self):
        """Gets the variable_specs of this ResponsePipelineStepRunSpec.  # noqa: E501


        :return: The variable_specs of this ResponsePipelineStepRunSpec.  # noqa: E501
        :rtype: list[PipelinePipelineSingleVariableSpec]
        """
        return self._variable_specs

    @variable_specs.setter
    def variable_specs(self, variable_specs):
        """Sets the variable_specs of this ResponsePipelineStepRunSpec.


        :param variable_specs: The variable_specs of this ResponsePipelineStepRunSpec.  # noqa: E501
        :type variable_specs: list[PipelinePipelineSingleVariableSpec]
        """

        self._variable_specs = variable_specs

    @property
    def volume_tree(self):
        """Gets the volume_tree of this ResponsePipelineStepRunSpec.  # noqa: E501


        :return: The volume_tree of this ResponsePipelineStepRunSpec.  # noqa: E501
        :rtype: VolumetreenodeVolumeTreeNode
        """
        return self._volume_tree

    @volume_tree.setter
    def volume_tree(self, volume_tree):
        """Sets the volume_tree of this ResponsePipelineStepRunSpec.


        :param volume_tree: The volume_tree of this ResponsePipelineStepRunSpec.  # noqa: E501
        :type volume_tree: VolumetreenodeVolumeTreeNode
        """

        self._volume_tree = volume_tree

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponsePipelineStepRunSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponsePipelineStepRunSpec):
            return True

        return self.to_dict() != other.to_dict()
