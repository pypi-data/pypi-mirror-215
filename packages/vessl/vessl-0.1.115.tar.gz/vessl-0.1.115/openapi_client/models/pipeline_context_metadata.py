# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class PipelineContextMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'current_step_id': 'int',
        'current_step_type': 'str',
        'pipeline_arguments': 'dict[str, str]',
        'pipeline_execution_id': 'int',
        'step_key_dictionary': 'dict[str, int]'
    }

    attribute_map = {
        'current_step_id': 'current_step_id',
        'current_step_type': 'current_step_type',
        'pipeline_arguments': 'pipeline_arguments',
        'pipeline_execution_id': 'pipeline_execution_id',
        'step_key_dictionary': 'step_key_dictionary'
    }

    def __init__(self, current_step_id=None, current_step_type=None, pipeline_arguments=None, pipeline_execution_id=None, step_key_dictionary=None, local_vars_configuration=None):  # noqa: E501
        """PipelineContextMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._current_step_id = None
        self._current_step_type = None
        self._pipeline_arguments = None
        self._pipeline_execution_id = None
        self._step_key_dictionary = None
        self.discriminator = None

        if current_step_id is not None:
            self.current_step_id = current_step_id
        if current_step_type is not None:
            self.current_step_type = current_step_type
        if pipeline_arguments is not None:
            self.pipeline_arguments = pipeline_arguments
        if pipeline_execution_id is not None:
            self.pipeline_execution_id = pipeline_execution_id
        if step_key_dictionary is not None:
            self.step_key_dictionary = step_key_dictionary

    @property
    def current_step_id(self):
        """Gets the current_step_id of this PipelineContextMetadata.  # noqa: E501


        :return: The current_step_id of this PipelineContextMetadata.  # noqa: E501
        :rtype: int
        """
        return self._current_step_id

    @current_step_id.setter
    def current_step_id(self, current_step_id):
        """Sets the current_step_id of this PipelineContextMetadata.


        :param current_step_id: The current_step_id of this PipelineContextMetadata.  # noqa: E501
        :type current_step_id: int
        """

        self._current_step_id = current_step_id

    @property
    def current_step_type(self):
        """Gets the current_step_type of this PipelineContextMetadata.  # noqa: E501


        :return: The current_step_type of this PipelineContextMetadata.  # noqa: E501
        :rtype: str
        """
        return self._current_step_type

    @current_step_type.setter
    def current_step_type(self, current_step_type):
        """Sets the current_step_type of this PipelineContextMetadata.


        :param current_step_type: The current_step_type of this PipelineContextMetadata.  # noqa: E501
        :type current_step_type: str
        """

        self._current_step_type = current_step_type

    @property
    def pipeline_arguments(self):
        """Gets the pipeline_arguments of this PipelineContextMetadata.  # noqa: E501


        :return: The pipeline_arguments of this PipelineContextMetadata.  # noqa: E501
        :rtype: dict[str, str]
        """
        return self._pipeline_arguments

    @pipeline_arguments.setter
    def pipeline_arguments(self, pipeline_arguments):
        """Sets the pipeline_arguments of this PipelineContextMetadata.


        :param pipeline_arguments: The pipeline_arguments of this PipelineContextMetadata.  # noqa: E501
        :type pipeline_arguments: dict[str, str]
        """

        self._pipeline_arguments = pipeline_arguments

    @property
    def pipeline_execution_id(self):
        """Gets the pipeline_execution_id of this PipelineContextMetadata.  # noqa: E501


        :return: The pipeline_execution_id of this PipelineContextMetadata.  # noqa: E501
        :rtype: int
        """
        return self._pipeline_execution_id

    @pipeline_execution_id.setter
    def pipeline_execution_id(self, pipeline_execution_id):
        """Sets the pipeline_execution_id of this PipelineContextMetadata.


        :param pipeline_execution_id: The pipeline_execution_id of this PipelineContextMetadata.  # noqa: E501
        :type pipeline_execution_id: int
        """

        self._pipeline_execution_id = pipeline_execution_id

    @property
    def step_key_dictionary(self):
        """Gets the step_key_dictionary of this PipelineContextMetadata.  # noqa: E501


        :return: The step_key_dictionary of this PipelineContextMetadata.  # noqa: E501
        :rtype: dict[str, int]
        """
        return self._step_key_dictionary

    @step_key_dictionary.setter
    def step_key_dictionary(self, step_key_dictionary):
        """Sets the step_key_dictionary of this PipelineContextMetadata.


        :param step_key_dictionary: The step_key_dictionary of this PipelineContextMetadata.  # noqa: E501
        :type step_key_dictionary: dict[str, int]
        """

        self._step_key_dictionary = step_key_dictionary

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PipelineContextMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PipelineContextMetadata):
            return True

        return self.to_dict() != other.to_dict()
