# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class PipelineJupyterVisualizationSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cluster_id': 'int',
        'cluster_node_ids': 'list[int]',
        'docker_credentials_id': 'int',
        'env_vars': 'list[OrmEnvVar]',
        'image_url': 'str',
        'resource_spec': 'OrmKernelResourceSpecField',
        'resource_spec_id': 'int',
        'start_command': 'str',
        'termination_protection': 'bool',
        'variable_specs': 'list[PipelinePipelineSingleVariableSpec]',
        'volume_claim_tree': 'VolumetreenodeVolumeTreeNode',
        'volumes': 'OrmVolumeMountRequests'
    }

    attribute_map = {
        'cluster_id': 'cluster_id',
        'cluster_node_ids': 'cluster_node_ids',
        'docker_credentials_id': 'docker_credentials_id',
        'env_vars': 'env_vars',
        'image_url': 'image_url',
        'resource_spec': 'resource_spec',
        'resource_spec_id': 'resource_spec_id',
        'start_command': 'start_command',
        'termination_protection': 'termination_protection',
        'variable_specs': 'variable_specs',
        'volume_claim_tree': 'volume_claim_tree',
        'volumes': 'volumes'
    }

    def __init__(self, cluster_id=None, cluster_node_ids=None, docker_credentials_id=None, env_vars=None, image_url=None, resource_spec=None, resource_spec_id=None, start_command=None, termination_protection=None, variable_specs=None, volume_claim_tree=None, volumes=None, local_vars_configuration=None):  # noqa: E501
        """PipelineJupyterVisualizationSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._cluster_id = None
        self._cluster_node_ids = None
        self._docker_credentials_id = None
        self._env_vars = None
        self._image_url = None
        self._resource_spec = None
        self._resource_spec_id = None
        self._start_command = None
        self._termination_protection = None
        self._variable_specs = None
        self._volume_claim_tree = None
        self._volumes = None
        self.discriminator = None

        self.cluster_id = cluster_id
        if cluster_node_ids is not None:
            self.cluster_node_ids = cluster_node_ids
        self.docker_credentials_id = docker_credentials_id
        if env_vars is not None:
            self.env_vars = env_vars
        self.image_url = image_url
        if resource_spec is not None:
            self.resource_spec = resource_spec
        self.resource_spec_id = resource_spec_id
        self.start_command = start_command
        if termination_protection is not None:
            self.termination_protection = termination_protection
        if variable_specs is not None:
            self.variable_specs = variable_specs
        if volume_claim_tree is not None:
            self.volume_claim_tree = volume_claim_tree
        if volumes is not None:
            self.volumes = volumes

    @property
    def cluster_id(self):
        """Gets the cluster_id of this PipelineJupyterVisualizationSpec.  # noqa: E501


        :return: The cluster_id of this PipelineJupyterVisualizationSpec.  # noqa: E501
        :rtype: int
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this PipelineJupyterVisualizationSpec.


        :param cluster_id: The cluster_id of this PipelineJupyterVisualizationSpec.  # noqa: E501
        :type cluster_id: int
        """
        if self.local_vars_configuration.client_side_validation and cluster_id is None:  # noqa: E501
            raise ValueError("Invalid value for `cluster_id`, must not be `None`")  # noqa: E501

        self._cluster_id = cluster_id

    @property
    def cluster_node_ids(self):
        """Gets the cluster_node_ids of this PipelineJupyterVisualizationSpec.  # noqa: E501


        :return: The cluster_node_ids of this PipelineJupyterVisualizationSpec.  # noqa: E501
        :rtype: list[int]
        """
        return self._cluster_node_ids

    @cluster_node_ids.setter
    def cluster_node_ids(self, cluster_node_ids):
        """Sets the cluster_node_ids of this PipelineJupyterVisualizationSpec.


        :param cluster_node_ids: The cluster_node_ids of this PipelineJupyterVisualizationSpec.  # noqa: E501
        :type cluster_node_ids: list[int]
        """

        self._cluster_node_ids = cluster_node_ids

    @property
    def docker_credentials_id(self):
        """Gets the docker_credentials_id of this PipelineJupyterVisualizationSpec.  # noqa: E501


        :return: The docker_credentials_id of this PipelineJupyterVisualizationSpec.  # noqa: E501
        :rtype: int
        """
        return self._docker_credentials_id

    @docker_credentials_id.setter
    def docker_credentials_id(self, docker_credentials_id):
        """Sets the docker_credentials_id of this PipelineJupyterVisualizationSpec.


        :param docker_credentials_id: The docker_credentials_id of this PipelineJupyterVisualizationSpec.  # noqa: E501
        :type docker_credentials_id: int
        """

        self._docker_credentials_id = docker_credentials_id

    @property
    def env_vars(self):
        """Gets the env_vars of this PipelineJupyterVisualizationSpec.  # noqa: E501


        :return: The env_vars of this PipelineJupyterVisualizationSpec.  # noqa: E501
        :rtype: list[OrmEnvVar]
        """
        return self._env_vars

    @env_vars.setter
    def env_vars(self, env_vars):
        """Sets the env_vars of this PipelineJupyterVisualizationSpec.


        :param env_vars: The env_vars of this PipelineJupyterVisualizationSpec.  # noqa: E501
        :type env_vars: list[OrmEnvVar]
        """

        self._env_vars = env_vars

    @property
    def image_url(self):
        """Gets the image_url of this PipelineJupyterVisualizationSpec.  # noqa: E501


        :return: The image_url of this PipelineJupyterVisualizationSpec.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this PipelineJupyterVisualizationSpec.


        :param image_url: The image_url of this PipelineJupyterVisualizationSpec.  # noqa: E501
        :type image_url: str
        """
        if self.local_vars_configuration.client_side_validation and image_url is None:  # noqa: E501
            raise ValueError("Invalid value for `image_url`, must not be `None`")  # noqa: E501

        self._image_url = image_url

    @property
    def resource_spec(self):
        """Gets the resource_spec of this PipelineJupyterVisualizationSpec.  # noqa: E501


        :return: The resource_spec of this PipelineJupyterVisualizationSpec.  # noqa: E501
        :rtype: OrmKernelResourceSpecField
        """
        return self._resource_spec

    @resource_spec.setter
    def resource_spec(self, resource_spec):
        """Sets the resource_spec of this PipelineJupyterVisualizationSpec.


        :param resource_spec: The resource_spec of this PipelineJupyterVisualizationSpec.  # noqa: E501
        :type resource_spec: OrmKernelResourceSpecField
        """

        self._resource_spec = resource_spec

    @property
    def resource_spec_id(self):
        """Gets the resource_spec_id of this PipelineJupyterVisualizationSpec.  # noqa: E501


        :return: The resource_spec_id of this PipelineJupyterVisualizationSpec.  # noqa: E501
        :rtype: int
        """
        return self._resource_spec_id

    @resource_spec_id.setter
    def resource_spec_id(self, resource_spec_id):
        """Sets the resource_spec_id of this PipelineJupyterVisualizationSpec.


        :param resource_spec_id: The resource_spec_id of this PipelineJupyterVisualizationSpec.  # noqa: E501
        :type resource_spec_id: int
        """

        self._resource_spec_id = resource_spec_id

    @property
    def start_command(self):
        """Gets the start_command of this PipelineJupyterVisualizationSpec.  # noqa: E501


        :return: The start_command of this PipelineJupyterVisualizationSpec.  # noqa: E501
        :rtype: str
        """
        return self._start_command

    @start_command.setter
    def start_command(self, start_command):
        """Sets the start_command of this PipelineJupyterVisualizationSpec.


        :param start_command: The start_command of this PipelineJupyterVisualizationSpec.  # noqa: E501
        :type start_command: str
        """
        if self.local_vars_configuration.client_side_validation and start_command is None:  # noqa: E501
            raise ValueError("Invalid value for `start_command`, must not be `None`")  # noqa: E501

        self._start_command = start_command

    @property
    def termination_protection(self):
        """Gets the termination_protection of this PipelineJupyterVisualizationSpec.  # noqa: E501


        :return: The termination_protection of this PipelineJupyterVisualizationSpec.  # noqa: E501
        :rtype: bool
        """
        return self._termination_protection

    @termination_protection.setter
    def termination_protection(self, termination_protection):
        """Sets the termination_protection of this PipelineJupyterVisualizationSpec.


        :param termination_protection: The termination_protection of this PipelineJupyterVisualizationSpec.  # noqa: E501
        :type termination_protection: bool
        """

        self._termination_protection = termination_protection

    @property
    def variable_specs(self):
        """Gets the variable_specs of this PipelineJupyterVisualizationSpec.  # noqa: E501


        :return: The variable_specs of this PipelineJupyterVisualizationSpec.  # noqa: E501
        :rtype: list[PipelinePipelineSingleVariableSpec]
        """
        return self._variable_specs

    @variable_specs.setter
    def variable_specs(self, variable_specs):
        """Sets the variable_specs of this PipelineJupyterVisualizationSpec.


        :param variable_specs: The variable_specs of this PipelineJupyterVisualizationSpec.  # noqa: E501
        :type variable_specs: list[PipelinePipelineSingleVariableSpec]
        """

        self._variable_specs = variable_specs

    @property
    def volume_claim_tree(self):
        """Gets the volume_claim_tree of this PipelineJupyterVisualizationSpec.  # noqa: E501


        :return: The volume_claim_tree of this PipelineJupyterVisualizationSpec.  # noqa: E501
        :rtype: VolumetreenodeVolumeTreeNode
        """
        return self._volume_claim_tree

    @volume_claim_tree.setter
    def volume_claim_tree(self, volume_claim_tree):
        """Sets the volume_claim_tree of this PipelineJupyterVisualizationSpec.


        :param volume_claim_tree: The volume_claim_tree of this PipelineJupyterVisualizationSpec.  # noqa: E501
        :type volume_claim_tree: VolumetreenodeVolumeTreeNode
        """

        self._volume_claim_tree = volume_claim_tree

    @property
    def volumes(self):
        """Gets the volumes of this PipelineJupyterVisualizationSpec.  # noqa: E501


        :return: The volumes of this PipelineJupyterVisualizationSpec.  # noqa: E501
        :rtype: OrmVolumeMountRequests
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this PipelineJupyterVisualizationSpec.


        :param volumes: The volumes of this PipelineJupyterVisualizationSpec.  # noqa: E501
        :type volumes: OrmVolumeMountRequests
        """

        self._volumes = volumes

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PipelineJupyterVisualizationSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PipelineJupyterVisualizationSpec):
            return True

        return self.to_dict() != other.to_dict()
