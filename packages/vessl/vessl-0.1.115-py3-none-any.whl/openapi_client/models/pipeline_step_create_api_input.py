# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class PipelineStepCreateAPIInput(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'str',
        'external_service_spec': 'PipelineExternalServiceSpec',
        'if_spec': 'PipelineIfSpec',
        'jupyter_visualization_spec': 'PipelineJupyterVisualizationSpec',
        'manual_input_spec': 'PipelineManualInputSpec',
        'run_spec': 'PipelineRunSpec',
        'spec_revision': 'int',
        'step_key': 'str',
        'title': 'str'
    }

    attribute_map = {
        'description': 'description',
        'external_service_spec': 'external_service_spec',
        'if_spec': 'if_spec',
        'jupyter_visualization_spec': 'jupyter_visualization_spec',
        'manual_input_spec': 'manual_input_spec',
        'run_spec': 'run_spec',
        'spec_revision': 'spec_revision',
        'step_key': 'step_key',
        'title': 'title'
    }

    def __init__(self, description=None, external_service_spec=None, if_spec=None, jupyter_visualization_spec=None, manual_input_spec=None, run_spec=None, spec_revision=None, step_key=None, title=None, local_vars_configuration=None):  # noqa: E501
        """PipelineStepCreateAPIInput - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._external_service_spec = None
        self._if_spec = None
        self._jupyter_visualization_spec = None
        self._manual_input_spec = None
        self._run_spec = None
        self._spec_revision = None
        self._step_key = None
        self._title = None
        self.discriminator = None

        self.description = description
        if external_service_spec is not None:
            self.external_service_spec = external_service_spec
        if if_spec is not None:
            self.if_spec = if_spec
        if jupyter_visualization_spec is not None:
            self.jupyter_visualization_spec = jupyter_visualization_spec
        if manual_input_spec is not None:
            self.manual_input_spec = manual_input_spec
        if run_spec is not None:
            self.run_spec = run_spec
        self.spec_revision = spec_revision
        self.step_key = step_key
        self.title = title

    @property
    def description(self):
        """Gets the description of this PipelineStepCreateAPIInput.  # noqa: E501


        :return: The description of this PipelineStepCreateAPIInput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PipelineStepCreateAPIInput.


        :param description: The description of this PipelineStepCreateAPIInput.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def external_service_spec(self):
        """Gets the external_service_spec of this PipelineStepCreateAPIInput.  # noqa: E501


        :return: The external_service_spec of this PipelineStepCreateAPIInput.  # noqa: E501
        :rtype: PipelineExternalServiceSpec
        """
        return self._external_service_spec

    @external_service_spec.setter
    def external_service_spec(self, external_service_spec):
        """Sets the external_service_spec of this PipelineStepCreateAPIInput.


        :param external_service_spec: The external_service_spec of this PipelineStepCreateAPIInput.  # noqa: E501
        :type external_service_spec: PipelineExternalServiceSpec
        """

        self._external_service_spec = external_service_spec

    @property
    def if_spec(self):
        """Gets the if_spec of this PipelineStepCreateAPIInput.  # noqa: E501


        :return: The if_spec of this PipelineStepCreateAPIInput.  # noqa: E501
        :rtype: PipelineIfSpec
        """
        return self._if_spec

    @if_spec.setter
    def if_spec(self, if_spec):
        """Sets the if_spec of this PipelineStepCreateAPIInput.


        :param if_spec: The if_spec of this PipelineStepCreateAPIInput.  # noqa: E501
        :type if_spec: PipelineIfSpec
        """

        self._if_spec = if_spec

    @property
    def jupyter_visualization_spec(self):
        """Gets the jupyter_visualization_spec of this PipelineStepCreateAPIInput.  # noqa: E501


        :return: The jupyter_visualization_spec of this PipelineStepCreateAPIInput.  # noqa: E501
        :rtype: PipelineJupyterVisualizationSpec
        """
        return self._jupyter_visualization_spec

    @jupyter_visualization_spec.setter
    def jupyter_visualization_spec(self, jupyter_visualization_spec):
        """Sets the jupyter_visualization_spec of this PipelineStepCreateAPIInput.


        :param jupyter_visualization_spec: The jupyter_visualization_spec of this PipelineStepCreateAPIInput.  # noqa: E501
        :type jupyter_visualization_spec: PipelineJupyterVisualizationSpec
        """

        self._jupyter_visualization_spec = jupyter_visualization_spec

    @property
    def manual_input_spec(self):
        """Gets the manual_input_spec of this PipelineStepCreateAPIInput.  # noqa: E501


        :return: The manual_input_spec of this PipelineStepCreateAPIInput.  # noqa: E501
        :rtype: PipelineManualInputSpec
        """
        return self._manual_input_spec

    @manual_input_spec.setter
    def manual_input_spec(self, manual_input_spec):
        """Sets the manual_input_spec of this PipelineStepCreateAPIInput.


        :param manual_input_spec: The manual_input_spec of this PipelineStepCreateAPIInput.  # noqa: E501
        :type manual_input_spec: PipelineManualInputSpec
        """

        self._manual_input_spec = manual_input_spec

    @property
    def run_spec(self):
        """Gets the run_spec of this PipelineStepCreateAPIInput.  # noqa: E501


        :return: The run_spec of this PipelineStepCreateAPIInput.  # noqa: E501
        :rtype: PipelineRunSpec
        """
        return self._run_spec

    @run_spec.setter
    def run_spec(self, run_spec):
        """Sets the run_spec of this PipelineStepCreateAPIInput.


        :param run_spec: The run_spec of this PipelineStepCreateAPIInput.  # noqa: E501
        :type run_spec: PipelineRunSpec
        """

        self._run_spec = run_spec

    @property
    def spec_revision(self):
        """Gets the spec_revision of this PipelineStepCreateAPIInput.  # noqa: E501


        :return: The spec_revision of this PipelineStepCreateAPIInput.  # noqa: E501
        :rtype: int
        """
        return self._spec_revision

    @spec_revision.setter
    def spec_revision(self, spec_revision):
        """Sets the spec_revision of this PipelineStepCreateAPIInput.


        :param spec_revision: The spec_revision of this PipelineStepCreateAPIInput.  # noqa: E501
        :type spec_revision: int
        """
        if self.local_vars_configuration.client_side_validation and spec_revision is None:  # noqa: E501
            raise ValueError("Invalid value for `spec_revision`, must not be `None`")  # noqa: E501

        self._spec_revision = spec_revision

    @property
    def step_key(self):
        """Gets the step_key of this PipelineStepCreateAPIInput.  # noqa: E501


        :return: The step_key of this PipelineStepCreateAPIInput.  # noqa: E501
        :rtype: str
        """
        return self._step_key

    @step_key.setter
    def step_key(self, step_key):
        """Sets the step_key of this PipelineStepCreateAPIInput.


        :param step_key: The step_key of this PipelineStepCreateAPIInput.  # noqa: E501
        :type step_key: str
        """
        if self.local_vars_configuration.client_side_validation and step_key is None:  # noqa: E501
            raise ValueError("Invalid value for `step_key`, must not be `None`")  # noqa: E501

        self._step_key = step_key

    @property
    def title(self):
        """Gets the title of this PipelineStepCreateAPIInput.  # noqa: E501


        :return: The title of this PipelineStepCreateAPIInput.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PipelineStepCreateAPIInput.


        :param title: The title of this PipelineStepCreateAPIInput.  # noqa: E501
        :type title: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PipelineStepCreateAPIInput):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PipelineStepCreateAPIInput):
            return True

        return self.to_dict() != other.to_dict()
