# (generated with --quick)

import abc
import torch as th
from typing import Any, Callable, Type, TypeVar

ABC: Type[abc.ABC]

_FuncT = TypeVar('_FuncT', bound=Callable)

class BaseDistribution(abc.ABC):
    __doc__: str
    dist: None
    def __init__(self) -> None: ...
    @abstractmethod
    def entropy(self) -> Any: ...
    @abstractmethod
    def log_prob(self, value) -> Any: ...
    @abstractmethod
    def mean(self) -> Any: ...
    @abstractmethod
    def mode(self) -> Any: ...
    @abstractmethod
    def reset(self) -> None: ...
    @abstractmethod
    def rsample(self, sample_shape = ...) -> Any: ...
    @abstractmethod
    def sample(self, sample_shape = ...) -> Any: ...
    @abstractmethod
    def stddev(self) -> Any: ...
    @abstractmethod
    def variance(self) -> Any: ...

def abstractmethod(funcobj: _FuncT) -> _FuncT: ...
