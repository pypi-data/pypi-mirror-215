# (generated with --quick)

import csv
import datetime
import pathlib
from typing import Annotated, Iterable, List, Optional, Tuple, Type

EVAL_MSG_FORMAT: List[Tuple[str, str, str]]
Path: Type[pathlib.Path]
TRAIN_MSG_FORMAT: List[Tuple[str, str, str]]

class Logger:
    __doc__: str
    _eval_file: pathlib.Path
    _eval_file_write_header: bool
    _log_dir: pathlib.Path
    _train_file: pathlib.Path
    _train_file_write_header: bool
    time_stamp: Annotated[str, 'property']
    def __init__(self, log_dir: pathlib.Path) -> None: ...
    def _dump_to_csv(self, file: pathlib.Path, data: dict, write_header: bool) -> None: ...
    def _format(self, key: str, value, ty: str) -> str: ...
    def debug(self, msg: str) -> None: ...
    def error(self, msg: str) -> None: ...
    def eval(self, msg: dict) -> None: ...
    def info(self, msg: str) -> None: ...
    def parse_eval_msg(self, msg: dict) -> str: ...
    def parse_train_msg(self, msg: dict) -> str: ...
    def train(self, msg: dict) -> None: ...

def colored(text: str, color: Optional[str] = ..., on_color: Optional[str] = ..., attrs: Optional[Iterable[str]] = ...) -> str: ...
