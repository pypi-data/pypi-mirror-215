# (generated with --quick)

import numpy
import rllte.evaluation.comparison
import rllte.evaluation.performance
from typing import Any, Dict, Iterable, List, Optional, Tuple, Type

Comparison: Type[rllte.evaluation.comparison.Comparison]
Performance: Type[rllte.evaluation.performance.Performance]

def min_max_normalize(value: numpy.ndarray, min_scores: numpy.ndarray, max_scores: numpy.ndarray) -> numpy.ndarray: ...
def plot_interval_estimates(metrics_dict: Dict[str, dict], metric_names: List[str], algorithms: List[str], colors: Optional[List[str]] = ..., color_palette: str = ..., max_ticks: float = ..., subfigure_width: float = ..., row_height: float = ..., interval_height: float = ..., xlabel_y_coordinate: float = ..., xlabel: str = ..., **kwargs) -> Tuple[Any, Any]: ...
def plot_performance_profile(profile_dict: Dict[str, list], tau_list: numpy.ndarray, use_non_linear_scaling: bool = ..., figsize: Tuple[float, float] = ..., colors: Optional[List[str]] = ..., color_palette: str = ..., alpha: float = ..., xticks: Optional[Iterable] = ..., yticks: Optional[Iterable] = ..., xlabel: Optional[str] = ..., ylabel: Optional[str] = ..., linestyles: Optional[str] = ..., **kwargs) -> Tuple[Any, Any]: ...
def plot_probability_improvement(poi_dict: Dict[str, list], pair_separator: str = ..., figsize: Tuple[float, float] = ..., colors: Optional[List[str]] = ..., color_palette: str = ..., alpha: float = ..., interval_height: float = ..., xticks: Optional[Iterable] = ..., xlabel: str = ..., left_ylabel: str = ..., right_ylabel: str = ..., **kwargs) -> Tuple[Any, Any]: ...
def plot_sample_efficiency_curve(sampling_dict: Dict[str, dict], frames: numpy.ndarray, algorithms: List[str], colors: Optional[List[str]] = ..., color_palette: str = ..., figsize: Tuple[float, float] = ..., xlabel: Optional[str] = ..., ylabel: Optional[str] = ..., labelsize: str = ..., ticklabelsize: str = ..., **kwargs) -> Tuple[Any, Any]: ...
