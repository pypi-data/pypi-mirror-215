# (generated with --quick)

import numpy as np
import seaborn as sns
from matplotlib import pyplot as plt
from typing import Any, Dict, Iterable, List, Optional, Tuple

def _annotate_and_decorate_axis(ax, labelsize: str = ..., ticklabelsize: str = ..., xticks: Optional[Iterable] = ..., xticklabels: Optional[Iterable] = ..., yticks: Optional[Iterable] = ..., legend: bool = ..., grid_alpha: float = ..., legendsize: str = ..., xlabel: str = ..., ylabel: str = ..., wrect: float = ..., hrect: float = ...) -> Any: ...
def _decorate_axis(ax, wrect: float = ..., hrect: float = ..., ticklabelsize: str = ...) -> Any: ...
def _non_linear_scaling(profile_dict: Dict[str, list], tau_list: np.ndarray, xticklabels: Optional[list] = ..., num_points: int = ..., log_base: float = ...) -> tuple: ...
def plot_interval_estimates(metrics_dict: Dict[str, dict], metric_names: List[str], algorithms: List[str], colors: Optional[List[str]] = ..., color_palette: str = ..., max_ticks: float = ..., subfigure_width: float = ..., row_height: float = ..., interval_height: float = ..., xlabel_y_coordinate: float = ..., xlabel: str = ..., **kwargs) -> Tuple[Any, Any]: ...
def plot_performance_profile(profile_dict: Dict[str, list], tau_list: np.ndarray, use_non_linear_scaling: bool = ..., figsize: Tuple[float, float] = ..., colors: Optional[List[str]] = ..., color_palette: str = ..., alpha: float = ..., xticks: Optional[Iterable] = ..., yticks: Optional[Iterable] = ..., xlabel: Optional[str] = ..., ylabel: Optional[str] = ..., linestyles: Optional[str] = ..., **kwargs) -> Tuple[Any, Any]: ...
def plot_probability_improvement(poi_dict: Dict[str, list], pair_separator: str = ..., figsize: Tuple[float, float] = ..., colors: Optional[List[str]] = ..., color_palette: str = ..., alpha: float = ..., interval_height: float = ..., xticks: Optional[Iterable] = ..., xlabel: str = ..., left_ylabel: str = ..., right_ylabel: str = ..., **kwargs) -> Tuple[Any, Any]: ...
def plot_sample_efficiency_curve(sampling_dict: Dict[str, dict], frames: np.ndarray, algorithms: List[str], colors: Optional[List[str]] = ..., color_palette: str = ..., figsize: Tuple[float, float] = ..., xlabel: Optional[str] = ..., ylabel: Optional[str] = ..., labelsize: str = ..., ticklabelsize: str = ..., **kwargs) -> Tuple[Any, Any]: ...
