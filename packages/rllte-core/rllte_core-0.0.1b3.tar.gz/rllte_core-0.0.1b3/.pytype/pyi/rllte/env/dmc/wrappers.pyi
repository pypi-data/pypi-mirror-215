# (generated with --quick)

import collections
import dm_env
import gymnasium as gym
import numpy as np
from dm_env import specs
from gymnasium import spaces
from typing import Any, Dict, Tuple, Type

deque: Type[collections.deque]

class ActionDTypeWrapper(Any):
    __doc__: str
    _action_spec: Any
    _env: Any
    def __getattr__(self, name) -> Any: ...
    def __init__(self, env, dtype: np.dtype) -> None: ...
    def action_spec(self) -> Any: ...
    def observation_spec(self) -> Any: ...
    def reset(self) -> Any: ...
    def step(self, action: np.ndarray) -> Any: ...

class ActionRepeatWrapper(Any):
    __doc__: str
    _env: Any
    _num_repeats: int
    def __getattr__(self, name) -> Any: ...
    def __init__(self, env, num_repeats: int) -> None: ...
    def action_spec(self) -> Any: ...
    def observation_spec(self) -> Any: ...
    def reset(self) -> Any: ...
    def step(self, action: np.ndarray) -> Any: ...

class DMC2Gymnasium(Any):
    __doc__: str
    action_space: Any
    env: Any
    observation_space: Any
    def __init__(self, env) -> None: ...
    def _spec_to_box(self, spec) -> Any: ...
    def reset(self, **kwargs) -> Tuple[np.ndarray, Dict[str, Any]]: ...
    def step(self, action: np.ndarray) -> Tuple[np.ndarray, float, bool, bool, Dict[str, Any]]: ...

class FlatObsWrapper(Any):
    __doc__: str
    _env: Any
    _obs_spec: Any
    def __getattr__(self, name) -> Any: ...
    def __init__(self, env) -> None: ...
    def _flatten_obs(self, obs: Dict[str, np.ndarray]) -> np.ndarray: ...
    def action_spec(self) -> Any: ...
    def observation_spec(self) -> Any: ...
    def reset(self) -> Any: ...
    def step(self, action: np.ndarray) -> Any: ...

class FrameStackWrapper(Any):
    __doc__: str
    _env: Any
    _frames: collections.deque[np.ndarray[Any, np.dtype]]
    _num_frames: int
    _obs_spec: Any
    _pixels_key: str
    def __getattr__(self, name) -> Any: ...
    def __init__(self, env, num_frames: int, pixels_key: str = ...) -> None: ...
    def _extract_pixels(self, time_step) -> np.ndarray: ...
    def _transform_observation(self, time_step) -> Any: ...
    def action_spec(self) -> Any: ...
    def observation_spec(self) -> Any: ...
    def reset(self) -> Any: ...
    def step(self, action: np.ndarray) -> Any: ...
