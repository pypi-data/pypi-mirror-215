[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "setuptools",
    "setuptools-scm",
]

[project]
authors = [
    {email = "patrickjamesroddy@gmail.com", name = "Patrick J. Roddy"},
]
classifiers = [
    "License :: OSI Approved :: BSD License",
    "Operating System :: POSIX",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Image Processing",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Scientific/Engineering :: Visualization",
    "Typing :: Typed",
]
dependencies = [
    "cmocean>=3.0.3",
    "gmpy2>=2.1.5",
    "hypothesis>=6.70.2",
    "libigl>=2.4.1",
    "matplotlib>=3.7.1",
    "multiprocess>=0.70.14",
    "numba>=0.56.4",
    "numpy>=1.23.5",
    "platformdirs>=3.2.0",
    "plotly>=5.14.0",
    "pooch>=1.7.0",
    "pydantic>=1.10.7",
    "pys2let>=2.2.5",
    "pyssht>=1.5.2",
    "scipy>=1.10.1",
    "seaborn>=0.12.2",
    "tomli>=2.0.1",
    "tqdm>=4.65.0",
]
description = "Slepian Scale-Discretised Wavelets in Python"
dynamic = [
    "version",
]
keywords = [
    "manifolds",
    "python",
    "slepian-functions",
    "sphere",
    "wavelets",
]
name = "sleplet"
optional-dependencies = {dev = [
    "black",
    "build",
    "mypy",
    "pre-commit",
    "ruff",
    "tox",
    "twine",
], docs = [
    "pdoc3",
], readme = [
    "pytest-codeblocks",
]}
readme = "README.md"
requires-python = ">=3.10"
scripts = {mesh = "sleplet._scripts.plotting_on_mesh:main", sphere = "sleplet._scripts.plotting_on_sphere:main"}
urls = {Code = "https://github.com/astro-informatics/sleplet", Documentation = "https://astro-informatics.github.io/sleplet", Download = "https://pypi.org/project/sleplet", Homepage = "https://github.com/astro-informatics/sleplet", Issues = "https://github.com/astro-informatics/sleplet/issues"}
license.file = "LICENCE.md"

[tool.coverage]
report = {skip_covered = true, sort = "cover"}
run = {branch = true, parallel = true, source = ["sleplet"]}
paths.source = [
    "src",
    ".tox*/*/lib/python*/site-packages",
]

[tool.mypy]
explicit_package_bases = true
plugins = [
    "numpy.typing.mypy_plugin",
    "pydantic.mypy",
]

[tool.pytest.ini_options]
addopts = "--color=yes -v"
testpaths = [
    "tests",
]

[tool.ruff]
fix = true
force-exclude = true
ignore = [
    "D105",
    "D203",
    "D205",
    "D212",
    "D401",
    "D407",
    "D417",
    "EM101",
    "EM102",
    "N803",
    "N806",
]
per-file-ignores = {"examples/*" = [
    "D100",
    "T201",
], "test_*" = [
    "S101",
], "tests/*" = [
    "D100",
]}
select = [
    "A",
    "ARG",
    "B",
    "BLE",
    "C",
    "COM",
    "D",
    "DJ",
    "DTZ",
    "E",
    "EM",
    "ERA",
    "EXE",
    "F",
    "FBT",
    "I",
    "ICN",
    "ISC",
    "N",
    "NPY",
    "PD",
    "PGH",
    "PIE",
    "PL",
    "PT",
    "PTH",
    "PYI",
    "Q",
    "RET",
    "RSE",
    "RUF",
    "S",
    "SIM",
    "T",
    "TCH",
    "TID",
    "UP",
    "W",
    "YTT",
]
target-version = "py310"
isort.known-first-party = ["sleplet"]
mccabe.max-complexity = 18
pep8-naming.classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
]

[tool.setuptools_scm]
local_scheme = "no-local-version"
write_to = "src/sleplet/_version.py"

[tool.tomlsort]
all = true
spaces_indent_inline_array = 4
trailing_comma_inline_array = true
overrides."project.classifiers".inline_arrays = false
overrides."tool.coverage.paths.source".inline_arrays = false

[tool.tox]
legacy_tox_ini = """
    [gh-actions]
    python =
        3.10: py310
        3.11: py311

    [gh-actions:env]
    OS =
        ubuntu-latest: linux
        macos-latest: macos

    [testenv]
    commands =
        pytest --cov --cov-report=lcov --slow
    deps =
        pytest-cov
        pytest-skip-slow

    [tox]
    env_list = py{310,311}-{linux,macos}
"""
