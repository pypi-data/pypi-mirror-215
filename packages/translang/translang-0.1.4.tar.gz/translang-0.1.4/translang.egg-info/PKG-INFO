Metadata-Version: 2.1
Name: translang
Version: 0.1.4
Summary: Translation Service API Module.
Home-page: https://github.com/dsdanielpark/hf-transllm
Author: daniel park
Author-email: parkminwoo1991@gmail.com
Keywords: Python,API,Bard,Google Bard,Large Language Model,Chatbot API,Google API,Chatbot
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Science/Research
Classifier: Natural Language :: English
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.6
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE

# translang
Translation Service Module for other projects. 

## Install
```
pip install translang
```

## Usage
### Seamless Integration of Translation APIs through Inheritance
You can easily extend the `TranslationService` class to integrate with popular translation API services.
Refer to the [`inference` method](https://github.com/dsdanielpark/hf-transllm/blob/main/transllm/core.py#L75) and [`generate` method](https://github.com/dsdanielpark/hf-transllm/blob/main/transllm/core.py#L93) in [hf-transllm](https://github.com/dsdanielpark/hf-transllm) project.

```python
from translang import TranslationService

class CustomTranslationService(TranslationService):
    def __init__(self, translator="google", deepl_api_key=None, bard_api_key=None, openai_api_key=None, openai_model='gpt-3.5-turbo'):
        super().__init__(translator, deepl_api_key, bard_api_key, openai_api_key, openai_model)

    def custom_process_with_translation(self, text: str, target_lang: str) -> str:
        translated_text = self.translate(text, target_lang)
        # Perform additional customization or processing if needed
        return translated_text
```

Commercial use or official use of the Google Translate service is chargeable. Please provide the google_official argument and google_api_key. Refer to the following notebook file and official link for more information. Use the google argument only for some basic functionality testing.
```python
translator = CustomTranslationService(translator="google")

translated_text = translator.custom_process_with_translation("Hello", "ko")
print(translated_text)
```

<br>

### `TranslationService.translate` Method
Google Translator, DeepL, OpenAI, Bard
```python
fomr translang import TranslationService

translator = TranslationService(translator="google")                                                                         # Google
# translator = TranslationService(translator="deepl", deepl_api_key="YOUR_DEEPL_API_KEY")                                    # DeepL
# translator = TranslationService(translator="bard", bard_api_key="YOUR_BARD_API_KEY")                                       # Bard
# translator = TranslationService(translator="openai", openai_api_key="YOUR_OPENAI_API_KEY", openai_model="gpt-3.5-trubo")   # Open AI

translated_text = translator.translate("Hello", "ko")
print(translated_text)
```


<br>

### `TranslationService.translate_parallel` Method

```python
from translang import TranslationService

# Create an instance of TranslationService
translator = TranslationService(translator="google", use_cache=True)

# List of texts to translate
texts = [
    "Hello",
    "Nice to meet you",
    "Testing the translation service"
]

# Destination language code
target_lang = "ko"

# Call the translate_parallel method
translated_texts = translator.translate_parallel(texts, target_lang)

# Print the translated texts
for text, translated_text in zip(texts, translated_texts):
    print(f"Original: {text}")
    print(f"Translated: {translated_text}")
    print("-----")

```

<br><br>

## License
[MIT](https://opensource.org/license/mit/) <br>
I hold no legal responsibility; 
```
The MIT License (MIT)

Copyright (c) 2023 Minwoo Park

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
```

### Bugs and Issues
Sincerely grateful for any reports on new features or bugs. Your valuable feedback on the code is highly appreciated.

### Contacts
- Core maintainer: [Daniel Park, South Korea](https://github.com/DSDanielPark) <br>
- E-mail: parkminwoo1991@gmail.com <br>
