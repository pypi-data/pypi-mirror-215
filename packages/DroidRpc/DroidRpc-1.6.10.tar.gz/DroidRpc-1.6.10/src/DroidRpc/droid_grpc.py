# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: droid.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import DroidRpc.droid_pb2 as droid_pb2


class DroidBase(abc.ABC):

    @abc.abstractmethod
    async def CreateBots(self, stream: 'grpclib.server.Stream[droid_pb2.BatchCreateRequest, droid_pb2.BatchCreateResponse]') -> None:
        pass

    @abc.abstractmethod
    async def HedgeBots(self, stream: 'grpclib.server.Stream[droid_pb2.BatchHedgeRequest, droid_pb2.BatchHedgeResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/droidv3.Droid/CreateBots': grpclib.const.Handler(
                self.CreateBots,
                grpclib.const.Cardinality.UNARY_UNARY,
                droid_pb2.BatchCreateRequest,
                droid_pb2.BatchCreateResponse,
            ),
            '/droidv3.Droid/HedgeBots': grpclib.const.Handler(
                self.HedgeBots,
                grpclib.const.Cardinality.UNARY_UNARY,
                droid_pb2.BatchHedgeRequest,
                droid_pb2.BatchHedgeResponse,
            ),
        }


class DroidStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.CreateBots = grpclib.client.UnaryUnaryMethod(
            channel,
            '/droidv3.Droid/CreateBots',
            droid_pb2.BatchCreateRequest,
            droid_pb2.BatchCreateResponse,
        )
        self.HedgeBots = grpclib.client.UnaryUnaryMethod(
            channel,
            '/droidv3.Droid/HedgeBots',
            droid_pb2.BatchHedgeRequest,
            droid_pb2.BatchHedgeResponse,
        )
