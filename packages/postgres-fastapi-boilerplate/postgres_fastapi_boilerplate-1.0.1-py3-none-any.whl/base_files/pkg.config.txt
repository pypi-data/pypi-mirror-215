import logging
from logging.config import dictConfig
from pathlib import Path

from pydantic import (BaseSettings, PostgresDsn)


class Settings(BaseSettings):

    pg_dsn: PostgresDsn = 'postgres://postgres:postgres@localhost:5432/postgres'
    logging_directory: Path = Path('./logs')

    class Config:
        env_files = '.env'


logging_config = {
    "version": 1,
    'disable_existing_loggers': True,
    "formatters": {
        "standard": {
            "format": '%(asctime)s %(name)-12s %(levelname)-8s %(message)s'
        }
    },
    "handlers": {
        "stdout": {
            "level": logging.INFO,
            "formatter": "standard",
            "class": 'logging.StreamHandler',
            "stream": "ext://sys.stdout"
        },
        "stderr": {
            "level": logging.INFO,
            "formatter": "standard",
            "class": 'logging.StreamHandler',
            "stream": "ext://sys.stderr"
        }
    },
    "loggers": {
        "": {  # root logger
            "handlers": ["stdout"],
            "level": logging.INFO,
            "propagate": False
        },
        "uvicorn": {
            "handlers": ["stdout"],
            "level": logging.INFO
        },
        "uvicorn.error": {  # stupid name on uvicorn's part, this is not just errors
            "handlers": ["stdout"],
            "level": logging.INFO,
            "propagate": False
        },
        "uvicorn.access": {
            "handlers": ["stdout"],
            "level": logging.INFO,
            "propagate": False
        }
    }
}


# Load logging config
print(f'Creating logging directory: {Settings().logging_directory.absolute()}')
Settings().logging_directory.mkdir(parents=True, exist_ok=True)
dictConfig(logging_config)


def get_logging_formatter() -> logging.Formatter:
    return logging.Formatter(logging_config['formatters']['standard']['format'])


def get_logging_file_handler(log_file: Path, log_level=logging.INFO) -> logging.FileHandler:
    fh = logging.FileHandler(
        filename=Settings().logging_directory / log_file,
        mode='w'
    )
    fh.setLevel(log_level)
    fh.setFormatter(get_logging_formatter())
    return fh


def init_logger(logger_name: str) -> logging.Logger:
    """
    Initialize a logger

    :param logger_name: use __name__
    :return: logging.Logger
    """
    logger = logging.getLogger(logger_name)
    logger.propagate = False
    logger.addHandler(get_logging_file_handler(Path(f"{logger_name}.log")))
    logger.info(f"Logger initialized")
    return logger
