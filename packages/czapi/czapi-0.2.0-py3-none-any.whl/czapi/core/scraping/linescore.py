# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02_linescore.ipynb (unless otherwise specified).

__all__ = ['get_game_info', 'get_boxscore_with_game_details', 'get_full_boxscore',
           'get_all_boxscores_from_linescore_page']

# Cell

from .base import make_soup
from .constants import BOXSCORE_KWARGS, LINESCORE_SOUP_TYPE, BOXSCORE_SOUP_TYPE
from .event import get_event_name,get_event_date, get_url, _get_event_name, _get_event_date
from bs4 import BeautifulSoup, Tag
from collections import defaultdict
from typing import List, Union, Optional,Tuple
from hashlib import sha256
import re

# Internal Cell
def hash_obj(

     obj
    ,hash_type = 'sha256'
    ,encoding='utf-8'
):
    """Hashes an object according to the passed hash_type and encoding."""
    hash_type = hash_type.lower()
    encoding = encoding.lower()

    if hash_type == 'sha256':
        hash_func = sha256
    else:
        raise NotImplementedError("Hash function %s not supported."%hash_type)

    return hash_func(str(obj).encode(encoding)).hexdigest().lower()


def get_page_soup(

     soup_type : str
    ,url_kwargs : dict
    ,**request_kwargs

)->BeautifulSoup:
    """Returns a BeautifulSoup object which represents a 'boxscore' or 'linescore' page."""
    url = get_url(soup_type = soup_type, **url_kwargs)
    return make_soup(url=url,**request_kwargs)



def request_type(

     cz_event_id : Optional[Union[str,int]] = None
    ,cz_draw_id : Optional[int] = None
    ,game_number : Optional[int] = None
    ,cz_game_id : Optional[Union[str,int]] = None

)->Tuple[str,dict,dict,dict]:
    """Returns request parameters based on the given ids passed."""
    option_1 = [cz_event_id, cz_draw_id]
    option_2 = cz_game_id

    if all([all(option_1), option_2]) or not any([all(option_1),option_2]):
        raise ValueError("One combination of cz_event_id, cz_draw_id and game_number or cz_game_id must be non NoneType.")

    if all(option_1):
        soup_type = LINESCORE_SOUP_TYPE
        url_kwargs = {
             'cz_event_id' : cz_event_id
            ,'cz_draw_id' : cz_draw_id
        }
        game_kwargs = {
            'game_number' : game_number
        }

        draw_kwargs = {}


    else:
        soup_type = BOXSCORE_SOUP_TYPE
        url_kwargs = {
            'cz_game_id' : cz_game_id
        }
        game_kwargs = {}
        draw_kwargs = {}


    return soup_type,url_kwargs,game_kwargs,draw_kwargs

# Internal Cell
def generate_dict_from_table(

    table : Tag

)->defaultdict:
    """Helper function for returning the curling boxscore from a bs4 Tag object."""
    d = defaultdict(list)
    team = None

    # TODO : add error handling for when no table is passed / None

    if table is None:
        raise ValueError('Table tag is NoneType.')

    # loop through tags in table
    for tag in table.find_all('td'):
        if tag.attrs.get('class') == ['linescoreteam']:
            team = tag.a.string
            d[team] = defaultdict(list)
            d[team]['href'] = tag.a['href']
        elif tag.attrs.get('class') == ['linescorehammer']:
            d[team]['hammer'] = not bool(tag.string) # opposite for some reason
        elif tag.attrs.get('class') == ['linescoreend']:
            d[team]['score'].append(tag.string.strip())
        elif tag.attrs.get('class') == ['linescorefinal']:
            d[team]['finalscore'] = tag.b.string.strip()

    return d

# Internal Cell
def _get_draw_from_boxscore_page(
     soup : BeautifulSoup
)->str:
    """Returns draw information from a BeautifulSoup object that represents a 'boxscore' page. Currently not implemented."""
    return 'Not supported for boxscore page.'

def _get_draw_from_linesore_page(
    soup : BeautifulSoup

)->str:
    """Returns draw information from a BeautifulSoup object that represents a 'linescore' page."""
    return soup.find(name='option',attrs={'selected':'selected'}).string

def _get_draw(

     soup : BeautifulSoup
    ,soup_type : str
    ,**kwargs

)->str:
    """Returns draw information from a BeautifulSoup object. Wraps _get_draw_from_linescore_page and _get_draw_from_boxscore_page for convenience."""
    soup_type = soup_type.lower()

    if soup_type == LINESCORE_SOUP_TYPE:
        return _get_draw_from_linesore_page(soup=soup,**kwargs)
    elif soup_type == BOXSCORE_SOUP_TYPE:
        return _get_draw_from_boxscore_page(soup=soup,**kwargs)
    else:
        raise NotImplementedError("%s soup type is not implemented."%soup_type)

def get_draw(

     cz_event_id : Optional[Union[str,int]] = None
    ,cz_draw_id : Optional[int] = None
    ,cz_game_id : Optional[Union[str,int]] = None
    ,**request_kwargs

)->str:
    """Returns draw information for either a event_id, draw_id combo or game_id."""
    soup_type,url_kwargs,game_kwargs,draw_kwargs = request_type(cz_event_id = cz_event_id,cz_draw_id=cz_draw_id,cz_game_id=cz_game_id)
    soup = get_page_soup(soup_type=soup_type,url_kwargs = url_kwargs,**request_kwargs)

    return _get_draw(soup=soup,soup_type=soup_type)


# Internal Cell

def get_boxscore_from_table(

    table : Tag

)->defaultdict:
    """Wraps generate_dict_from_table for clarity / error handling."""
    try:
        return generate_dict_from_table(table = table)

    except ValueError as e:
        # TODO : change return value based on what makes sense for the API
        return {}


def _get_boxscore_from_game_id(

    soup : BeautifulSoup

)->defaultdict:
    """Returns a curling boxscore from a Beautifulsoup object that represents a 'boxscore' page."""

    table = soup.find(**BOXSCORE_KWARGS)

    try:
        return get_boxscore_from_table(table=table)

    except ValueError as e:
        return {}

def get_boxscore_from_game_id(

     cz_game_id : str
    ,**request_kwargs
)->defaultdict:
    """Returns a curling boxscore (dict) based on the cz_game_id."""

    url = 'https://www.curlingzone.com/game.php?1=1&showgameid=%s#1'%cz_game_id
    soup = make_soup(url=url,**request_kwargs)
    return _get_boxscore_from_game_id(soup=soup)

# Internal Cell

def get_table_from_index(

     tables : List[Tag]
    ,game_number : int

)->Tag:
    """Returns a 'table' Tag object from a list of 'table' Tag objects. This helper function allows for 1 indexing instead of 0."""
    # TODO confirm this is the kind of error handling we want
    if game_number < 1 :
        raise ValueError('Table number must be greater than 0.')

    game_idx = game_number -1

    try:
        return tables[game_idx]
    except IndexError as e:
        raise IndexError(". ".join([str(e),"Are you sure that game number is valid?"]))

def get_boxscore_from_tables(

     tables : List[Tag]
    ,game_number : int

)->defaultdict:
    """Returns a boxscore from a passed list of Tag objects which represent different boxscores."""
    try:
        table = get_table_from_index(tables = tables, game_number = game_number)
        return get_boxscore_from_table(table = table)

    except IndexError as e:
        return {}

    except ValueError as e:
        return {}

    except TypeError as e:
        return {}


def _get_boxscore_from_event_draw_game_number(

     soup : BeautifulSoup
    ,game_number : int
)->defaultdict:
    """Returns a boxscore from a BeautifulSoup object which represents a 'linescore' page."""
    tables = get_boxscore_tables_from_event_draw_game_number(soup=soup)
    return get_boxscore_from_tables(tables=tables,game_number = game_number)

def get_boxscore_from_event_draw_game_number(

     cz_event_id : Union[str,int]
    ,cz_draw_id : int
    ,game_number : int
    ,**request_kwargs
)->defaultdict:
    """Returns a curling boxscore (dict) based on the cz_event_id, cz_draw_id and game_number."""
    url = 'https://curlingzone.com/event.php?eventid=%s&view=Scores&showdrawid=%s#1'%(cz_event_id,cz_draw_id)
    soup = make_soup(url=url,**request_kwargs)
    return _get_boxscore_from_event_draw_game_number(soup=soup,game_number = game_number)

def get_boxscore_tables_from_event_draw_game_number(

     soup : BeautifulSoup

)->List[Tag]:
    """Returns all the bs4 Tag objects that represent a curling boxscore."""

    return soup.find_all(**BOXSCORE_KWARGS)

def get_linescore_page_game_num(

    soup : BeautifulSoup

)->int:
    """Returns the number of bs4 Tag objects that represents a curling boxscore."""
    return len(get_boxscore_tables_from_event_draw_game_number(soup=soup))

# Internal Cell
def _get_boxscore(

     soup : BeautifulSoup
    ,soup_type : str
    ,**game_kwargs

)->defaultdict:
    """Returns boxscore information from a BeautifulSoup object which represents either a 'boxscore' or 'linescore' page."""

    soup_type = soup_type.lower()

    if soup_type == LINESCORE_SOUP_TYPE:
        return _get_boxscore_from_event_draw_game_number(soup=soup,**game_kwargs)
    elif soup_type == BOXSCORE_SOUP_TYPE:
        return _get_boxscore_from_game_id(soup=soup,**game_kwargs)
    else:
        raise NotImplementedError("%s soup type is not implemented."%soup_type)

def get_boxscore(

     cz_event_id : Optional[Union[str,int]] = None
    ,cz_draw_id : Optional[int] = None
    ,game_number : Optional[int] = None
    ,cz_game_id : Optional[Union[str,int]] = None
    ,**request_kwargs

)->defaultdict:
    """Returns a curling boxscore (dict) based on the cz_event_id, cz_draw_id and game_number or the cz_game_id."""
    soup_type,url_kwargs,game_kwargs,draw_kwargs = request_type(cz_event_id = cz_event_id,cz_draw_id=cz_draw_id,game_number=game_number,cz_game_id=cz_game_id)
    soup = get_page_soup(soup_type=soup_type,url_kwargs = url_kwargs,**request_kwargs)

    return _get_boxscore(soup=soup,soup_type=soup_type,**game_kwargs)

# Cell

def get_game_info(

     soup : BeautifulSoup
    ,soup_type : str
    ,game_kwargs : dict
    ,draw_kwargs : dict

)->Tuple[str,str,dict,str]:
    """Helper function for convenience which returns game + event info."""
    event = _get_event_name(soup=soup,soup_type = soup_type)
    date = _get_event_date(soup=soup,soup_type = soup_type)
    boxscore = _get_boxscore(soup=soup,soup_type=soup_type,**game_kwargs)
    draw = _get_draw(soup=soup,soup_type = soup_type,**draw_kwargs)

    return event,date,boxscore,draw

# Cell
def _get_boxscore_with_game_details(

     soup
    ,soup_type
    ,game_kwargs
    ,draw_kwargs


)->dict:
    """Returns a boxscore with additional event details from a BeautifulSoup object that represents either a 'boxscore' or 'linescore' page."""
    event,date,boxscore,draw = get_game_info(soup=soup,soup_type=soup_type,game_kwargs=game_kwargs,draw_kwargs=draw_kwargs)
    return {d[0]:{**d[-1],'date':date,'event':event,'draw':draw} for d in boxscore.items()}

def get_boxscore_with_game_details(

     cz_event_id : Optional[Union[str,int]] = None
    ,cz_draw_id : Optional[int] = None
    ,game_number : Optional[int] = None
    ,cz_game_id : Optional[Union[str,int]] = None
    ,**request_kwargs

)->dict:
    """Returns a curling boxscore (dict) with additional event details based on the cz_event_id, cz_draw_id and game_number or the cz_game_id."""
    soup_type,url_kwargs,game_kwargs,draw_kwargs = request_type(cz_event_id = cz_event_id,cz_draw_id=cz_draw_id,game_number=game_number,cz_game_id=cz_game_id)
    soup = get_page_soup(soup_type=soup_type,url_kwargs = url_kwargs,**request_kwargs)

    return _get_boxscore_with_game_details(soup=soup,soup_type=soup_type,game_kwargs=game_kwargs,draw_kwargs=draw_kwargs)

# Cell

def _get_full_boxscore(

     soup
    ,soup_type
    ,game_kwargs
    ,draw_kwargs


)->dict:
    """Returns a boxscore with additional event details and hash from a BeautifulSoup object that represents either a 'boxscore' or 'linescore' page."""
    boxscore_without_hash = _get_boxscore_with_game_details(soup=soup,soup_type=soup_type,game_kwargs=game_kwargs,draw_kwargs=draw_kwargs)

    # will utf-8 always work?
    _hash = hash_obj(obj = boxscore_without_hash)

    return {d[0]:{**d[-1],'hash':_hash} for d in boxscore_without_hash.items()}


def get_full_boxscore(

     cz_event_id : Optional[Union[str,int]] = None
    ,cz_draw_id : Optional[int] = None
    ,game_number : Optional[int] = None
    ,cz_game_id : Optional[Union[str,int]] = None
    ,**request_kwargs


)->dict:
    """
        Returns a curling boxscore (dict) with data hash based on the cz_event_id, cz_draw_id and game_number or the cz_game_id.
        get_full_boxscore limits the number of get_requests that are made to the CurlingZone site.
    """

    soup_type,url_kwargs,game_kwargs,draw_kwargs = request_type(cz_event_id = cz_event_id,cz_draw_id=cz_draw_id,game_number=game_number,cz_game_id=cz_game_id)
    soup = get_page_soup(soup_type=soup_type,url_kwargs = url_kwargs,**request_kwargs)

    return _get_full_boxscore(

         soup = soup
        ,soup_type = soup_type
        ,game_kwargs = game_kwargs
        ,draw_kwargs = draw_kwargs

    )

# Cell

def get_all_boxscores_from_linescore_page(

     cz_event_id : Optional[Union[str,int]] = None
    ,cz_draw_id : Optional[int] = None
    ,**request_kwargs

)->List[dict]:
    """
        Returns all curling boxscores (dict) with data hash based on the cz_event_id and cz_draw_id.
        get_all_boxscores_from_linescore_page limits the number of get_requests that are made to the CurlingZone site.
    """
    soup_type,url_kwargs,game_kwargs,draw_kwargs = request_type(cz_event_id = cz_event_id,cz_draw_id=cz_draw_id)
    soup = get_page_soup(soup_type=soup_type,url_kwargs = url_kwargs,**request_kwargs)
    game_numbers = get_linescore_page_game_num(soup)

    return [_get_full_boxscore(soup=soup,soup_type=soup_type,draw_kwargs=draw_kwargs,game_kwargs = {**game_kwargs,'game_number':i+1}) for i in range(game_numbers)]